{"version":3,"sources":["webpack:///src/app/shared/app.settings.ts","webpack:///src/app/views/offers-details-dialog/offers-details-dialog.component.html","webpack:///src/app/views/offers-details-dialog/offers-details-dialog.component.ts","webpack:///src/app/views/offers/offers.component.html","webpack:///src/app/views/offers/offers.component.ts","webpack:///src/app/views/offers/offers-routing.module.ts","webpack:///src/app/views/offers/offers.module.ts"],"names":["AppSettings","user","size","avatar_hash","this","IMAGES","UNKNOWN_FACE","hash","extension","split","STATIC_AVATAR_ENDPOINT","uid","APP_NAME","APP_LOCALSTORAGE_TOKEN","APP_VERSION","API_ENDPOINT","STATIC_ENDPOINT","API_ENDPOINT_APP","API_ENDPOINT_USER","API_ENDPOINT_OFFERS","API_ENDPOINT_COMPANIES","API_ENDPOINT_USER_ME","API_ENDPOINT_USER_CREATE","API_ENDPOINT_CONFIRM_USER","API_ENDPOINT_USER_REMEMBER_PASSWORD","API_ENDPOINT_USER_REQUEST_REMEMBER_PASSWORD","API_ENDPOINT_USER_REQUEST_USER_AVATAR","API_ENDPOINT_USER_UPLOAD_AVATAR","API_ENDPOINT_USER_SENDMAIL","API_ENDPOINT_AUTH","API_ENDPOINT_AUTH_LOCAL","APP_QUILL_EDITOR_CONFIGURATION","toolbar","list","direction","APP_DEFAULT_MOMENT_LOCALE","GUESS_ROL","value","text","STUDENT_ROL","ADMINISTRATOR_ROL","COMPANY_ROL","ROLES","USER_STATUS_PENDING","USER_STATUS_ACTIVE","USER_STATUS_INACTIVE","USER_STATUS","FORMAT_DATE","UNKNOWN_IMAGE","UNKNOWN_TEAM","NOTIFICATIONS","DEFAULT_TIME","formBuilder","dialogRef","data","titleDisplayedColumns","showRemoveButton","offersDetailsDlgForm","group","company","jobOffer","name","required","position","job","jobDescription","description","province","town","municipe","jobCategory","category","titles","title","isFiltered","console","log","close","apply","offersStoreFacade","usersStoreFacade","route","dialog","offers$","user$","params","pipe","map","id","switchMap","getUserById","jobOffers","offersDisplayedColumns","theme","snapshot","combineLatest","subscribe","offers","hasOwnProperty","filter","offer","find","offerId","idx","dialogConfig","disableClose","autoFocus","selectedOffer","panelClass","open","afterClosed","newUser","newOffer","Object","assign","of","push","users","userid","updateUser","updateOffer","routes","path","component","OffersRoutingModule","forChild","OffersModule","forFeature","environment","production","instrument"],"mappings":"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","file":"x","sourcesContent":["/* import * as moment from 'moment'; */\nexport class AppSettings {\n  public static readonly APP_NAME = 'PoliJob';\n  public static readonly APP_LOCALSTORAGE_TOKEN = 'PoliJob_Token';\n  public static readonly APP_VERSION = '0.1.0';\n  public static readonly API_ENDPOINT = 'api/';\n  public static readonly STATIC_ENDPOINT = AppSettings.API_ENDPOINT + 'static/';\n  public static readonly STATIC_AVATAR_ENDPOINT =\n    AppSettings.STATIC_ENDPOINT + 'images/avatar/';\n  public static readonly API_ENDPOINT_APP = AppSettings.API_ENDPOINT + 'app/';\n  public static readonly API_ENDPOINT_USER = AppSettings.API_ENDPOINT + 'users';\n  public static readonly API_ENDPOINT_OFFERS = AppSettings.API_ENDPOINT + 'jobOffers';\n  public static readonly API_ENDPOINT_COMPANIES = AppSettings.API_ENDPOINT + 'companies';\n  public static readonly API_ENDPOINT_USER_ME =\n    AppSettings.API_ENDPOINT + 'user-me';\n  public static readonly API_ENDPOINT_USER_CREATE =\n    AppSettings.API_ENDPOINT_USER + '/create';\n  public static readonly API_ENDPOINT_CONFIRM_USER =\n    AppSettings.API_ENDPOINT_USER + '/confirm-user';\n  public static readonly API_ENDPOINT_USER_REMEMBER_PASSWORD =\n    AppSettings.API_ENDPOINT_USER + '/remember-password';\n  public static readonly API_ENDPOINT_USER_REQUEST_REMEMBER_PASSWORD =\n    AppSettings.API_ENDPOINT_USER + '/request-remember-password';\n  public static readonly API_ENDPOINT_USER_REQUEST_USER_AVATAR =\n    AppSettings.API_ENDPOINT_USER + '/request-avatar-user';\n\n  public static readonly API_ENDPOINT_USER_UPLOAD_AVATAR =\n    AppSettings.API_ENDPOINT_USER + '/upload-avatar';\n  public static readonly API_ENDPOINT_USER_SENDMAIL =\n    AppSettings.API_ENDPOINT_USER + '/sendmail';\n  public static readonly API_ENDPOINT_AUTH = AppSettings.API_ENDPOINT + 'auth/';\n  public static readonly API_ENDPOINT_AUTH_LOCAL =\n    AppSettings.API_ENDPOINT + 'auth/local/';\n\n  public static readonly APP_QUILL_EDITOR_CONFIGURATION = {\n    toolbar: [\n      ['bold', 'italic', 'underline'],\n      [{ list: 'ordered' }, { list: 'bullet' }],\n      [{ direction: 'rtl' }],\n      ['clean'],\n      ['link']\n    ]\n  };\n\n  public static readonly APP_DEFAULT_MOMENT_LOCALE = 'es';\n  public static readonly GUESS_ROL = {\n    value: 'guess',\n    text: 'settings.rol.GUESS'\n  };\n  public static readonly STUDENT_ROL = {\n    value: 'student',\n    text: 'settings.rol.STUDENT'\n  };\n  public static readonly ADMINISTRATOR_ROL = {\n    value: 'admin',\n    text: 'settings.rol.ADMINISTRATOR'\n  };\n  public static readonly COMPANY_ROL = {\n    value: 'company',\n    text: 'settings.rol.COMPANY'\n  };\n  public static readonly ROLES = [\n    AppSettings.GUESS_ROL,\n    AppSettings.STUDENT_ROL,\n    AppSettings.COMPANY_ROL,\n    AppSettings.ADMINISTRATOR_ROL\n  ];\n\n  public static readonly USER_STATUS_PENDING = {\n    value: 'pending',\n    text: 'settings.status.PENDING'\n  };\n  public static readonly USER_STATUS_ACTIVE = {\n    value: 'active',\n    text: 'settings.status.ACTIVE'\n  };\n  public static readonly USER_STATUS_INACTIVE = {\n    value: 'inactive',\n    text: 'settings.status.INACTIVE'\n  };\n  public static readonly USER_STATUS = [\n    AppSettings.USER_STATUS_PENDING,\n    AppSettings.USER_STATUS_ACTIVE,\n    AppSettings.USER_STATUS_INACTIVE\n  ];\n  public static readonly FORMAT_DATE = 'MM/DD/YYYY';\n\n  public static readonly IMAGES = {\n    UNKNOWN_IMAGE: 'assets/images/image-not-found.png',\n    UNKNOWN_FACE: 'assets/images/face-unknown.png',\n    UNKNOWN_TEAM: 'assets/images/image-not-found.png'\n  };\n\n  public static readonly NOTIFICATIONS = {\n    DEFAULT_TIME: 2000\n  };\n\n  public static getAvatar(\n    user: { uid: string; avatar_hash: string },\n    size: string = 'sm'\n  ): string {\n    if (!user || !user.avatar_hash) {\n      return this.IMAGES.UNKNOWN_FACE;\n    }\n    const [hash, extension] = user.avatar_hash.split('.');\n    return `${this.STATIC_AVATAR_ENDPOINT}${\n      user.uid\n      }/${hash}${size}.${extension}`;\n  }\n  /*   public static getDateFormatted(date: moment.Moment | string) {\n      let dateFormatted = date;\n      if (typeof date === 'string') {\n        dateFormatted = moment(date, 'X');\n      }\n      return (dateFormatted as moment.Moment).format(this.FORMAT_DATE);\n    } */\n}\n","<mat-dialog-content [formGroup]=\"offersDetailsDlgForm\">\n    <mat-card>\n\n        <mat-card-header>\n            <section class=\"mat-typography\">\n                <h3 mat-card-title>Oferta de trabajo</h3>\n            </section>\n        </mat-card-header>\n        <mat-card-content>\n            <fieldset>\n                <legend>Detalle de la oferta</legend>\n                <div>\n                    <mat-form-field class=\"full-width-field\">\n                        <mat-label>Empresa</mat-label>\n                        <input matInput type=\"text\" readonly=\"true\" name=\"company\" formControlName=\"company\">\n                    </mat-form-field>\n                </div>\n                <div>\n                    <mat-form-field class=\"full-width-field\">\n                        <mat-label>Puesto</mat-label>\n                        <input matInput type=\"text\" readonly=\"true\" name=\"position\" formControlName=\"position\">\n                    </mat-form-field>\n                </div>\n                <div>\n                    <mat-form-field class=\"full-width-field\">\n                        <mat-label>Descripción del puesto</mat-label>\n                        <textarea matInput name=\"jobDescription\" [matTextareaAutosize] readonly=\"true\"\n                            formControlName=\"jobDescription\"></textarea>\n                    </mat-form-field>\n                </div>\n            </fieldset>\n            <fieldset>\n                <legend>Municipio</legend>\n                <div>\n\n                    <mat-form-field class=\"half-width-field\">\n                        <mat-label>Provincia</mat-label>\n                        <input matInput type=\"text\" readonly=\"true\" name=\"province\" formControlName=\"province\">\n                    </mat-form-field>\n                    <mat-form-field class=\"half-width-field\">\n                        <mat-label>Municipio</mat-label>\n                        <input matInput type=\"text\" readonly=\"true\" name=\"town\" formControlName=\"town\">\n                    </mat-form-field>\n                </div>\n            </fieldset>\n            <fieldset>\n                <legend>Destinado a profesional de:</legend>\n                <div>\n                    <mat-form-field class=\"full-width-field\">\n                        <mat-label>Familia profesional</mat-label>\n                        <input matInput type=\"text\" readonly=\"true\" name=\"jobCategory\" formControlName=\"jobCategory\">\n                    </mat-form-field>\n                </div>\n                <section class=\"mat-typography\">\n                    <h3>Títulos compatibles con la oferta</h3>\n                </section>\n                <table mat-table [dataSource]=\"titles\" class=\"mat-elevation-z8\">\n                    <!-- id Column -->\n                    <ng-container matColumnDef=\"id\">\n                        <th mat-header-cell *matHeaderCellDef> id </th>\n                        <td mat-cell *matCellDef=\"let element\"> {{element.uid}} </td>\n                    </ng-container>\n                    <!-- title name Column -->\n                    <ng-container matColumnDef=\"titleName\">\n                        <th mat-header-cell *matHeaderCellDef> Denominación del título </th>\n                        <td mat-cell *matCellDef=\"let element\"> {{element.name}} </td>\n                    </ng-container>\n\n\n                    <tr mat-header-row *matHeaderRowDef=\"titleDisplayedColumns\"></tr>\n                    <tr mat-row *matRowDef=\"let row; columns: titleDisplayedColumns\"></tr>\n                </table>\n            </fieldset>\n        </mat-card-content>\n    </mat-card>\n</mat-dialog-content>\n\n<mat-dialog-actions>\n    <button class=\"mat-raised-button\" (click)=\"close()\">Cerrar</button>\n\n    <button class=\"mat-raised-button mat-primary\" (click)=\"apply()\" [ngSwitch]=\"showRemoveButton\">\n        <span *ngSwitchCase=\"false\">Inscribirme a la oferta</span>\n        <span *ngSwitchCase=\"true\">Borrarme de la oferta</span>\n    </button>\n</mat-dialog-actions>","import { Component, OnInit, Inject, ViewEncapsulation } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { TitleStudy } from '@shared/models/study.model';\n\n@Component({\n  selector: 'app-offers-details-dialog',\n  templateUrl: './offers-details-dialog.component.html',\n  styleUrls: ['./offers-details-dialog.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class OffersDetailsDialogComponent implements OnInit {\n  public offersDetailsDlgForm: FormGroup;\n  public titleDisplayedColumns: string[] = ['titleName'];\n  public titles: TitleStudy[];\n  public showRemoveButton: boolean = false;\n\n\n  constructor(private formBuilder: FormBuilder,\n    private dialogRef: MatDialogRef<OffersDetailsDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) data) {\n\n\n    this.offersDetailsDlgForm = this.formBuilder.group({\n      company: [data.jobOffer.company.name, Validators.required],\n      position: [data.jobOffer.job.name, Validators.required],\n      jobDescription: [data.jobOffer.job.description, Validators.required],\n      province: [data.jobOffer.province.name, Validators.required],\n      town: [data.jobOffer.municipe.name, Validators.required],\n      jobCategory: [data.jobOffer.category.name, Validators.required]\n    });\n    this.titles = data.jobOffer.title;\n    this.showRemoveButton = data.isFiltered;\n    console.log('Is filtered ' + this.showRemoveButton);\n\n  }\n\n  ngOnInit(): void {\n  }\n  close() {\n    this.dialogRef.close();\n  }\n  apply() {\n    this.dialogRef.close(this.offersDetailsDlgForm.value);\n  }\n\n}\n","<section class=\"mat-typography\">\n    <h3>Job offers</h3>\n</section>\n<table mat-table [dataSource]=\"jobOffers\" class=\"mat-elevation-z8 light-theme\">\n    <!-- id Column -->\n    <ng-container matColumnDef=\"id\">\n        <th mat-header-cell *matHeaderCellDef> id </th>\n        <td mat-cell *matCellDef=\"let element\"> {{element.id}} </td>\n    </ng-container>\n\n    <!-- company name Column -->\n    <ng-container matColumnDef=\"companyName\">\n        <th mat-header-cell *matHeaderCellDef> Empresa </th>\n        <td mat-cell *matCellDef=\"let element\"> {{element.company.name}} </td>\n    </ng-container>\n\n    <!-- category column -->\n    <ng-container matColumnDef=\"category\">\n        <th mat-header-cell *matHeaderCellDef> Familia Profesional </th>\n        <td mat-cell *matCellDef=\"let element\"> {{element.category.name}} </td>\n    </ng-container>\n\n    <!-- Date Column -->\n    <ng-container matColumnDef=\"date\">\n        <th mat-header-cell *matHeaderCellDef> Fecha </th>\n        <td mat-cell *matCellDef=\"let element\"> {{element.date}} </td>\n    </ng-container>\n\n    <!-- province column -->\n    <ng-container matColumnDef=\"province\">\n        <th mat-header-cell *matHeaderCellDef> Província </th>\n        <td mat-cell *matCellDef=\"let element\"> {{element.province.name}} </td>\n    </ng-container>\n\n    <tr mat-header-row *matHeaderRowDef=\"offersDisplayedColumns\"></tr>\n    <tr mat-row *matRowDef=\"let row; columns: offersDisplayedColumns;let i = index\" (click)=\"viewOfferDetail(i)\">\n    </tr>\n</table>","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Offer } from '@shared/models/offer.model';\nimport { User } from '@shared/models/user.model';\nimport { Observable, combineLatest } from 'rxjs';\nimport { OffersStoreFacade } from '@shared/state/offers/offers.store-facade';\nimport { UsersStoreFacade } from '@shared/state/user/user.store-facade';\nimport { map, switchMap } from 'rxjs/operators';\nimport { MatDialog, MatDialogConfig } from '@angular/material/dialog';\nimport { OffersDetailsDialogComponent } from '@views/offers-details-dialog/offers-details-dialog.component';\n\n\n@Component({\n  selector: 'app-offers',\n  templateUrl: './offers.component.html',\n  styleUrls: ['./offers.component.scss']\n\n})\nexport class OffersComponent implements OnInit {\n\n  offers$: Observable<Offer[]> = this.offersStoreFacade.offers$;\n\n  user$: Observable<User> = this.route.params.pipe(\n    map(params => params.id),\n    switchMap(id => this.usersStoreFacade.getUserById(id))\n  );\n\n  public isFiltered: boolean = false;\n  public user: User;\n  public jobOffers: Offer[] = [];\n  public selectedOffer: Offer;\n  public offersDisplayedColumns: string[] = ['companyName', 'category', 'date', 'province'];\n  public theme = \"light-theme\";\n\n  constructor(private offersStoreFacade: OffersStoreFacade, private usersStoreFacade: UsersStoreFacade,\n    private route: ActivatedRoute, private dialog: MatDialog) {\n\n    if (this.route.snapshot.data.title === 'Filtered Student Offers') {\n      this.isFiltered = true;\n    }\n    console.log(this.isFiltered);\n  }\n\n  ngOnInit() {\n    combineLatest(this.user$, this.offers$).subscribe(\n      ([user, offers]) => {\n        if (user.hasOwnProperty('name')) {\n          this.user = user;\n          if (this.isFiltered) {\n            // Only these job offers to which the user is subscribed are shown\n            this.jobOffers = offers.filter(offer => user.offers.find(offerId => offerId === offer.id));\n          } else {\n            // Only these job offers to which the user is NOT subscribed are shown\n            this.jobOffers = offers.filter(offer => !user.offers.find(offerId => offerId === offer.id));\n          }\n        }\n      }\n    );\n  }\n\n\n  viewOfferDetail(idx) {\n    const dialogConfig = new MatDialogConfig();\n\n    dialogConfig.disableClose = true;\n    dialogConfig.autoFocus = true;\n    this.selectedOffer = this.jobOffers[idx];\n\n    dialogConfig.data = {\n      'jobOffer': this.selectedOffer,\n      'isFiltered': this.isFiltered\n    }\n    dialogConfig.panelClass = this.theme;\n    console.log(dialogConfig.data);\n    const dialogRef = this.dialog.open(OffersDetailsDialogComponent, dialogConfig);\n\n    dialogRef.afterClosed().subscribe(\n      data => {\n\n        let newUser: Partial<User> = {};\n        let newOffer: Partial<Offer> = {};\n        Object.assign(newOffer, this.selectedOffer);\n\n        newUser.id = this.user.id;\n\n        if (data && !this.isFiltered) {\n          // the student wants to get subscribed\n          newUser.offers = [this.selectedOffer.id];\n          this.user.offers.map(of => newUser.offers.push(of));\n\n          // we add the student id to the offer\n          newOffer.users = [newUser.id];\n          this.selectedOffer.users.map((user) => newOffer.users.push(user));\n\n        } else if (data && this.isFiltered) {\n          // the student wants to remove subscription to the offer\n          newUser.offers = this.user.offers.filter(offerId => offerId !== this.selectedOffer.id);\n\n          // we remove the student id from the offer\n          newOffer.users = this.selectedOffer.users.filter(userid => userid == newUser.id);\n        }\n\n        // we update the user state\n        this.usersStoreFacade.updateUser(newUser);\n\n        // then we update the offer state\n\n\n        this.offersStoreFacade.updateOffer(newOffer);\n      }\n    );\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { OffersComponent } from '../offers/offers.component';\n\nconst routes: Routes = [\n  {\n    path: \"\", component: OffersComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class OffersRoutingModule { }\n","import { NgModule } from \"@angular/core\";\nimport { CommonModule } from '@angular/common';\nimport { OffersRoutingModule } from './offers-routing.module';\nimport { OffersComponent } from './offers.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { OffersDetailsDialogComponent } from '@views/offers-details-dialog/offers-details-dialog.component';\nimport { SharedModule } from '@shared/shared.module';\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\nimport * as fromOffers from '@shared/state/offers';\nimport * as fromUsers from '@shared/state/user';\nimport { OffersEffects } from '@shared/state/offers/offers.effects';\nimport { UsersEffects } from '@shared/state/user/user.effects';\nimport { environment } from '@environments/environment';\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools';\nimport { OffersStoreFacade } from '@shared/state/offers/offers.store-facade';\nimport { OffersService } from '@shared/services/offers.service';\nimport { UsersStoreFacade } from '@shared/state/user/user.store-facade';\nimport { StudentsService } from '@shared/services/students.service';\n\n@NgModule({\n  declarations: [\n    OffersComponent,\n    OffersDetailsDialogComponent\n  ],\n  imports: [\n    CommonModule,\n    OffersRoutingModule,\n    ReactiveFormsModule,\n    FormsModule,\n    SharedModule,\n    StoreModule.forFeature('offers', fromOffers.reducers),\n    StoreModule.forFeature('users', fromUsers.reducers),\n    EffectsModule.forFeature([OffersEffects, UsersEffects]),\n    !environment.production ? StoreDevtoolsModule.instrument() : []\n  ],\n  exports: [\n    OffersComponent\n  ],\n  providers: [\n    OffersStoreFacade, OffersService,\n    UsersStoreFacade, StudentsService\n  ],\n  entryComponents: [\n    OffersDetailsDialogComponent\n  ]\n})\n\nexport class OffersModule { }"]}