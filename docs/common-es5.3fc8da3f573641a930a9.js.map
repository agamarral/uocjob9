{"version":3,"sources":["webpack:///src/app/shared/state/company/company.store-facade.ts","webpack:///src/app/shared/state/offers/offers.store-facade.ts","webpack:///src/app/shared/state/offers/offers.effects.ts","webpack:///src/app/shared/services/offers.service.ts","webpack:///src/app/views/validators/username-validator.ts","webpack:///src/app/shared/state/offers/offers.reducer.ts","webpack:///src/app/shared/state/offers/index.ts","webpack:///src/app/shared/state/offers/offers.actions.ts","webpack:///src/app/shared/state/user/user.effects.ts","webpack:///src/app/shared/state/user/user.store-facade.ts","webpack:///src/app/shared/services/companies.service.ts","webpack:///src/app/shared/services/students.service.ts","webpack:///src/app/shared/state/company/company.effects.ts","webpack:///src/app/shared/state/user/index.ts","webpack:///src/app/shared/state/company/index.ts"],"names":["CompaniesStoreFacade","store","companies$","this","pipe","console","log","company","dispatch","a","id","username","password","OffersStoreFacade","offers$","offer","OffersEffects","actions$","offersService","loadAll$","c","getOffers","offers","create$","createOffer","err","alert","message","concern","error","update$","updateOffer","delete$","removeOffer","d","OffersService","http","get","API_ENDPOINT_OFFERS","post","put","offerId","usernameValidator","control","value","startsWith","endsWith","invalidName","valid","offersAdapter","selectId","sortComparer","offersReducer","ids","entities","0","state","setAll","addOne","updateOne","changes","removeOne","reducers","action","getOffersState","getOffersEntitiesState","getAllOffers","getSelectors","selectAll","OfferActionTypes","LOAD_ALL_OFFERS","LOAD_ALL_OFFER_SUCCESS","CREATE_OFFER","CREATE_OFFER_SUCCESS","OFFER_FAILED","UPDATE_OFFER","UPDATE_OFFER_SUCCESS","DELETE_OFFER","DELETE_OFFER_SUCCESS","loadAllOffers","loadAllOffersSuccess","createOfferSuccess","updateOfferSuccess","deleteOfferSuccess","deleteOffer","failure","UsersEffects","studentsService","getStudents","users","user","createStudent","updateStudent","removeStudent","UsersStoreFacade","users$","CompaniesService","API_ENDPOINT_COMPANIES","StudentsService","API_ENDPOINT_USER","student","CompaniesEffects","companiesService","getCompanies","companies","createCompany","updateCompany","removeCompany","getUsersState","getUsersEntitiesState","getAllUsers","getUserById","getUserByCredentials","getUserByUsername","getCompaniesState","getCompaniesEntitiesState","getAllCompanies","getCompanyById","getCompanyByCredentials","getCompanyByUsername"],"mappings":"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","file":"x","sourcesContent":["import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Company } from '@shared/models/company.model';\nimport * as fromselector from '@shared/state/company';\nimport { State } from '@shared/state/company/company.state';\nimport { addCompany, deleteCompany, updateCompany } from '@shared/state/company/company.actions';\n\n@Injectable()\nexport class CompaniesStoreFacade {\n\n    companies$ = this.store.pipe(\n        select(fromselector.getAllCompanies)\n    );\n\n    constructor(private store: Store<State>) {\n        console.log(\"My store companies\");\n        console.log(store);\n    }\n\n    addCompany(company: Company) {\n        this.store.dispatch(addCompany({ company }));\n    }\n\n    updateCompany(company: Partial<Company>) {\n        this.store.dispatch(updateCompany({ company }));\n    }\n\n    deleteCompany(id: number) {\n        this.store.dispatch(deleteCompany({ id }));\n    }\n\n    getCompanyById(id: number) {\n        console.log(\"getCompanyById \" + id);\n        return this.store.pipe(\n            select(fromselector.getCompanyById(id))\n        );\n    }\n    getCompanyByCredentials(username: string, password: string) {\n        console.log(\"getCompanyByCredentials \" + username);\n        return this.store.pipe(\n            select(fromselector.getCompanyByCredentials(username, password))\n        );\n    }\n    getCompanyByUsername(username: string) {\n        console.log(\"getCompanyByUsername \" + username);\n        return this.store.pipe(\n            select(fromselector.getCompanyByUsername(username))\n        );\n    }\n}","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Offer } from '@shared/models/offer.model';\nimport * as fromselector from '@shared/state/offers';\nimport { State } from '@shared/state/offers/offers.state';\nimport { createOffer, deleteOffer, updateOffer } from '@shared/state/offers/offers.actions';\n\n@Injectable()\nexport class OffersStoreFacade {\n\n    offers$ = this.store.pipe(\n        select(fromselector.getAllOffers)\n    );\n\n    constructor(private store: Store<State>) {\n        console.log(\"My store offers\");\n        console.log(store);\n    }\n\n    addOffer(offer: Offer) {\n        this.store.dispatch(createOffer({ offer }));\n    }\n\n    updateOffer(offer: Partial<Offer>) {\n        this.store.dispatch(updateOffer({ offer }));\n    }\n\n    deleteOffer(id: number) {\n        this.store.dispatch(deleteOffer({ id }));\n    }\n\n    getOfferById(id: number) {\n        console.log(\"getOfferById\");\n        return this.store.pipe(\n            select(fromselector.getOfferById(id))\n        );\n    }\n}","import { Injectable } from '@angular/core';\nimport { of } from 'rxjs';\nimport {\n    catchError,\n    exhaustMap,\n    map, pluck,\n    startWith,\n    switchMap\n} from 'rxjs/operators';\nimport { Actions, createEffect, Effect, ofType } from '@ngrx/effects';\nimport { OffersService } from '@shared/services/offers.service';\nimport {\n    loadAllOffers,\n    loadAllOffersSuccess,\n    createOffer,\n    createOfferSuccess,\n    failure,\n    deleteOffer,\n    deleteOfferSuccess,\n    updateOffer,\n    updateOfferSuccess\n} from '@shared/state/offers/offers.actions';\n\n@Injectable()\nexport class OffersEffects {\n\n    loadAll$ = createEffect(() => this.actions$.pipe(\n        ofType(loadAllOffers),\n        startWith(loadAllOffers()),\n        switchMap(() => this.offersService.getOffers().pipe(\n            map(offers => loadAllOffersSuccess({ offers }))\n        )),\n    ));\n\n    create$ = createEffect(() => this.actions$.pipe(\n        ofType(createOffer),\n        pluck('offer'),\n        switchMap(offer => this.offersService.createOffer(offer).pipe(\n            map(offer => createOfferSuccess({ offer })),\n            catchError(err => {\n                alert(err.message);\n                return of(failure({ err: { concern: 'CREATE', error: err } }));\n            })\n        ))\n    ));\n\n    update$ = createEffect(() => this.actions$.pipe(\n        ofType(updateOffer),\n        switchMap(({ offer }) => this.offersService.updateOffer(offer).pipe(\n            map(() => updateOfferSuccess({ offer })),\n            catchError(err => {\n                alert(err.message);\n                return of(failure({ err: { concern: 'UPDATE', error: err } }));\n            })\n        ))\n    ));\n\n    delete$ = createEffect(() => this.actions$.pipe(\n        ofType(deleteOffer),\n        pluck('id'),\n        switchMap(id => this.offersService.removeOffer(id).pipe(\n            pluck('id'),\n            map(id => deleteOfferSuccess({ id })),\n            catchError(err => {\n                alert(err.message);\n                return of(failure({ err: { concern: 'UPDATE', error: err } }));\n            })\n        ))\n    ));\n\n\n    constructor(\n        private actions$: Actions,\n        private offersService: OffersService\n    ) { }\n\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { AppSettings } from '../app.settings';\nimport { Offer } from '../models/offer.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OffersService {\n\n  constructor(private http: HttpClient) { }\n\n  getOffers(): Observable<Offer[]> {\n\n    return this.http.get<Offer[]>(AppSettings.API_ENDPOINT_OFFERS);\n  }\n  createOffer(offer: Offer): Observable<any> {\n    return this.http.post<Offer>(AppSettings.API_ENDPOINT_OFFERS, offer);\n  }\n  updateOffer(offer: Partial<Offer>): Observable<Offer> {\n    return this.http.put<Offer>(AppSettings.API_ENDPOINT_OFFERS, offer);\n  }\n  removeOffer(offerId: number): Observable<Offer> {\n    return this.http.delete<Offer>(`${AppSettings.API_ENDPOINT_OFFERS}/${offerId}`);\n  }\n}\n\n\n\n\n","import { AbstractControl } from '@angular/forms';\n\nexport function usernameValidator(control: AbstractControl): { [key: string]: any } | null {\n\n    let valid = control.value && !control.value.startsWith(\" \") && !control.value.endsWith(\" \");\n    return valid ? null : { invalidName: { valid: false, value: control.value } };\n}","import { createOfferSuccess, updateOfferSuccess, deleteOfferSuccess, loadAllOffersSuccess } from '@shared/state/offers/offers.actions';\nimport { State } from '@shared/state/offers/offers.state';\nimport { EntityAdapter, createEntityAdapter } from '@ngrx/entity';\nimport { Offer } from '@shared/models/offer.model';\nimport { createReducer, on } from '@ngrx/store';\n\n\nexport const offersAdapter: EntityAdapter<Offer> = createEntityAdapter<Offer>({\n    selectId: (offer: Offer) => offer.id,\n    sortComparer: false\n});\n\n\nexport const offersInitialState: State = {\n    ids: [],\n    entities: { 0: <Offer>{} }\n}\nexport const offersReducer = createReducer<State>(\n    offersInitialState,\n    on(loadAllOffersSuccess, (state, { offers }) =>\n        offersAdapter.setAll(offers, state)\n    ),\n    on(createOfferSuccess, (state, { offer }) => {\n\n        console.log(\"addOfferSuccess\");\n        console.log(offer);\n        return offersAdapter.addOne(offer, state);\n\n    }),\n    on(updateOfferSuccess, (state, { offer }) => {\n        console.log('updateOfferSuccess');\n        console.log(offer);\n        return offersAdapter.updateOne({ id: offer.id, changes: offer }, state);\n    }),\n    on(deleteOfferSuccess, (state, { id }) =>\n        offersAdapter.removeOne(id, state)\n    )\n);\nexport const getOfferById = (id: number) => (state: State) => state.entities[id];","import * as fromreducer from './offers.reducer';\nimport { State } from './offers.state';\nimport { Action, combineReducers, createFeatureSelector, createSelector } from '@ngrx/store';\n\nexport interface OffersState {\n    offers: State;\n}\n\n/** Provide reducers with AoT-compilation compliance */\nexport function reducers(state: OffersState | undefined, action: Action) {\n    return combineReducers({\n        offers: fromreducer.offersReducer\n    })(state, action)\n}\n\n\n/**\n * The createFeatureSelector function selects a piece of state from the root of the state object.\n * This is used for selecting feature states that are loaded eagerly or lazily.\n */\nexport const getOffersState = createFeatureSelector<OffersState>('offers');\n\nexport const getOffersEntitiesState = createSelector(\n    getOffersState,\n    state => state.offers\n);\n\nexport const {\n    selectAll: getAllOffers,\n} = fromreducer.offersAdapter.getSelectors(getOffersEntitiesState);\n\nexport const getOfferById = (id: number) => createSelector(\n    getOffersEntitiesState,\n    fromreducer.getOfferById(id)\n);\n","import { Action, createAction, props } from '@ngrx/store';\nimport { Offer } from '@shared/models/offer.model';\n\nexport enum OfferActionTypes {\n    LOAD_ALL_OFFERS = '[Offer] Add all offers',\n    LOAD_ALL_OFFER_SUCCESS = '[Offer] Add all offers success',\n    CREATE_OFFER = '[Offer] Create offer',\n    CREATE_OFFER_SUCCESS = '[Offer] Create offer success',\n    OFFER_FAILED = '[Offer] failure',\n    UPDATE_OFFER = '[Offer] Update offer',\n    UPDATE_OFFER_SUCCESS = '[Offer] Update offer success',\n    DELETE_OFFER = '[Offer] Delete offer',\n    DELETE_OFFER_SUCCESS = '[Offer] Delete offer success',\n}\nexport const loadAllOffers = createAction(\n    OfferActionTypes.LOAD_ALL_OFFERS\n\n);\nexport const loadAllOffersSuccess = createAction(\n    OfferActionTypes.LOAD_ALL_OFFER_SUCCESS,\n    props<{ offers: Offer[] }>()\n);\nexport const createOffer = createAction(\n    OfferActionTypes.CREATE_OFFER,\n    props<{ offer: Offer }>()\n);\nexport const createOfferSuccess = createAction(\n    OfferActionTypes.CREATE_OFFER_SUCCESS,\n    props<{ offer: Offer }>()\n);\n\nexport const updateOffer = createAction(\n    OfferActionTypes.UPDATE_OFFER,\n    props<{ offer: Partial<Offer> }>()\n);\n\nexport const updateOfferSuccess = createAction(\n    OfferActionTypes.UPDATE_OFFER_SUCCESS,\n    props<{ offer: Partial<Offer> }>()\n);\n\nexport const deleteOfferSuccess = createAction(\n    OfferActionTypes.DELETE_OFFER_SUCCESS,\n    props<{ id: number }>()\n);\nexport const deleteOffer = createAction(\n    OfferActionTypes.DELETE_OFFER,\n    props<{ id: number }>()\n);\nexport const failure = createAction(\n    OfferActionTypes.OFFER_FAILED,\n    props<{ err: { concern: 'CREATE' | 'DELETE' | 'UPDATE', error: any } }>()\n);\n\n\n\n","import { Injectable } from '@angular/core';\nimport { of } from 'rxjs';\nimport {\n    catchError,\n    exhaustMap,\n    map, pluck,\n    startWith,\n    switchMap\n} from 'rxjs/operators';\nimport { Actions, createEffect, Effect, ofType } from '@ngrx/effects';\nimport { StudentsService } from '@shared/services/students.service';\nimport {\n    loadAllUsers,\n    loadAllUsersSuccess,\n    addUser,\n    addUserSuccess,\n    failure,\n    deleteUser,\n    deleteUserSuccess,\n    updateUser,\n    updateUserSuccess\n} from '@shared/state/user/user.actions';\n\n@Injectable()\nexport class UsersEffects {\n\n    loadAll$ = createEffect(() => this.actions$.pipe(\n        ofType(loadAllUsers),\n        startWith(loadAllUsers()),\n        switchMap(() => this.studentsService.getStudents().pipe(\n            map(users => loadAllUsersSuccess({ users }))\n        )),\n    ));\n\n    create$ = createEffect(() => this.actions$.pipe(\n        ofType(addUser),\n        pluck('user'),\n        switchMap(user => this.studentsService.createStudent(user).pipe(\n            map(user => addUserSuccess({ user })),\n            catchError(err => {\n                alert(err.message);\n                return of(failure({ err: { concern: 'CREATE', error: err } }));\n            })\n        ))\n    ));\n\n\n    update$ = createEffect(() => this.actions$.pipe(\n        ofType(updateUser),\n        switchMap(({ user }) => this.studentsService.updateStudent(user).pipe(\n            map(() => updateUserSuccess({ user })),\n            catchError(err => {\n                alert(err.message);\n                return of(failure({ err: { concern: 'UPDATE', error: err } }));\n            })\n        ))\n    ));\n\n    delete$ = createEffect(() => this.actions$.pipe(\n        ofType(deleteUser),\n        pluck('id'),\n        switchMap(id => this.studentsService.removeStudent(id).pipe(\n            pluck('id'),\n            map(id => deleteUserSuccess({ id })),\n            catchError(err => {\n                alert(err.message);\n                return of(failure({ err: { concern: 'UPDATE', error: err } }));\n            })\n        ))\n    ));\n\n\n    constructor(\n        private actions$: Actions,\n        private studentsService: StudentsService\n    ) { }\n\n\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { User } from '@shared/models/user.model';\nimport * as fromselector from '@shared/state/user';\nimport { State } from '@shared/state/user/user.state';\nimport { addUser, deleteUser, updateUser } from '@shared/state/user/user.actions';\n\n@Injectable()\nexport class UsersStoreFacade {\n\n    users$ = this.store.pipe(\n        select(fromselector.getAllUsers)\n    );\n\n    constructor(private store: Store<State>) {\n        console.log(\"My store \");\n        console.log(store);\n    }\n\n    addUser(user: User) {\n        this.store.dispatch(addUser({ user }));\n    }\n\n    updateUser(user: Partial<User>) {\n        this.store.dispatch(updateUser({ user }));\n    }\n\n    deleteUser(id: number) {\n        this.store.dispatch(deleteUser({ id }));\n    }\n\n    getUserById(id: number) {\n        console.log(\"getUserById\");\n        return this.store.pipe(\n            select(fromselector.getUserById(id))\n        );\n    }\n    getUserByCredentials(username: string, password: string) {\n        console.log(\"getUserByCredentials\");\n        return this.store.pipe(\n            select(fromselector.getUserByCredentials(username, password))\n        );\n    }\n    getUserByUsername(username: string) {\n        console.log(\"getUserByUsername\");\n        return this.store.pipe(\n            select(fromselector.getUserByUsername(username))\n        );\n    }\n}","import { Injectable } from '@angular/core';\nimport { Observable, from } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { AppSettings } from '../app.settings';\nimport { Company } from '@shared/models/company.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CompaniesService {\n\n  constructor(private http: HttpClient) { }\n\n  getCompanies(): Observable<Company[]> {\n    console.log('getCompanies');\n    return this.http.get<Company[]>(AppSettings.API_ENDPOINT_COMPANIES);\n  }\n  createCompany(company: Company): Observable<any> {\n    console.log('createCompany');\n    return this.http.post(AppSettings.API_ENDPOINT_COMPANIES, company);\n  }\n\n  updateCompany(company: Partial<Company>): Observable<Company> {\n    console.log('updateCompany');\n    return this.http.put<Company>(AppSettings.API_ENDPOINT_COMPANIES, company);\n\n  }\n  removeCompany(id: number): Observable<Company> {\n    console.log('removeCompany');\n    return this.http.delete<Company>(`${AppSettings.API_ENDPOINT_COMPANIES}/${id}`);\n\n  }\n}","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { AppSettings } from '../app.settings';\nimport { User } from '@shared/models/user.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StudentsService {\n\n  constructor(private http: HttpClient) { }\n\n  getStudents(): Observable<User[]> {\n    console.log('getStudents');\n    return this.http.get<User[]>(AppSettings.API_ENDPOINT_USER);\n  }\n  createStudent(student: User): Observable<any> {\n    console.log('createStudent');\n    return this.http.post(AppSettings.API_ENDPOINT_USER, student);\n  }\n\n  updateStudent(student: Partial<User>): Observable<User> {\n    console.log('updateStudent');\n    return this.http.put<User>(AppSettings.API_ENDPOINT_USER, student);\n\n  }\n  removeStudent(id: number): Observable<User> {\n    console.log('removeStudent');\n    return this.http.delete<User>(`${AppSettings.API_ENDPOINT_USER}/${id}`);\n\n  }\n}","import { Injectable } from '@angular/core';\nimport { of } from 'rxjs';\nimport {\n    catchError,\n    map, pluck,\n    startWith,\n    switchMap\n} from 'rxjs/operators';\nimport { Actions, createEffect, Effect, ofType } from '@ngrx/effects';\nimport { CompaniesService } from '@shared/services/companies.service';\nimport {\n    loadAllCompanies,\n    loadAllCompaniesSuccess,\n    addCompany,\n    addCompanySuccess,\n    failure,\n    deleteCompany,\n    deleteCompanySuccess,\n    updateCompany,\n    updateCompanySuccess\n} from '@shared/state/company/company.actions';\n\n@Injectable()\nexport class CompaniesEffects {\n\n    loadAll$ = createEffect(() => this.actions$.pipe(\n        ofType(loadAllCompanies),\n        startWith(loadAllCompanies()),\n        switchMap(() => this.companiesService.getCompanies().pipe(\n            map(companies => loadAllCompaniesSuccess({ companies }))\n        )),\n    ));\n\n    create$ = createEffect(() => this.actions$.pipe(\n        ofType(addCompany),\n        pluck('company'),\n        switchMap(company => this.companiesService.createCompany(company).pipe(\n            map(company => addCompanySuccess({ company })),\n            catchError(err => {\n                alert(err.message);\n                return of(failure({ err: { concern: 'CREATE', error: err } }));\n            })\n        ))\n    ));\n\n\n    update$ = createEffect(() => this.actions$.pipe(\n        ofType(updateCompany),\n        switchMap(({ company }) => this.companiesService.updateCompany(company).pipe(\n            map(() => updateCompanySuccess({ company })),\n            catchError(err => {\n                alert(err.message);\n                return of(failure({ err: { concern: 'UPDATE', error: err } }));\n            })\n        ))\n    ));\n\n    delete$ = createEffect(() => this.actions$.pipe(\n        ofType(deleteCompany),\n        pluck('id'),\n        switchMap(id => this.companiesService.removeCompany(id).pipe(\n            pluck('id'),\n            map(id => deleteCompanySuccess({ id })),\n            catchError(err => {\n                alert(err.message);\n                return of(failure({ err: { concern: 'UPDATE', error: err } }));\n            })\n        ))\n    ));\n\n\n    constructor(\n        private actions$: Actions,\n        private companiesService: CompaniesService\n    ) { }\n\n\n}\n","import * as fromreducer from './user.reducer';\nimport { State } from './user.state';\nimport { Action, combineReducers, createFeatureSelector, createSelector } from '@ngrx/store';\n\nexport interface UsersState {\n    users: State;\n}\n\n/** Provide reducers with AoT-compilation compliance */\nexport function reducers(state: UsersState | undefined, action: Action) {\n    return combineReducers({\n        users: fromreducer.userReducer\n    })(state, action)\n}\n\n\n/**\n * The createFeatureSelector function selects a piece of state from the root of the state object.\n * This is used for selecting feature states that are loaded eagerly or lazily.\n */\nexport const getUsersState = createFeatureSelector<UsersState>('users');\n\nexport const getUsersEntitiesState = createSelector(\n    getUsersState,\n    state => state.users\n);\n\nexport const {\n    selectAll: getAllUsers,\n} = fromreducer.usersAdapter.getSelectors(getUsersEntitiesState);\n\nexport const getUserById = (id: number) => createSelector(\n    getUsersEntitiesState,\n    fromreducer.getUserById(id)\n);\nexport const getUserByCredentials = (username: string, password: string) => createSelector(\n    getUsersEntitiesState,\n    fromreducer.getUserByCredentials(username, password)\n);\n\nexport const getUserByUsername = (username: string) => createSelector(\n    getUsersEntitiesState,\n    fromreducer.getUserByUsername(username)\n);","import * as fromreducer from './company.reducer';\nimport { State } from './company.state';\nimport { Action, combineReducers, createFeatureSelector, createSelector } from '@ngrx/store';\n\nexport interface CompaniesState {\n    companies: State;\n}\n\n/** Provide reducers with AoT-compilation compliance */\nexport function reducers(state: CompaniesState | undefined, action: Action) {\n    return combineReducers({\n        companies: fromreducer.companyReducer\n    })(state, action)\n}\n\n\n/**\n * The createFeatureSelector function selects a piece of state from the root of the state object.\n * This is used for selecting feature states that are loaded eagerly or lazily.\n */\nexport const getCompaniesState = createFeatureSelector<CompaniesState>('companies');\n\nexport const getCompaniesEntitiesState = createSelector(\n    getCompaniesState,\n    state => state.companies\n);\n\nexport const {\n    selectAll: getAllCompanies,\n} = fromreducer.companiesAdapter.getSelectors(getCompaniesEntitiesState);\n\nexport const getCompanyById = (id: number) => createSelector(\n    getCompaniesEntitiesState,\n    fromreducer.getCompanyById(id)\n);\n\nexport const getCompanyByCredentials = (username: string, password: string) => createSelector(\n    getCompaniesEntitiesState,\n    fromreducer.getCompanyByCredentials(username, password)\n);\n\nexport const getCompanyByUsername = (username: string) => createSelector(\n    getCompaniesEntitiesState,\n    fromreducer.getCompanyByUsername(username)\n);"]}