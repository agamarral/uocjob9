{"version":3,"sources":["webpack:///src/app/views/company-profile-dialog/company-profile-dialog.component.html","webpack:///src/app/views/company-profile-dialog/company-profile-dialog.component.ts","webpack:///src/app/views/company-profile/company-profile.component.ts","webpack:///src/app/views/company-profile/company-profile.component.html","webpack:///src/app/views/company-profile/company-profile-routing.module.ts","webpack:///src/app/views/company-profile/company-profile.module.ts"],"names":["MyErrorStateMatcher","control","form","invalid","dirty","touched","formBuilder","companiesStoreFacade","dialogRef","data","provinceList","townList","matcher","errors","namelength","pattern","spaces","email","this","company","forEach","value","push","name","updateTownList","address","province","companyProfileDlgForm","group","brand","minLength","maxLength","cif","required","url","street","municipe","contact","surname","phone","username","get","setValue","event","setErrors","close","partial","id","provObj","find","cur","townObj","uid","updateCompany","provinceName","changeTown","hasError","save","dialog","route","company$","params","pipe","map","switchMap","getCompanyById","isReadOnly","theme","subscribe","initialize_company","dialogConfig","disableClose","autoFocus","panelClass","open","afterClosed","console","log","password","psswrequest","offers","openDialog","routes","path","component","CompanyProfileRoutingModule","forChild","CompanyProfileModule","forFeature","environment","production","instrument"],"mappings":"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","file":"x","sourcesContent":["<mat-dialog-content [formGroup]=\"companyProfileDlgForm\">\n\n    <mat-card>\n\n        <mat-card-header>\n            <div mat-card-avatar class=\"company-logo\"></div>\n            <section class=\"mat-typography\">\n                <h3 mat-card-title>Detalles de la empresa</h3>\n            </section>\n        </mat-card-header>\n        <mat-card-content>\n            <div>\n                <mat-form-field class=\"third-width-field\">\n                    <mat-label>Marca comercial</mat-label>\n                    <input matInput type=\"text\" placeholder=\"Marca Comercial\" name=\"brand\" formControlName=\"brand\">\n                    <mat-error *ngIf=\"companyProfileDlgForm.get('brand').hasError('pattern')\">\n                        {{errors.pattern}}\n                    </mat-error>\n                    <mat-error\n                        *ngIf=\"companyProfileDlgForm.get('brand').hasError('minlength') || companyProfileDlgForm.get('brand').hasError('maxlength') \">\n                        {{errors.namelength}}\n                    </mat-error>\n                    <mat-error *ngIf=\"companyProfileDlgForm.get('brand').hasError('invalidName')\">\n                        {{errors.spaces}}\n                    </mat-error>\n                </mat-form-field>\n\n                <mat-form-field class=\"third-width-field\">\n                    <mat-label>Razón Social</mat-label>\n                    <input matInput type=\"text\" placeholder=\"Razón Social\" name=\"company\" formControlName=\"company\">\n                    <mat-error *ngIf=\"companyProfileDlgForm.get('company').hasError('pattern')\">\n                        {{errors.pattern}}\n                    </mat-error>\n                    <mat-error\n                        *ngIf=\"companyProfileDlgForm.get('company').hasError('minlength') || companyProfileDlgForm.get('company').hasError('maxlength') \">\n                        {{errors.namelength}}\n                    </mat-error>\n                    <mat-error *ngIf=\"companyProfileDlgForm.get('company').hasError('invalidName')\">\n                        {{errors.spaces}}\n                    </mat-error>\n                </mat-form-field>\n                <mat-form-field class=\"third-width-field\">\n                    <mat-label>CIF</mat-label>\n                    <input matInput type=\"text\" placeholder=\"CIF\" name=\"cif\" [errorStateMatcher]=\"matcher\"\n                        formControlName=\"cif\">\n                </mat-form-field>\n            </div>\n            <div>\n                <mat-form-field class=\"full-width-field\">\n                    <mat-label>URL</mat-label>\n                    <input matInput type=\"url\" placeholder=\"https://miempresa.com\" name=\"url\" formControlName=\"url\">\n                </mat-form-field>\n            </div>\n            <div>\n                <mat-form-field class=\"full-width-field\">\n                    <mat-label>Dirección</mat-label>\n                    <input matInput type=\"text\" placeholder=\"Dirección\" name=\"address\" formControlName=\"address\">\n                </mat-form-field>\n            </div>\n            <div>\n                <mat-form-field class=\"half-width-field\">\n                    <mat-label>Provincia</mat-label>\n                    <mat-select panelClass=\"formal-theme\" formControlName=\"province\" (selectionChange)=\"changeTown()\">\n                        <mat-option *ngFor=\"let prov of provinceList\" [value]=\"prov\">{{prov}}</mat-option>\n                    </mat-select>\n                </mat-form-field>\n                <mat-form-field>\n                    <mat-label class=\"half-width-field\">Municipio</mat-label>\n                    <mat-select panelClass=\"formal-theme\" formControlName=\"municipe\">\n                        <mat-option *ngFor=\"let town of townList\" [value]=\"town\">{{town}}</mat-option>\n                    </mat-select>\n                </mat-form-field>\n            </div>\n        </mat-card-content>\n    </mat-card>\n    <mat-card>\n        <mat-card-header>\n            <section class=\"mat-typography\">\n                <h3 mat-card-title>Persona de contacto</h3>\n            </section>\n        </mat-card-header>\n        <mat-card-content>\n            <div>\n                <mat-form-field class=\"half-width-field\">\n                    <mat-label>Nombre</mat-label>\n                    <input matInput type=\"text\" placeholder=\"Nombre\" name=\"name\" formControlName=\"name\">\n                    <mat-error *ngIf=\"companyProfileDlgForm.get('name').hasError('pattern')\">\n                        {{errors.pattern}}\n                    </mat-error>\n                    <mat-error\n                        *ngIf=\"companyProfileDlgForm.get('name').hasError('minlength') || companyProfileDlgForm.get('name').hasError('maxlength') \">\n                        {{errors.namelength}}\n                    </mat-error>\n                    <mat-error *ngIf=\"companyProfileDlgForm.get('name').hasError('invalidName')\">\n                        {{errors.spaces}}\n                    </mat-error>\n                </mat-form-field>\n\n                <mat-form-field class=\"half-width-field\">\n                    <mat-label>Apellidos</mat-label>\n                    <input matInput type=\"text\" placeholder=\"Apellidos\" name=\"surname\" formControlName=\"surname\">\n                    <mat-error *ngIf=\"companyProfileDlgForm.get('surname').hasError('pattern')\">\n                        {{errors.pattern}}\n                    </mat-error>\n                    <mat-error\n                        *ngIf=\"companyProfileDlgForm.get('surname').hasError('minlength') || companyProfileDlgForm.get('surname').hasError('maxlength') \">\n                        {{errors.namelength}}\n                    </mat-error>\n                    <mat-error *ngIf=\"companyProfileDlgForm.get('surname').hasError('invalidName')\">\n                        {{errors.spaces}}\n                    </mat-error>\n                </mat-form-field>\n            </div>\n            <div>\n                <mat-form-field class=\"half-width-field\">\n                    <mat-label>Email</mat-label>\n                    <input matInput placeholder=\"Email\" name=\"username\" formControlName=\"username\">\n                    <mat-error *ngIf=\"companyProfileDlgForm.get('username').hasError('email')\">\n                        {{errors.email}}\n                    </mat-error>\n                </mat-form-field>\n\n                <mat-form-field class=\"half-width-field\">\n                    <mat-label>Teléfono de contacto principal</mat-label>\n                    <input matInput ng2TelInput [ng2TelInputOptions]=\"{initialCountry: 'es'}\" formControlName=\"phone\"\n                        (hasError)=\"hasError($event)\" [errorStateMatcher]=\"matcher\" />\n                    <mat-error *ngIf=\"\n                    !companyProfileDlgForm.get('phone').valid &&\n                    companyProfileDlgForm.get('phone').touched\n                    \">This is an <strong>invalid</strong> phone number.\n                    </mat-error>\n                </mat-form-field>\n            </div>\n        </mat-card-content>\n    </mat-card>\n\n</mat-dialog-content>\n<mat-dialog-actions>\n    <button class=\"mat-raised-button\" (click)=\"close()\">Cerrar</button>\n    <button class=\"mat-raised-button mat-primary\" (click)=\"save()\">Guardar</button>\n</mat-dialog-actions>","import { Component, OnInit, Inject, ViewEncapsulation } from '@angular/core';\nimport { FormBuilder, FormGroup, FormControl, FormGroupDirective, NgForm, Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { ErrorStateMatcher } from '@angular/material/core';\nimport * as towndata from '@assets/jsondata/munic.json';\nimport { usernameValidator } from '../validators/username-validator';\nimport { CompaniesStoreFacade } from '@shared/state/company/company.store-facade';\nimport { Company } from '@shared/models/company.model';\n\n\n\nexport class MyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    //const isSubmitted = form && form.submitted;\n    return !!(control && control.invalid && (control.dirty || control.touched));\n  }\n}\n\n@Component({\n  selector: 'app-company-profile-dialog',\n  templateUrl: './company-profile-dialog.component.html',\n  styleUrls: ['./company-profile-dialog.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class CompanyProfileDialogComponent implements OnInit {\n  public companyProfileDlgForm: FormGroup;\n  public selectedProvince: string;\n  public provinceList: string[] = [];\n  public townList: string[] = [];\n  matcher = new MyErrorStateMatcher();\n\n  private company: Company;\n\n  public errors: { [key: string]: string } = {\n    namelength: 'El contenido de este campo debe tener una longitud entre 3 y 55 caracteres',\n    pattern: 'Este campo solo debe contener caracteres alfanuméricos',\n    spaces: 'Este campo no debe contener espacios al principio o al final del texto',\n    email: 'Por favor, introduce una dirección de correo válida'\n  };\n\n  constructor(private formBuilder: FormBuilder, private companiesStoreFacade: CompaniesStoreFacade,\n    private dialogRef: MatDialogRef<CompanyProfileDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) data) {\n\n    this.company = data;\n    towndata['default'].forEach((value) => { this.provinceList.push(value.name) });\n    this.updateTownList(data.address.province.name);\n\n    this.companyProfileDlgForm = this.formBuilder.group({\n      brand: [data.brand, [Validators.minLength(3), Validators.maxLength(255), usernameValidator, Validators.pattern(/[a-zA-Z0-9&_\\.-]/)]],\n      company: [data.company, [Validators.minLength(3), Validators.maxLength(255), usernameValidator, Validators.pattern(/[a-zA-Z0-9&_\\.-]/)]],\n      cif: [data.cif, Validators.required],\n      url: [data.url, Validators.required],\n      address: [data.address.street, Validators.required],\n      province: [data.address.province.name, Validators.required],\n      municipe: [data.address.municipe.name, Validators.required],\n      name: [data.contact.name, [Validators.minLength(3), Validators.maxLength(55), usernameValidator, Validators.pattern(/[a-zA-Z0-9&_\\.-]/)]],\n      surname: [data.contact.surname, [Validators.minLength(3), Validators.maxLength(55), usernameValidator, Validators.pattern(/[a-zA-Z0-9&_\\.-]/)]],\n      phone: [data.contact.phone, Validators.required],\n      username: [data.contact.email, [Validators.required, Validators.email]]\n    });\n    this.companyProfileDlgForm.get('province').setValue(data.address.province.name);\n    this.companyProfileDlgForm.get('municipe').setValue(data.address.municipe.name);\n  }\n\n  ngOnInit(): void {\n  }\n  hasError(event: any): void {\n\n    if (!event && this.companyProfileDlgForm.value.phone !== '') {\n      this.companyProfileDlgForm.get('phone').setErrors(['invalid_cell_phone', true]);\n    }\n  }\n  close() {\n    this.dialogRef.close();\n  }\n  save() {\n\n    let partial: Partial<Company> = {};\n\n    partial.id = this.company.id;\n    partial.brand = this.companyProfileDlgForm.get('brand').value;\n    partial.company = this.companyProfileDlgForm.get('company').value;\n    partial.cif = this.companyProfileDlgForm.get('cif').value;\n    partial.url = this.companyProfileDlgForm.get('url').value;\n\n    let provObj = towndata['default'].find((cur) => cur.name === this.companyProfileDlgForm.get('province').value);\n    let townObj = provObj['towns'].find((cur) => cur.name === this.companyProfileDlgForm.get('municipe').value);\n\n    partial.address = {\n      street: this.companyProfileDlgForm.get('address').value,\n      municipe: townObj,\n      province: { uid: provObj.uid, name: provObj.name }\n    };\n\n    partial.contact = {\n      name: this.companyProfileDlgForm.get('name').value,\n      surname: this.companyProfileDlgForm.get('surname').value,\n      phone: this.companyProfileDlgForm.get('phone').value,\n      email: this.companyProfileDlgForm.get('username').value\n    }\n\n    this.companiesStoreFacade.updateCompany(partial);\n    this.dialogRef.close(this.companyProfileDlgForm.value);\n  }\n  updateTownList(provinceName) {\n    let provObj = towndata['default'].find((cur) => cur.name === provinceName);\n    this.townList = [];\n    provObj['towns'].forEach((value) => { this.townList.push(value.name) });\n  }\n\n  changeTown() {\n    let provinceName = this.companyProfileDlgForm.get('province').value;\n    this.updateTownList(provinceName);\n  }\n}\n\n\n\n","import { Component, OnInit, ViewEncapsulation } from '@angular/core';\nimport { MatDialog, MatDialogConfig } from '@angular/material/dialog';\nimport { CompanyProfileDialogComponent } from '@views/company-profile-dialog/company-profile-dialog.component'\nimport { Company } from '@shared/models/company.model';\nimport { ActivatedRoute } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { CompaniesStoreFacade } from '@shared/state/company/company.store-facade';\nimport { map, switchMap } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-company-profile',\n  templateUrl: './company-profile.component.html',\n  styleUrls: ['./company-profile.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class CompanyProfileComponent implements OnInit {\n\n  company$: Observable<Company> = this.route.params.pipe(\n    map(params => params.id),\n    switchMap(id => this.companiesStoreFacade.getCompanyById(id))\n  );\n  public isReadOnly = false;\n  public company: Company;\n  public theme = \"formal-theme\";\n\n  constructor(private dialog: MatDialog, private companiesStoreFacade: CompaniesStoreFacade, private route: ActivatedRoute) {\n    this.company$.subscribe(\n\n      (value) => {\n\n        if (!value) {\n          this.initialize_company();\n        } else {\n          this.isReadOnly = false;\n          this.company = value;\n          this.isReadOnly = true;\n        }\n\n      }\n    );\n  }\n\n  ngOnInit(): void {\n\n  }\n  openDialog() {\n\n    const dialogConfig = new MatDialogConfig();\n\n    dialogConfig.disableClose = true;\n    dialogConfig.autoFocus = true;\n\n    dialogConfig.data = this.company;\n    dialogConfig.panelClass = this.theme;\n\n    const dialogRef = this.dialog.open(CompanyProfileDialogComponent, dialogConfig);\n    dialogRef.afterClosed().subscribe((data) =>\n      console.log('closing dialog')\n    );\n\n  }\n  initialize_company() {\n    this.company = {\n      id: -1,\n      username: '',\n      password: '',\n      psswrequest: false,\n      brand: '',\n      company: '',\n      cif: '',\n      url: '',\n      address: {\n        street: '',\n        province: {\n          name: '',\n          uid: 0\n        },\n        municipe: {\n          name: '',\n          uid: 0\n        }\n      },\n      contact: {\n        name: '',\n        surname: '',\n        phone: '',\n        email: ''\n      },\n      offers: []\n    }\n  }\n}\n","<form class=\"companyDataForm formal-theme\">\n    <mat-card>\n        <mat-card-header>\n            <section class=\"mat-typography\">\n                <h3 mat-card-title>Datos de la empresa</h3>\n            </section>\n        </mat-card-header>\n        <mat-card-content>\n            <div>\n                <mat-form-field class=\"third-width-field\">\n                    <mat-label>Marca</mat-label>\n                    <input matInput type=\"text\" name=\"brand\" readonly=\"isReadOnly\" [(ngModel)]=\"company.brand\">\n                </mat-form-field>\n\n                <mat-form-field class=\"third-width-field\">\n                    <mat-label>Razón Social</mat-label>\n                    <input matInput type=\"text\" name=\"company\" readonly=\"isReadOnly\" [(ngModel)]=\"company.company\">\n                </mat-form-field>\n\n                <mat-form-field class=\"third-width-field\">\n                    <mat-label>CIF</mat-label>\n                    <input matInput type=\"text\" name=\"cif\" readonly=\"isReadOnly\" [(ngModel)]=\"company.cif\">\n                </mat-form-field>\n            </div>\n            <div>\n                <mat-form-field class=\"full-width-field\">\n                    <mat-label>URL</mat-label>\n                    <input matInput type=\"text\" name=\"url\" readonly=\"isReadOnly\" [(ngModel)]=\"company.url\">\n                </mat-form-field>\n            </div>\n            <div>\n                <mat-form-field class=\"full-width-field\">\n                    <mat-label>Dirección</mat-label>\n                    <input matInput type=\"text\" name=\"address\" readonly=\"isReadOnly\"\n                        [(ngModel)]=\"company.address.street\">\n                </mat-form-field>\n            </div>\n            <div>\n                <mat-form-field class=\"half-width-field\">\n                    <mat-label>Provincia</mat-label>\n                    <input matInput type=\"text\" name=\"province\" readonly=\"isReadOnly\"\n                        [(ngModel)]=\"company.address.province.name\">\n                </mat-form-field>\n                <mat-form-field class=\"half-width-field\">\n                    <mat-label>Municipio</mat-label>\n                    <input matInput type=\"text\" name=\"town\" readonly=\"isReadOnly\"\n                        [(ngModel)]=\"company.address.municipe.name\">\n                </mat-form-field>\n            </div>\n        </mat-card-content>\n    </mat-card>\n    <mat-card>\n        <mat-card-header>\n            <section class=\"mat-typography\">\n                <h3 mat-card-title>Persona de contacto</h3>\n            </section>\n        </mat-card-header>\n        <mat-card-content>\n            <div>\n                <mat-form-field class=\"half-width-field\">\n                    <mat-label>Nombre</mat-label>\n                    <input matInput type=\"text\" name=\"name\" readonly=\"isReadOnly\" [(ngModel)]=\"company.contact.name\">\n\n                </mat-form-field>\n\n                <mat-form-field class=\"half-width-field\">\n                    <mat-label>Apellidos</mat-label>\n                    <input matInput type=\"text\" name=\"surname\" readonly=\"isReadOnly\"\n                        [(ngModel)]=\"company.contact.surname\">\n                </mat-form-field>\n            </div>\n\n            <div>\n                <mat-form-field class=\"half-width-field\">\n                    <mat-label>Correo electrónico de contacto</mat-label>\n                    <input matInput type=\"mail\" name=\"email\" readonly=\"isReadOnly\" [(ngModel)]=\"company.contact.email\">\n                </mat-form-field>\n\n                <mat-form-field class=\"half-width-field\">\n                    <mat-label>Teléfono de contacto principal</mat-label>\n                    <input matInput type=\"text\" name=\"phone\" readonly=\"isReadOnly\" [(ngModel)]=\"company.contact.phone\">\n                </mat-form-field>\n            </div>\n        </mat-card-content>\n    </mat-card>\n    <button class=\"mat-raised-button mat-primary\" (click)=\"openDialog()\">Editar</button>\n\n</form>","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { CompanyProfileComponent } from './company-profile.component';\n\n\nconst routes: Routes = [\n  {\n    path: \"\", component: CompanyProfileComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class CompanyProfileRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { SharedModule } from '@shared/shared.module';\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\nimport { CompanyProfileRoutingModule } from './company-profile-routing.module';\nimport { CompanyProfileComponent } from './company-profile.component';\nimport { CompanyProfileDialogComponent } from '@views/company-profile-dialog/company-profile-dialog.component';\nimport * as fromCompanies from '@shared/state/company';\nimport { CompaniesEffects } from '@shared/state/company/company.effects';\nimport { environment } from '@environments/environment';\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools';\nimport { CompaniesStoreFacade } from '@shared/state/company/company.store-facade';\nimport { CompaniesService } from '@shared/services/companies.service';\n\n@NgModule({\n  declarations: [CompanyProfileComponent, CompanyProfileDialogComponent],\n  imports: [\n    CommonModule,\n    CompanyProfileRoutingModule,\n    ReactiveFormsModule,\n    FormsModule,\n    SharedModule,\n    StoreModule.forFeature('companies', fromCompanies.reducers),\n    EffectsModule.forFeature([CompaniesEffects]),\n    !environment.production ? StoreDevtoolsModule.instrument() : []\n  ],\n  providers: [\n    CompaniesStoreFacade,\n    CompaniesService\n  ],\n  entryComponents: [\n    CompanyProfileDialogComponent\n  ]\n})\nexport class CompanyProfileModule { }\n"]}