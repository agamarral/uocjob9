{"version":3,"sources":["webpack:///src/app/shared/app.settings.ts","webpack:///src/app/views/signin/signin.component.ts","webpack:///src/app/views/signin/signin.component.html","webpack:///src/app/views/signin/signin-routing.module.ts","webpack:///src/app/views/signin/signin.module.ts"],"names":["AppSettings","user","size","avatar_hash","this","IMAGES","UNKNOWN_FACE","hash","extension","split","STATIC_AVATAR_ENDPOINT","uid","APP_NAME","APP_LOCALSTORAGE_TOKEN","APP_VERSION","API_ENDPOINT","STATIC_ENDPOINT","API_ENDPOINT_APP","API_ENDPOINT_USER","API_ENDPOINT_OFFERS","API_ENDPOINT_COMPANIES","API_ENDPOINT_USER_ME","API_ENDPOINT_USER_CREATE","API_ENDPOINT_CONFIRM_USER","API_ENDPOINT_USER_REMEMBER_PASSWORD","API_ENDPOINT_USER_REQUEST_REMEMBER_PASSWORD","API_ENDPOINT_USER_REQUEST_USER_AVATAR","API_ENDPOINT_USER_UPLOAD_AVATAR","API_ENDPOINT_USER_SENDMAIL","API_ENDPOINT_AUTH","API_ENDPOINT_AUTH_LOCAL","APP_QUILL_EDITOR_CONFIGURATION","toolbar","list","direction","APP_DEFAULT_MOMENT_LOCALE","GUESS_ROL","value","text","STUDENT_ROL","ADMINISTRATOR_ROL","COMPANY_ROL","ROLES","USER_STATUS_PENDING","USER_STATUS_ACTIVE","USER_STATUS_INACTIVE","USER_STATUS","FORMAT_DATE","UNKNOWN_IMAGE","UNKNOWN_TEAM","NOTIFICATIONS","DEFAULT_TIME","fb","usersStoreFacade","companiesStoreFacade","router","isUsernameValid","isPasswordValid","createForm","signinForm","get","statusChanges","subscribe","val","onNameValidation","onPasswordValidation","group","username","required","email","password","console","log","combineLatest","getUserByCredentials","getCompanyByCredentials","student","company","hasOwnProperty","navigate","id","validity","loginUser","recallPassword","routes","path","component","SigninRoutingModule","forChild","SigninModule","forFeature"],"mappings":"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","file":"x","sourcesContent":["/* import * as moment from 'moment'; */\nexport class AppSettings {\n  public static readonly APP_NAME = 'PoliJob';\n  public static readonly APP_LOCALSTORAGE_TOKEN = 'PoliJob_Token';\n  public static readonly APP_VERSION = '0.1.0';\n  public static readonly API_ENDPOINT = 'api/';\n  public static readonly STATIC_ENDPOINT = AppSettings.API_ENDPOINT + 'static/';\n  public static readonly STATIC_AVATAR_ENDPOINT =\n    AppSettings.STATIC_ENDPOINT + 'images/avatar/';\n  public static readonly API_ENDPOINT_APP = AppSettings.API_ENDPOINT + 'app/';\n  public static readonly API_ENDPOINT_USER = AppSettings.API_ENDPOINT + 'users';\n  public static readonly API_ENDPOINT_OFFERS = AppSettings.API_ENDPOINT + 'jobOffers';\n  public static readonly API_ENDPOINT_COMPANIES = AppSettings.API_ENDPOINT + 'companies';\n  public static readonly API_ENDPOINT_USER_ME =\n    AppSettings.API_ENDPOINT + 'user-me';\n  public static readonly API_ENDPOINT_USER_CREATE =\n    AppSettings.API_ENDPOINT_USER + '/create';\n  public static readonly API_ENDPOINT_CONFIRM_USER =\n    AppSettings.API_ENDPOINT_USER + '/confirm-user';\n  public static readonly API_ENDPOINT_USER_REMEMBER_PASSWORD =\n    AppSettings.API_ENDPOINT_USER + '/remember-password';\n  public static readonly API_ENDPOINT_USER_REQUEST_REMEMBER_PASSWORD =\n    AppSettings.API_ENDPOINT_USER + '/request-remember-password';\n  public static readonly API_ENDPOINT_USER_REQUEST_USER_AVATAR =\n    AppSettings.API_ENDPOINT_USER + '/request-avatar-user';\n\n  public static readonly API_ENDPOINT_USER_UPLOAD_AVATAR =\n    AppSettings.API_ENDPOINT_USER + '/upload-avatar';\n  public static readonly API_ENDPOINT_USER_SENDMAIL =\n    AppSettings.API_ENDPOINT_USER + '/sendmail';\n  public static readonly API_ENDPOINT_AUTH = AppSettings.API_ENDPOINT + 'auth/';\n  public static readonly API_ENDPOINT_AUTH_LOCAL =\n    AppSettings.API_ENDPOINT + 'auth/local/';\n\n  public static readonly APP_QUILL_EDITOR_CONFIGURATION = {\n    toolbar: [\n      ['bold', 'italic', 'underline'],\n      [{ list: 'ordered' }, { list: 'bullet' }],\n      [{ direction: 'rtl' }],\n      ['clean'],\n      ['link']\n    ]\n  };\n\n  public static readonly APP_DEFAULT_MOMENT_LOCALE = 'es';\n  public static readonly GUESS_ROL = {\n    value: 'guess',\n    text: 'settings.rol.GUESS'\n  };\n  public static readonly STUDENT_ROL = {\n    value: 'student',\n    text: 'settings.rol.STUDENT'\n  };\n  public static readonly ADMINISTRATOR_ROL = {\n    value: 'admin',\n    text: 'settings.rol.ADMINISTRATOR'\n  };\n  public static readonly COMPANY_ROL = {\n    value: 'company',\n    text: 'settings.rol.COMPANY'\n  };\n  public static readonly ROLES = [\n    AppSettings.GUESS_ROL,\n    AppSettings.STUDENT_ROL,\n    AppSettings.COMPANY_ROL,\n    AppSettings.ADMINISTRATOR_ROL\n  ];\n\n  public static readonly USER_STATUS_PENDING = {\n    value: 'pending',\n    text: 'settings.status.PENDING'\n  };\n  public static readonly USER_STATUS_ACTIVE = {\n    value: 'active',\n    text: 'settings.status.ACTIVE'\n  };\n  public static readonly USER_STATUS_INACTIVE = {\n    value: 'inactive',\n    text: 'settings.status.INACTIVE'\n  };\n  public static readonly USER_STATUS = [\n    AppSettings.USER_STATUS_PENDING,\n    AppSettings.USER_STATUS_ACTIVE,\n    AppSettings.USER_STATUS_INACTIVE\n  ];\n  public static readonly FORMAT_DATE = 'MM/DD/YYYY';\n\n  public static readonly IMAGES = {\n    UNKNOWN_IMAGE: 'assets/images/image-not-found.png',\n    UNKNOWN_FACE: 'assets/images/face-unknown.png',\n    UNKNOWN_TEAM: 'assets/images/image-not-found.png'\n  };\n\n  public static readonly NOTIFICATIONS = {\n    DEFAULT_TIME: 2000\n  };\n\n  public static getAvatar(\n    user: { uid: string; avatar_hash: string },\n    size: string = 'sm'\n  ): string {\n    if (!user || !user.avatar_hash) {\n      return this.IMAGES.UNKNOWN_FACE;\n    }\n    const [hash, extension] = user.avatar_hash.split('.');\n    return `${this.STATIC_AVATAR_ENDPOINT}${\n      user.uid\n      }/${hash}${size}.${extension}`;\n  }\n  /*   public static getDateFormatted(date: moment.Moment | string) {\n      let dateFormatted = date;\n      if (typeof date === 'string') {\n        dateFormatted = moment(date, 'X');\n      }\n      return (dateFormatted as moment.Moment).format(this.FORMAT_DATE);\n    } */\n}\n","import { Component, OnInit, ChangeDetectionStrategy, ViewEncapsulation } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { UsersStoreFacade } from '@shared/state/user/user.store-facade';\nimport { CompaniesStoreFacade } from '@shared/state/company/company.store-facade';\nimport { combineLatest } from 'rxjs';\n\n@Component({\n  selector: 'app-signin',\n  templateUrl: './signin.component.html',\n  styleUrls: ['./signin.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None\n})\n\nexport class SigninComponent implements OnInit {\n  public signinForm: FormGroup;\n  public isUsernameValid: boolean = true;\n  public isPasswordValid: boolean = true;\n\n\n\n  constructor(private fb: FormBuilder, private usersStoreFacade: UsersStoreFacade, private companiesStoreFacade: CompaniesStoreFacade, private router: Router) {\n    this.createForm();\n  }\n  ngOnInit() {\n\n    this.signinForm.get('username').statusChanges.subscribe(val => this.onNameValidation(val));\n    this.signinForm.get('password').statusChanges.subscribe(val => this.onPasswordValidation(val));\n  }\n  createForm() {\n    this.signinForm = this.fb.group({\n      username: [null, [Validators.required, Validators.email]],\n      password: [null, [Validators.required]]\n    });\n  }\n  loginUser() {\n    const username = this.signinForm.get('username').value;\n    const password = this.signinForm.get('password').value;\n    console.log(\"signin requested for user \" + username + \" with password \" + password);\n\n    combineLatest(this.usersStoreFacade.getUserByCredentials(username, password),\n      this.companiesStoreFacade.getCompanyByCredentials(username, password)).subscribe(\n        ([student, company]) => {\n\n          if (student && student.hasOwnProperty('username')) {\n            // the observable fron user has returned a valid object, then login\n            // as a student\n            this.router.navigate(['admin', 'student', 'dashboard', student.id]);\n\n          } else if (company && company.hasOwnProperty('username')) {\n            // the observable fron company has returned a valid object, then login\n            // as a company\n            this.router.navigate(['admin', 'company', 'dashboard', company.id]);\n          } else {\n            this.router.navigate(['signup']);\n            console.log('Login for user ' + username + ' has failed, unknown username or password');\n          }\n        }\n      );\n  }\n  recallPassword() {\n    this.router.navigate(['forgot-password']);\n  }\n  onNameValidation(validity: string) {\n    this.isUsernameValid = (validity !== 'INVALID');\n  }\n  onPasswordValidation(validity: string) {\n    this.isPasswordValid = (validity !== 'INVALID');\n  }\n\n}\n","<mat-card class=\"tp-card\">\n  <mat-card-header>\n    <img mat-card-image src=\"../../../assets/img/monsters-sa.png\">\n  </mat-card-header>\n  <mat-card-content>\n\n    <mat-card-subtitle>Por favor, teclea tu usuario y password para conectarte</mat-card-subtitle>\n\n\n    <form [formGroup]=\"signinForm\">\n\n      <div>\n        <mat-form-field>\n          <mat-label>Email</mat-label>\n          <input matInput type=\"mail\" placeholder=\"Email\" name=\"username\" formControlName=\"username\">\n        </mat-form-field>\n      </div>\n      <div>\n\n        <mat-form-field>\n          <mat-label>Password</mat-label>\n          <input matInput type=\"password\" placeholder=\"Password\" name=\"password\" formControlName=\"password\">\n        </mat-form-field>\n      </div>\n    </form>\n  </mat-card-content>\n\n</mat-card>\n<mat-card-actions>\n  <button mat-button color=\"primary\" type=\"submit\" [disabled]=\"!signinForm.valid\" (click)=\"loginUser()\">Log\n    in</button>\n  <button mat-button color=\"primary\" type=\"submit\" (click)=\"recallPassword()\">He olvidado mi password</button>\n</mat-card-actions>","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { SigninComponent } from '@views/signin/signin.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: SigninComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class SigninRoutingModule { }\n\nconsole.log(\"contructor signin\");","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { SigninRoutingModule } from './signin-routing.module';\nimport { SigninComponent } from './signin.component';\nimport { SharedModule } from '@shared/shared.module';\nimport { UsersEffects } from '@shared/state/user/user.effects';\nimport { CompaniesEffects } from '@shared/state/company/company.effects';\nimport { UsersStoreFacade } from '@shared/state/user/user.store-facade';\nimport { CompaniesStoreFacade } from '@shared/state/company/company.store-facade';\nimport { StudentsService } from '@shared/services/students.service';\nimport { CompaniesService } from '@shared/services/companies.service';\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\nimport * as fromCompanies from '@shared/state/company';\nimport * as fromUsers from '@shared/state/user';\n\n\n@NgModule({\n  declarations: [SigninComponent],\n  imports: [\n    CommonModule,\n    SigninRoutingModule,\n    ReactiveFormsModule,\n    SharedModule,\n    StoreModule.forFeature('users', fromUsers.reducers),\n    StoreModule.forFeature('companies', fromCompanies.reducers),\n    EffectsModule.forFeature([UsersEffects, CompaniesEffects]),\n  ],\n  providers: [\n    UsersStoreFacade,\n    StudentsService,\n    CompaniesStoreFacade,\n    CompaniesService\n  ]\n})\nexport class SigninModule { }\n"]}