{"version":3,"sources":["webpack:///src/app/shared/app.settings.ts","webpack:///src/app/views/forgot-password/forgot-password.component.html","webpack:///src/app/views/forgot-password/forgot-password.component.ts","webpack:///src/app/views/forgot-password/forgot-password-routing.module.ts","webpack:///src/app/views/forgot-password/forgot-password.module.ts"],"names":["AppSettings","user","size","avatar_hash","this","IMAGES","UNKNOWN_FACE","split","hash","extension","STATIC_AVATAR_ENDPOINT","uid","APP_NAME","APP_LOCALSTORAGE_TOKEN","APP_VERSION","API_ENDPOINT","STATIC_ENDPOINT","API_ENDPOINT_APP","API_ENDPOINT_USER","API_ENDPOINT_OFFERS","API_ENDPOINT_COMPANIES","API_ENDPOINT_USER_ME","API_ENDPOINT_USER_CREATE","API_ENDPOINT_CONFIRM_USER","API_ENDPOINT_USER_REMEMBER_PASSWORD","API_ENDPOINT_USER_REQUEST_REMEMBER_PASSWORD","API_ENDPOINT_USER_REQUEST_USER_AVATAR","API_ENDPOINT_USER_UPLOAD_AVATAR","API_ENDPOINT_USER_SENDMAIL","API_ENDPOINT_AUTH","API_ENDPOINT_AUTH_LOCAL","APP_QUILL_EDITOR_CONFIGURATION","toolbar","list","direction","APP_DEFAULT_MOMENT_LOCALE","GUESS_ROL","value","text","STUDENT_ROL","ADMINISTRATOR_ROL","COMPANY_ROL","ROLES","USER_STATUS_PENDING","USER_STATUS_ACTIVE","USER_STATUS_INACTIVE","USER_STATUS","FORMAT_DATE","UNKNOWN_IMAGE","UNKNOWN_TEAM","NOTIFICATIONS","DEFAULT_TIME","fb","usersStoreFacade","companiesStoreFacade","router","isUsernameValid","isConfirmationValid","showConfirm","confirmationMatch","createForm","recallPsswdForm","group","username","required","email","confirmation","disabled","get","statusChanges","subscribe","val","onNameValidation","checkConfirmation","validity","enable","console","log","combineLatest","getUserByUsername","getCompanyByUsername","company","student","hasOwnProperty","newUser","Object","assign","psswrequest","updateUser","navigate","newCompany","updateCompany","recallPassword","goToSignup","routes","path","component","ForgotPasswordRoutingModule","forChild","ForgotPasswordModule","forFeature"],"mappings":"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","file":"x","sourcesContent":["/* import * as moment from 'moment'; */\nexport class AppSettings {\n  public static readonly APP_NAME = 'PoliJob';\n  public static readonly APP_LOCALSTORAGE_TOKEN = 'PoliJob_Token';\n  public static readonly APP_VERSION = '0.1.0';\n  public static readonly API_ENDPOINT = 'api/';\n  public static readonly STATIC_ENDPOINT = AppSettings.API_ENDPOINT + 'static/';\n  public static readonly STATIC_AVATAR_ENDPOINT =\n    AppSettings.STATIC_ENDPOINT + 'images/avatar/';\n  public static readonly API_ENDPOINT_APP = AppSettings.API_ENDPOINT + 'app/';\n  public static readonly API_ENDPOINT_USER = AppSettings.API_ENDPOINT + 'users';\n  public static readonly API_ENDPOINT_OFFERS = AppSettings.API_ENDPOINT + 'jobOffers';\n  public static readonly API_ENDPOINT_COMPANIES = AppSettings.API_ENDPOINT + 'companies';\n  public static readonly API_ENDPOINT_USER_ME =\n    AppSettings.API_ENDPOINT + 'user-me';\n  public static readonly API_ENDPOINT_USER_CREATE =\n    AppSettings.API_ENDPOINT_USER + '/create';\n  public static readonly API_ENDPOINT_CONFIRM_USER =\n    AppSettings.API_ENDPOINT_USER + '/confirm-user';\n  public static readonly API_ENDPOINT_USER_REMEMBER_PASSWORD =\n    AppSettings.API_ENDPOINT_USER + '/remember-password';\n  public static readonly API_ENDPOINT_USER_REQUEST_REMEMBER_PASSWORD =\n    AppSettings.API_ENDPOINT_USER + '/request-remember-password';\n  public static readonly API_ENDPOINT_USER_REQUEST_USER_AVATAR =\n    AppSettings.API_ENDPOINT_USER + '/request-avatar-user';\n\n  public static readonly API_ENDPOINT_USER_UPLOAD_AVATAR =\n    AppSettings.API_ENDPOINT_USER + '/upload-avatar';\n  public static readonly API_ENDPOINT_USER_SENDMAIL =\n    AppSettings.API_ENDPOINT_USER + '/sendmail';\n  public static readonly API_ENDPOINT_AUTH = AppSettings.API_ENDPOINT + 'auth/';\n  public static readonly API_ENDPOINT_AUTH_LOCAL =\n    AppSettings.API_ENDPOINT + 'auth/local/';\n\n  public static readonly APP_QUILL_EDITOR_CONFIGURATION = {\n    toolbar: [\n      ['bold', 'italic', 'underline'],\n      [{ list: 'ordered' }, { list: 'bullet' }],\n      [{ direction: 'rtl' }],\n      ['clean'],\n      ['link']\n    ]\n  };\n\n  public static readonly APP_DEFAULT_MOMENT_LOCALE = 'es';\n  public static readonly GUESS_ROL = {\n    value: 'guess',\n    text: 'settings.rol.GUESS'\n  };\n  public static readonly STUDENT_ROL = {\n    value: 'student',\n    text: 'settings.rol.STUDENT'\n  };\n  public static readonly ADMINISTRATOR_ROL = {\n    value: 'admin',\n    text: 'settings.rol.ADMINISTRATOR'\n  };\n  public static readonly COMPANY_ROL = {\n    value: 'company',\n    text: 'settings.rol.COMPANY'\n  };\n  public static readonly ROLES = [\n    AppSettings.GUESS_ROL,\n    AppSettings.STUDENT_ROL,\n    AppSettings.COMPANY_ROL,\n    AppSettings.ADMINISTRATOR_ROL\n  ];\n\n  public static readonly USER_STATUS_PENDING = {\n    value: 'pending',\n    text: 'settings.status.PENDING'\n  };\n  public static readonly USER_STATUS_ACTIVE = {\n    value: 'active',\n    text: 'settings.status.ACTIVE'\n  };\n  public static readonly USER_STATUS_INACTIVE = {\n    value: 'inactive',\n    text: 'settings.status.INACTIVE'\n  };\n  public static readonly USER_STATUS = [\n    AppSettings.USER_STATUS_PENDING,\n    AppSettings.USER_STATUS_ACTIVE,\n    AppSettings.USER_STATUS_INACTIVE\n  ];\n  public static readonly FORMAT_DATE = 'MM/DD/YYYY';\n\n  public static readonly IMAGES = {\n    UNKNOWN_IMAGE: 'assets/images/image-not-found.png',\n    UNKNOWN_FACE: 'assets/images/face-unknown.png',\n    UNKNOWN_TEAM: 'assets/images/image-not-found.png'\n  };\n\n  public static readonly NOTIFICATIONS = {\n    DEFAULT_TIME: 2000\n  };\n\n  public static getAvatar(\n    user: { uid: string; avatar_hash: string },\n    size: string = 'sm'\n  ): string {\n    if (!user || !user.avatar_hash) {\n      return this.IMAGES.UNKNOWN_FACE;\n    }\n    const [hash, extension] = user.avatar_hash.split('.');\n    return `${this.STATIC_AVATAR_ENDPOINT}${\n      user.uid\n      }/${hash}${size}.${extension}`;\n  }\n  /*   public static getDateFormatted(date: moment.Moment | string) {\n      let dateFormatted = date;\n      if (typeof date === 'string') {\n        dateFormatted = moment(date, 'X');\n      }\n      return (dateFormatted as moment.Moment).format(this.FORMAT_DATE);\n    } */\n}\n","<mat-card class=\"tp-card\">\n  <mat-card-content>\n    <mat-card-title>Has olvidado tu contrase√±a?</mat-card-title>\n    <mat-card-subtitle>Por favor, teclea tu nombre de usuario</mat-card-subtitle>\n\n\n    <form [formGroup]=\"recallPsswdForm\">\n\n      <div>\n        <mat-form-field>\n          <mat-label>Email</mat-label>\n          <input matInput type=\"mail\" placeholder=\"Email\" name=\"username\" formControlName=\"username\">\n        </mat-form-field>\n      </div>\n      <div>\n        <mat-form-field>\n          <mat-label>Confirmaci√≥n Email</mat-label>\n          <input matInput type=\"mail\" placeholder=\"Confirmaci√≥n email\" name=\"confirmation\"\n            formControlName=\"confirmation\">\n          <mat-error *ngIf=\"confirmationMatch\">\n            Ambas direcciones de correo no coinciden\n          </mat-error>\n        </mat-form-field>\n      </div>\n    </form>\n  </mat-card-content>\n\n</mat-card>\n<mat-card-actions>\n  <button mat-button color=\"primary\" type=\"submit\" [disabled]=\"!recallPsswdForm.valid\"\n    (click)=\"recallPassword()\">Recuperar password</button>\n  <button mat-button color=\"primary\" (click)=\"goToSignup()\">Registrarse</button>\n</mat-card-actions>","import { Component, OnInit, ViewEncapsulation } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { UsersStoreFacade } from '@shared/state/user/user.store-facade';\nimport { CompaniesStoreFacade } from '@shared/state/company/company.store-facade';\nimport { combineLatest } from 'rxjs';\nimport { User } from '@shared/models/user.model'\nimport { Company } from '@shared/models/company.model'\n\n\n\n@Component({\n  selector: 'app-forgot-password',\n  templateUrl: './forgot-password.component.html',\n  styleUrls: ['./forgot-password.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class ForgotPasswordComponent implements OnInit {\n  public recallPsswdForm: FormGroup;\n  public isUsernameValid: boolean = true;\n  public isConfirmationValid: boolean = true;\n  public showConfirm: boolean = false;\n  public confirmationMatch: boolean = true;\n\n  constructor(private fb: FormBuilder, private usersStoreFacade: UsersStoreFacade,\n    private companiesStoreFacade: CompaniesStoreFacade, private router: Router) {\n\n    this.createForm();\n  }\n  createForm() {\n    this.recallPsswdForm = this.fb.group({\n      username: [null, [Validators.required, Validators.email]],\n      confirmation: [{ value: null, disabled: true }, [Validators.required, Validators.email]],\n    });\n  }\n  ngOnInit() {\n    this.recallPsswdForm.get('username').statusChanges.subscribe(val => this.onNameValidation(val));\n    this.recallPsswdForm.get('confirmation').statusChanges.subscribe(val => this.checkConfirmation(val));\n  }\n  onNameValidation(validity: string) {\n    this.isUsernameValid = (validity !== 'INVALID');\n    if (this.isUsernameValid) {\n      this.recallPsswdForm.get('confirmation').enable();\n    }\n  }\n  checkConfirmation(validity: string) {\n    this.isConfirmationValid = (validity !== 'INVALID');\n    if (this.isConfirmationValid) {\n      let username = this.recallPsswdForm.get('username').value;\n      let confirmation = this.recallPsswdForm.get('confirmation').value;\n\n      this.confirmationMatch = (username == confirmation);\n    }\n  }\n  recallPassword() {\n    let username = this.recallPsswdForm.get('username').value;\n    console.log(\"recall password requested for user \" + username);\n\n    combineLatest(this.usersStoreFacade.getUserByUsername(username),\n      this.companiesStoreFacade.getCompanyByUsername(username)).subscribe(\n        ([student, company]) => {\n\n          if (student && student.hasOwnProperty('username')) {\n\n            let newUser: Partial<User> = {};\n\n            Object.assign(newUser, student);\n            newUser.psswrequest = true;\n\n            this.usersStoreFacade.updateUser(newUser);\n            this.router.navigate(['signin']);\n\n          } else if (company && company.hasOwnProperty('username')) {\n            // the observable fron user has returned a valid object, then login\n            // as a student\n            let newCompany: Partial<Company> = {};\n\n            Object.assign(newCompany, company);\n            newCompany.psswrequest = true;\n\n            this.companiesStoreFacade.updateCompany(newCompany);\n            this.router.navigate(['signin']);\n\n          } else {\n            this.router.navigate(['signup']);\n            console.log('Login for user ' + username + ' has failed, unknown username or password');\n          }\n        }\n      );\n  }\n  goToSignup() {\n    this.router.navigate(['signup']);\n  }\n\n}\n\n\n\n\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { ForgotPasswordComponent } from '@views/forgot-password/forgot-password.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ForgotPasswordComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class ForgotPasswordRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ForgotPasswordRoutingModule } from './forgot-password-routing.module';\nimport { ForgotPasswordComponent } from './forgot-password.component';\nimport { SharedModule } from '@shared/shared.module';\nimport { UsersEffects } from '@shared/state/user/user.effects';\nimport { CompaniesEffects } from '@shared/state/company/company.effects';\nimport { UsersStoreFacade } from '@shared/state/user/user.store-facade';\nimport { CompaniesStoreFacade } from '@shared/state/company/company.store-facade';\nimport { StudentsService } from '@shared/services/students.service';\nimport { CompaniesService } from '@shared/services/companies.service';\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\nimport * as fromCompanies from '@shared/state/company';\nimport * as fromUsers from '@shared/state/user';\n\n@NgModule({\n  declarations: [ForgotPasswordComponent],\n  imports: [\n    CommonModule,\n    ForgotPasswordRoutingModule,\n    CommonModule,\n    ReactiveFormsModule,\n    SharedModule,\n    StoreModule.forFeature('users', fromUsers.reducers),\n    StoreModule.forFeature('companies', fromCompanies.reducers),\n    EffectsModule.forFeature([UsersEffects, CompaniesEffects]),\n  ],\n  providers: [\n    UsersStoreFacade,\n    StudentsService,\n    CompaniesStoreFacade,\n    CompaniesService\n  ]\n})\nexport class ForgotPasswordModule { }\n"]}