{"version":3,"sources":["webpack:///src/app/shared/state/company/company.store-facade.ts","webpack:///src/app/shared/state/offers/offers.store-facade.ts","webpack:///src/app/shared/state/offers/offers.effects.ts","webpack:///src/app/shared/services/offers.service.ts","webpack:///src/app/views/validators/username-validator.ts","webpack:///src/app/shared/state/offers/offers.reducer.ts","webpack:///src/app/shared/state/offers/index.ts","webpack:///src/app/shared/state/offers/offers.actions.ts","webpack:///src/app/shared/state/user/user.effects.ts","webpack:///src/app/shared/state/user/user.store-facade.ts","webpack:///src/app/shared/services/companies.service.ts","webpack:///src/app/shared/services/students.service.ts","webpack:///src/app/shared/state/company/company.effects.ts","webpack:///src/app/shared/state/user/index.ts","webpack:///src/app/shared/state/company/index.ts"],"names":["CompaniesStoreFacade","store","companies$","this","pipe","console","log","company","dispatch","a","id","username","password","OffersStoreFacade","offers$","offer","OffersEffects","actions$","offersService","loadAll$","c","getOffers","offers","create$","createOffer","err","alert","message","concern","error","update$","updateOffer","delete$","removeOffer","d","OffersService","http","get","API_ENDPOINT_OFFERS","post","put","offerId","delete","usernameValidator","control","value","startsWith","endsWith","invalidName","valid","offersAdapter","selectId","sortComparer","offersReducer","ids","entities","0","state","setAll","addOne","updateOne","changes","removeOne","reducers","action","getOffersState","getOffersEntitiesState","selectAll","getAllOffers","getSelectors","OfferActionTypes","LOAD_ALL_OFFERS","LOAD_ALL_OFFER_SUCCESS","CREATE_OFFER","CREATE_OFFER_SUCCESS","OFFER_FAILED","UPDATE_OFFER","UPDATE_OFFER_SUCCESS","DELETE_OFFER","DELETE_OFFER_SUCCESS","loadAllOffers","loadAllOffersSuccess","createOfferSuccess","updateOfferSuccess","deleteOfferSuccess","deleteOffer","failure","UsersEffects","studentsService","getStudents","users","user","createStudent","updateStudent","removeStudent","UsersStoreFacade","users$","CompaniesService","API_ENDPOINT_COMPANIES","StudentsService","API_ENDPOINT_USER","student","CompaniesEffects","companiesService","getCompanies","companies","createCompany","updateCompany","removeCompany","getUsersState","getUsersEntitiesState","getAllUsers","getUserById","getUserByCredentials","getUserByUsername","getCompaniesState","getCompaniesEntitiesState","getAllCompanies","getCompanyById","getCompanyByCredentials","getCompanyByUsername"],"mappings":"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","file":"x","sourcesContent":["import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Company } from '@shared/models/company.model';\nimport * as fromselector from '@shared/state/company';\nimport { State } from '@shared/state/company/company.state';\nimport { addCompany, deleteCompany, updateCompany } from '@shared/state/company/company.actions';\n\n@Injectable()\nexport class CompaniesStoreFacade {\n\n    companies$ = this.store.pipe(\n        select(fromselector.getAllCompanies)\n    );\n\n    constructor(private store: Store<State>) {\n        console.log(\"My store companies\");\n        console.log(store);\n    }\n\n    addCompany(company: Company) {\n        this.store.dispatch(addCompany({ company }));\n    }\n\n    updateCompany(company: Partial<Company>) {\n        this.store.dispatch(updateCompany({ company }));\n    }\n\n    deleteCompany(id: number) {\n        this.store.dispatch(deleteCompany({ id }));\n    }\n\n    getCompanyById(id: number) {\n        console.log(\"getCompanyById \" + id);\n        return this.store.pipe(\n            select(fromselector.getCompanyById(id))\n        );\n    }\n    getCompanyByCredentials(username: string, password: string) {\n        console.log(\"getCompanyByCredentials \" + username);\n        return this.store.pipe(\n            select(fromselector.getCompanyByCredentials(username, password))\n        );\n    }\n    getCompanyByUsername(username: string) {\n        console.log(\"getCompanyByUsername \" + username);\n        return this.store.pipe(\n            select(fromselector.getCompanyByUsername(username))\n        );\n    }\n}","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Offer } from '@shared/models/offer.model';\nimport * as fromselector from '@shared/state/offers';\nimport { State } from '@shared/state/offers/offers.state';\nimport { createOffer, deleteOffer, updateOffer } from '@shared/state/offers/offers.actions';\n\n@Injectable()\nexport class OffersStoreFacade {\n\n    offers$ = this.store.pipe(\n        select(fromselector.getAllOffers)\n    );\n\n    constructor(private store: Store<State>) {\n        console.log(\"My store offers\");\n        console.log(store);\n    }\n\n    addOffer(offer: Offer) {\n        this.store.dispatch(createOffer({ offer }));\n    }\n\n    updateOffer(offer: Partial<Offer>) {\n        this.store.dispatch(updateOffer({ offer }));\n    }\n\n    deleteOffer(id: number) {\n        this.store.dispatch(deleteOffer({ id }));\n    }\n\n    getOfferById(id: number) {\n        console.log(\"getOfferById\");\n        return this.store.pipe(\n            select(fromselector.getOfferById(id))\n        );\n    }\n}","import { Injectable } from '@angular/core';\nimport { of } from 'rxjs';\nimport {\n    catchError,\n    exhaustMap,\n    map, pluck,\n    startWith,\n    switchMap\n} from 'rxjs/operators';\nimport { Actions, createEffect, Effect, ofType } from '@ngrx/effects';\nimport { OffersService } from '@shared/services/offers.service';\nimport {\n    loadAllOffers,\n    loadAllOffersSuccess,\n    createOffer,\n    createOfferSuccess,\n    failure,\n    deleteOffer,\n    deleteOfferSuccess,\n    updateOffer,\n    updateOfferSuccess\n} from '@shared/state/offers/offers.actions';\n\n@Injectable()\nexport class OffersEffects {\n\n    loadAll$ = createEffect(() => this.actions$.pipe(\n        ofType(loadAllOffers),\n        startWith(loadAllOffers()),\n        switchMap(() => this.offersService.getOffers().pipe(\n            map(offers => loadAllOffersSuccess({ offers }))\n        )),\n    ));\n\n    create$ = createEffect(() => this.actions$.pipe(\n        ofType(createOffer),\n        pluck('offer'),\n        switchMap(offer => this.offersService.createOffer(offer).pipe(\n            map(offer => createOfferSuccess({ offer })),\n            catchError(err => {\n                alert(err.message);\n                return of(failure({ err: { concern: 'CREATE', error: err } }));\n            })\n        ))\n    ));\n\n    update$ = createEffect(() => this.actions$.pipe(\n        ofType(updateOffer),\n        switchMap(({ offer }) => this.offersService.updateOffer(offer).pipe(\n            map(() => updateOfferSuccess({ offer })),\n            catchError(err => {\n                alert(err.message);\n                return of(failure({ err: { concern: 'UPDATE', error: err } }));\n            })\n        ))\n    ));\n\n    delete$ = createEffect(() => this.actions$.pipe(\n        ofType(deleteOffer),\n        pluck('id'),\n        switchMap(id => this.offersService.removeOffer(id).pipe(\n            pluck('id'),\n            map(id => deleteOfferSuccess({ id })),\n            catchError(err => {\n                alert(err.message);\n                return of(failure({ err: { concern: 'UPDATE', error: err } }));\n            })\n        ))\n    ));\n\n\n    constructor(\n        private actions$: Actions,\n        private offersService: OffersService\n    ) { }\n\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { AppSettings } from '../app.settings';\nimport { Offer } from '../models/offer.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OffersService {\n\n  constructor(private http: HttpClient) { }\n\n  getOffers(): Observable<Offer[]> {\n\n    return this.http.get<Offer[]>(AppSettings.API_ENDPOINT_OFFERS);\n  }\n  createOffer(offer: Offer): Observable<any> {\n    return this.http.post<Offer>(AppSettings.API_ENDPOINT_OFFERS, offer);\n  }\n  updateOffer(offer: Partial<Offer>): Observable<Offer> {\n    return this.http.put<Offer>(AppSettings.API_ENDPOINT_OFFERS, offer);\n  }\n  removeOffer(offerId: number): Observable<Offer> {\n    return this.http.delete<Offer>(`${AppSettings.API_ENDPOINT_OFFERS}/${offerId}`);\n  }\n}\n\n\n\n\n","import { AbstractControl } from '@angular/forms';\n\nexport function usernameValidator(control: AbstractControl): { [key: string]: any } | null {\n\n    let valid = control.value && !control.value.startsWith(\" \") && !control.value.endsWith(\" \");\n    return valid ? null : { invalidName: { valid: false, value: control.value } };\n}","import { createOfferSuccess, updateOfferSuccess, deleteOfferSuccess, loadAllOffersSuccess } from '@shared/state/offers/offers.actions';\nimport { State } from '@shared/state/offers/offers.state';\nimport { EntityAdapter, createEntityAdapter } from '@ngrx/entity';\nimport { Offer } from '@shared/models/offer.model';\nimport { createReducer, on } from '@ngrx/store';\n\n\nexport const offersAdapter: EntityAdapter<Offer> = createEntityAdapter<Offer>({\n    selectId: (offer: Offer) => offer.id,\n    sortComparer: false\n});\n\n\nexport const offersInitialState: State = {\n    ids: [],\n    entities: { 0: <Offer>{} }\n}\nexport const offersReducer = createReducer<State>(\n    offersInitialState,\n    on(loadAllOffersSuccess, (state, { offers }) =>\n        offersAdapter.setAll(offers, state)\n    ),\n    on(createOfferSuccess, (state, { offer }) => {\n\n        console.log(\"addOfferSuccess\");\n        console.log(offer);\n        return offersAdapter.addOne(offer, state);\n\n    }),\n    on(updateOfferSuccess, (state, { offer }) => {\n        console.log('updateOfferSuccess');\n        console.log(offer);\n        return offersAdapter.updateOne({ id: offer.id, changes: offer }, state);\n    }),\n    on(deleteOfferSuccess, (state, { id }) =>\n        offersAdapter.removeOne(id, state)\n    )\n);\nexport const getOfferById = (id: number) => (state: State) => state.entities[id];","import * as fromreducer from './offers.reducer';\nimport { State } from './offers.state';\nimport { Action, combineReducers, createFeatureSelector, createSelector } from '@ngrx/store';\n\nexport interface OffersState {\n    offers: State;\n}\n\n/** Provide reducers with AoT-compilation compliance */\nexport function reducers(state: OffersState | undefined, action: Action) {\n    return combineReducers({\n        offers: fromreducer.offersReducer\n    })(state, action)\n}\n\n\n/**\n * The createFeatureSelector function selects a piece of state from the root of the state object.\n * This is used for selecting feature states that are loaded eagerly or lazily.\n */\nexport const getOffersState = createFeatureSelector<OffersState>('offers');\n\nexport const getOffersEntitiesState = createSelector(\n    getOffersState,\n    state => state.offers\n);\n\nexport const {\n    selectAll: getAllOffers,\n} = fromreducer.offersAdapter.getSelectors(getOffersEntitiesState);\n\nexport const getOfferById = (id: number) => createSelector(\n    getOffersEntitiesState,\n    fromreducer.getOfferById(id)\n);\n","import { Action, createAction, props } from '@ngrx/store';\nimport { Offer } from '@shared/models/offer.model';\n\nexport enum OfferActionTypes {\n    LOAD_ALL_OFFERS = '[Offer] Add all offers',\n    LOAD_ALL_OFFER_SUCCESS = '[Offer] Add all offers success',\n    CREATE_OFFER = '[Offer] Create offer',\n    CREATE_OFFER_SUCCESS = '[Offer] Create offer success',\n    OFFER_FAILED = '[Offer] failure',\n    UPDATE_OFFER = '[Offer] Update offer',\n    UPDATE_OFFER_SUCCESS = '[Offer] Update offer success',\n    DELETE_OFFER = '[Offer] Delete offer',\n    DELETE_OFFER_SUCCESS = '[Offer] Delete offer success',\n}\nexport const loadAllOffers = createAction(\n    OfferActionTypes.LOAD_ALL_OFFERS\n\n);\nexport const loadAllOffersSuccess = createAction(\n    OfferActionTypes.LOAD_ALL_OFFER_SUCCESS,\n    props<{ offers: Offer[] }>()\n);\nexport const createOffer = createAction(\n    OfferActionTypes.CREATE_OFFER,\n    props<{ offer: Offer }>()\n);\nexport const createOfferSuccess = createAction(\n    OfferActionTypes.CREATE_OFFER_SUCCESS,\n    props<{ offer: Offer }>()\n);\n\nexport const updateOffer = createAction(\n    OfferActionTypes.UPDATE_OFFER,\n    props<{ offer: Partial<Offer> }>()\n);\n\nexport const updateOfferSuccess = createAction(\n    OfferActionTypes.UPDATE_OFFER_SUCCESS,\n    props<{ offer: Partial<Offer> }>()\n);\n\nexport const deleteOfferSuccess = createAction(\n    OfferActionTypes.DELETE_OFFER_SUCCESS,\n    props<{ id: number }>()\n);\nexport const deleteOffer = createAction(\n    OfferActionTypes.DELETE_OFFER,\n    props<{ id: number }>()\n);\nexport const failure = createAction(\n    OfferActionTypes.OFFER_FAILED,\n    props<{ err: { concern: 'CREATE' | 'DELETE' | 'UPDATE', error: any } }>()\n);\n\n\n\n","import { Injectable } from '@angular/core';\nimport { of } from 'rxjs';\nimport {\n    catchError,\n    exhaustMap,\n    map, pluck,\n    startWith,\n    switchMap\n} from 'rxjs/operators';\nimport { Actions, createEffect, Effect, ofType } from '@ngrx/effects';\nimport { StudentsService } from '@shared/services/students.service';\nimport {\n    loadAllUsers,\n    loadAllUsersSuccess,\n    addUser,\n    addUserSuccess,\n    failure,\n    deleteUser,\n    deleteUserSuccess,\n    updateUser,\n    updateUserSuccess\n} from '@shared/state/user/user.actions';\n\n@Injectable()\nexport class UsersEffects {\n\n    loadAll$ = createEffect(() => this.actions$.pipe(\n        ofType(loadAllUsers),\n        startWith(loadAllUsers()),\n        switchMap(() => this.studentsService.getStudents().pipe(\n            map(users => loadAllUsersSuccess({ users }))\n        )),\n    ));\n\n    create$ = createEffect(() => this.actions$.pipe(\n        ofType(addUser),\n        pluck('user'),\n        switchMap(user => this.studentsService.createStudent(user).pipe(\n            map(user => addUserSuccess({ user })),\n            catchError(err => {\n                alert(err.message);\n                return of(failure({ err: { concern: 'CREATE', error: err } }));\n            })\n        ))\n    ));\n\n\n    update$ = createEffect(() => this.actions$.pipe(\n        ofType(updateUser),\n        switchMap(({ user }) => this.studentsService.updateStudent(user).pipe(\n            map(() => updateUserSuccess({ user })),\n            catchError(err => {\n                alert(err.message);\n                return of(failure({ err: { concern: 'UPDATE', error: err } }));\n            })\n        ))\n    ));\n\n    delete$ = createEffect(() => this.actions$.pipe(\n        ofType(deleteUser),\n        pluck('id'),\n        switchMap(id => this.studentsService.removeStudent(id).pipe(\n            pluck('id'),\n            map(id => deleteUserSuccess({ id })),\n            catchError(err => {\n                alert(err.message);\n                return of(failure({ err: { concern: 'UPDATE', error: err } }));\n            })\n        ))\n    ));\n\n\n    constructor(\n        private actions$: Actions,\n        private studentsService: StudentsService\n    ) { }\n\n\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { User } from '@shared/models/user.model';\nimport * as fromselector from '@shared/state/user';\nimport { State } from '@shared/state/user/user.state';\nimport { addUser, deleteUser, updateUser } from '@shared/state/user/user.actions';\n\n@Injectable()\nexport class UsersStoreFacade {\n\n    users$ = this.store.pipe(\n        select(fromselector.getAllUsers)\n    );\n\n    constructor(private store: Store<State>) {\n        console.log(\"My store \");\n        console.log(store);\n    }\n\n    addUser(user: User) {\n        this.store.dispatch(addUser({ user }));\n    }\n\n    updateUser(user: Partial<User>) {\n        this.store.dispatch(updateUser({ user }));\n    }\n\n    deleteUser(id: number) {\n        this.store.dispatch(deleteUser({ id }));\n    }\n\n    getUserById(id: number) {\n        console.log(\"getUserById\");\n        return this.store.pipe(\n            select(fromselector.getUserById(id))\n        );\n    }\n    getUserByCredentials(username: string, password: string) {\n        console.log(\"getUserByCredentials\");\n        return this.store.pipe(\n            select(fromselector.getUserByCredentials(username, password))\n        );\n    }\n    getUserByUsername(username: string) {\n        console.log(\"getUserByUsername\");\n        return this.store.pipe(\n            select(fromselector.getUserByUsername(username))\n        );\n    }\n}","import { Injectable } from '@angular/core';\nimport { Observable, from } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { AppSettings } from '../app.settings';\nimport { Company } from '@shared/models/company.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CompaniesService {\n\n  constructor(private http: HttpClient) { }\n\n  getCompanies(): Observable<Company[]> {\n    console.log('getCompanies');\n    return this.http.get<Company[]>(AppSettings.API_ENDPOINT_COMPANIES);\n  }\n  createCompany(company: Company): Observable<any> {\n    console.log('createCompany');\n    return this.http.post(AppSettings.API_ENDPOINT_COMPANIES, company);\n  }\n\n  updateCompany(company: Partial<Company>): Observable<Company> {\n    console.log('updateCompany');\n    return this.http.put<Company>(AppSettings.API_ENDPOINT_COMPANIES, company);\n\n  }\n  removeCompany(id: number): Observable<Company> {\n    console.log('removeCompany');\n    return this.http.delete<Company>(`${AppSettings.API_ENDPOINT_COMPANIES}/${id}`);\n\n  }\n}","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { AppSettings } from '../app.settings';\nimport { User } from '@shared/models/user.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StudentsService {\n\n  constructor(private http: HttpClient) { }\n\n  getStudents(): Observable<User[]> {\n    console.log('getStudents');\n    return this.http.get<User[]>(AppSettings.API_ENDPOINT_USER);\n  }\n  createStudent(student: User): Observable<any> {\n    console.log('createStudent');\n    return this.http.post(AppSettings.API_ENDPOINT_USER, student);\n  }\n\n  updateStudent(student: Partial<User>): Observable<User> {\n    console.log('updateStudent');\n    return this.http.put<User>(AppSettings.API_ENDPOINT_USER, student);\n\n  }\n  removeStudent(id: number): Observable<User> {\n    console.log('removeStudent');\n    return this.http.delete<User>(`${AppSettings.API_ENDPOINT_USER}/${id}`);\n\n  }\n}","import { Injectable } from '@angular/core';\nimport { of } from 'rxjs';\nimport {\n    catchError,\n    map, pluck,\n    startWith,\n    switchMap\n} from 'rxjs/operators';\nimport { Actions, createEffect, Effect, ofType } from '@ngrx/effects';\nimport { CompaniesService } from '@shared/services/companies.service';\nimport {\n    loadAllCompanies,\n    loadAllCompaniesSuccess,\n    addCompany,\n    addCompanySuccess,\n    failure,\n    deleteCompany,\n    deleteCompanySuccess,\n    updateCompany,\n    updateCompanySuccess\n} from '@shared/state/company/company.actions';\n\n@Injectable()\nexport class CompaniesEffects {\n\n    loadAll$ = createEffect(() => this.actions$.pipe(\n        ofType(loadAllCompanies),\n        startWith(loadAllCompanies()),\n        switchMap(() => this.companiesService.getCompanies().pipe(\n            map(companies => loadAllCompaniesSuccess({ companies }))\n        )),\n    ));\n\n    create$ = createEffect(() => this.actions$.pipe(\n        ofType(addCompany),\n        pluck('company'),\n        switchMap(company => this.companiesService.createCompany(company).pipe(\n            map(company => addCompanySuccess({ company })),\n            catchError(err => {\n                alert(err.message);\n                return of(failure({ err: { concern: 'CREATE', error: err } }));\n            })\n        ))\n    ));\n\n\n    update$ = createEffect(() => this.actions$.pipe(\n        ofType(updateCompany),\n        switchMap(({ company }) => this.companiesService.updateCompany(company).pipe(\n            map(() => updateCompanySuccess({ company })),\n            catchError(err => {\n                alert(err.message);\n                return of(failure({ err: { concern: 'UPDATE', error: err } }));\n            })\n        ))\n    ));\n\n    delete$ = createEffect(() => this.actions$.pipe(\n        ofType(deleteCompany),\n        pluck('id'),\n        switchMap(id => this.companiesService.removeCompany(id).pipe(\n            pluck('id'),\n            map(id => deleteCompanySuccess({ id })),\n            catchError(err => {\n                alert(err.message);\n                return of(failure({ err: { concern: 'UPDATE', error: err } }));\n            })\n        ))\n    ));\n\n\n    constructor(\n        private actions$: Actions,\n        private companiesService: CompaniesService\n    ) { }\n\n\n}\n","import * as fromreducer from './user.reducer';\nimport { State } from './user.state';\nimport { Action, combineReducers, createFeatureSelector, createSelector } from '@ngrx/store';\n\nexport interface UsersState {\n    users: State;\n}\n\n/** Provide reducers with AoT-compilation compliance */\nexport function reducers(state: UsersState | undefined, action: Action) {\n    return combineReducers({\n        users: fromreducer.userReducer\n    })(state, action)\n}\n\n\n/**\n * The createFeatureSelector function selects a piece of state from the root of the state object.\n * This is used for selecting feature states that are loaded eagerly or lazily.\n */\nexport const getUsersState = createFeatureSelector<UsersState>('users');\n\nexport const getUsersEntitiesState = createSelector(\n    getUsersState,\n    state => state.users\n);\n\nexport const {\n    selectAll: getAllUsers,\n} = fromreducer.usersAdapter.getSelectors(getUsersEntitiesState);\n\nexport const getUserById = (id: number) => createSelector(\n    getUsersEntitiesState,\n    fromreducer.getUserById(id)\n);\nexport const getUserByCredentials = (username: string, password: string) => createSelector(\n    getUsersEntitiesState,\n    fromreducer.getUserByCredentials(username, password)\n);\n\nexport const getUserByUsername = (username: string) => createSelector(\n    getUsersEntitiesState,\n    fromreducer.getUserByUsername(username)\n);","import * as fromreducer from './company.reducer';\nimport { State } from './company.state';\nimport { Action, combineReducers, createFeatureSelector, createSelector } from '@ngrx/store';\n\nexport interface CompaniesState {\n    companies: State;\n}\n\n/** Provide reducers with AoT-compilation compliance */\nexport function reducers(state: CompaniesState | undefined, action: Action) {\n    return combineReducers({\n        companies: fromreducer.companyReducer\n    })(state, action)\n}\n\n\n/**\n * The createFeatureSelector function selects a piece of state from the root of the state object.\n * This is used for selecting feature states that are loaded eagerly or lazily.\n */\nexport const getCompaniesState = createFeatureSelector<CompaniesState>('companies');\n\nexport const getCompaniesEntitiesState = createSelector(\n    getCompaniesState,\n    state => state.companies\n);\n\nexport const {\n    selectAll: getAllCompanies,\n} = fromreducer.companiesAdapter.getSelectors(getCompaniesEntitiesState);\n\nexport const getCompanyById = (id: number) => createSelector(\n    getCompaniesEntitiesState,\n    fromreducer.getCompanyById(id)\n);\n\nexport const getCompanyByCredentials = (username: string, password: string) => createSelector(\n    getCompaniesEntitiesState,\n    fromreducer.getCompanyByCredentials(username, password)\n);\n\nexport const getCompanyByUsername = (username: string) => createSelector(\n    getCompaniesEntitiesState,\n    fromreducer.getCompanyByUsername(username)\n);"]}