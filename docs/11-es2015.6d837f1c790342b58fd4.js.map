{"version":3,"sources":["webpack:///src/app/views/company-offers-details-dialog/company-offers-details-dialog.component.html","webpack:///src/app/views/company-offers-details-dialog/company-offers-details-dialog.component.ts","webpack:///src/app/views/company-offers/company-offers.component.html","webpack:///src/app/views/company-offers/company-offers.component.ts","webpack:///src/app/views/company-offers/company-offers-routing.module.ts","webpack:///src/app/views/company-offers/company-offers.module.ts"],"names":["formBuilder","usersStoreFacade","dialogRef","data","provinceList","townList","candidates","candidatesDisplayedColumns","this","currentOffer","users","map","userid","getUserById","subscribe","user","push","forEach","value","name","province","updateTownList","offersDetailsDlgForm","group","company","required","position","job","jobDescription","description","town","municipe","jobCategory","category","title","titles","close","provObj","find","cur","get","townObj","newOffer","Object","assign","uid","provinceName","element","console","log","candidateName","candidateSurname","changeTown","apply","offersStoreFacade","companiesStoreFacade","route","dialog","offers$","company$","params","pipe","id","switchMap","getCompanyById","offersDisplayedColumns","theme","combineLatest","offers","undefined","length","jobOffers","filter","offer","includes","nextOfferId","reduce","total","dialogConfig","disableClose","autoFocus","panelClass","selectedOffer","date","format","open","afterClosed","addOffer","newCompany","of","updateCompany","idx","updateOffer","routes","path","component","CompanyOffersRoutingModule","forChild","CompanyOffersModule","forFeature","environment","production","instrument"],"mappings":"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","file":"x","sourcesContent":["<mat-dialog-content [formGroup]=\"offersDetailsDlgForm\">\n    <mat-card>\n        <mat-card-header>\n            <section class=\"mat-typography\">\n                <h2 mat-card-title>Oferta de trabajo</h2>\n            </section>\n        </mat-card-header>\n        <mat-card-content>\n            <fieldset>\n                <legend>Detalle de la oferta</legend>\n                <div>\n                    <mat-form-field class=\"full-width-field\">\n                        <mat-label>Empresa</mat-label>\n                        <input matInput type=\"text\" name=\"company\" readOnly=\"true\" formControlName=\"company\">\n                    </mat-form-field>\n                </div>\n                <div>\n                    <mat-form-field class=\"full-width-field\">\n                        <mat-label>Puesto</mat-label>\n                        <input matInput type=\"text\" name=\"position\" formControlName=\"position\">\n                    </mat-form-field>\n                </div>\n                <div>\n                    <mat-form-field class=\"full-width-field\">\n                        <mat-label>Descripci√≥n del puesto</mat-label>\n                        <textarea matInput name=\"jobDescription\" [matTextareaAutosize]\n                            formControlName=\"jobDescription\"></textarea>\n                    </mat-form-field>\n                </div>\n            </fieldset>\n            <fieldset>\n                <div>\n                    <mat-form-field class=\"half-width-field\">\n                        <mat-label>Provincia</mat-label>\n                        <mat-select panelClass=\"formal-theme\" formControlName=\"province\"\n                            (selectionChange)=\"changeTown()\">\n                            <mat-option *ngFor=\"let prov of provinceList\" [value]=\"prov\">{{prov}}</mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                    <mat-form-field class=\"half-width-field\">\n                        <mat-label>Municipio</mat-label>\n                        <mat-select panelClass=\"formal-theme\" formControlName=\"town\">\n                            <mat-option *ngFor=\"let town of townList\" [value]=\"town\">{{town}}</mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                </div>\n            </fieldset>\n            <fieldset>\n                <legend>Destinado a profesional de:</legend>\n\n                <div>\n                    <mat-form-field class=\"full-width-field\">\n                        <mat-label>Familia profesional</mat-label>\n                        <input matInput type=\"text\" name=\"jobCategory\" formControlName=\"jobCategory\">\n                    </mat-form-field>\n                </div>\n                <div>\n                    <mat-form-field class=\"full-width-field\">\n                        <mat-label>T√≠tulo</mat-label>\n                        <input matInput type=\"text\" name=\"title\" formControlName=\"title\">\n                    </mat-form-field>\n                </div>\n            </fieldset>\n            <section class=\"mat-typography\">\n                <h3>Candidatos</h3>\n            </section>\n            <table mat-table [dataSource]=\"candidates\" class=\"mat-elevation-z8\">\n\n                <!-- candidate name Column -->\n                <ng-container matColumnDef=\"candidateName\">\n                    <th mat-header-cell *matHeaderCellDef> Nombre del candidato </th>\n                    <td mat-cell *matCellDef=\"let element\"> {{element.name}} </td>\n                </ng-container>\n\n                <!-- candidate surname column -->\n                <ng-container matColumnDef=\"candidateSurname\">\n                    <th mat-header-cell *matHeaderCellDef> Apellido del candidato </th>\n                    <td mat-cell *matCellDef=\"let element\"> {{element.surname}} </td>\n                </ng-container>\n\n                <!-- Actions Column -->\n                <ng-container matColumnDef=\"actions\">\n                    <mat-header-cell *matHeaderCellDef></mat-header-cell>\n                    <mat-cell *matCellDef=\"let element;let i = index\">\n                        <button class=\"mat-raised-button mat-primary\"\n                            (click)=\"selectCandidate(element)\">Seleccionar</button>\n                        <button class=\"mat-raised-button\" (click)=\"discardCandidate(element)\">Descartar</button>\n                    </mat-cell>\n                </ng-container>\n                <tr mat-header-row *matHeaderRowDef=\"candidatesDisplayedColumns\"></tr>\n                <tr mat-row *matRowDef=\"let row; columns: candidatesDisplayedColumns;let i = index\"></tr>\n            </table>\n        </mat-card-content>\n    </mat-card>\n</mat-dialog-content>\n\n<mat-dialog-actions>\n    <button class=\"mat-raised-button\" (click)=\"close()\">Cerrar</button>\n    <button class=\"mat-raised-button mat-primary\" (click)=\"apply()\">Guardar</button>\n</mat-dialog-actions>","import { Component, OnInit, Inject, ChangeDetectionStrategy, ViewEncapsulation } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { TitleStudy } from '@shared/models/study.model';\nimport { Offer } from '@shared/models/offer.model';\nimport { User } from '@shared/models/user.model';\nimport * as towndata from '@assets/jsondata/munic.json';\nimport { UsersStoreFacade } from '@shared/state/user/user.store-facade';\n\n\n@Component({\n  selector: 'app-company-offers-details-dialog',\n  templateUrl: './company-offers-details-dialog.component.html',\n  styleUrls: ['./company-offers-details-dialog.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None\n})\nexport class CompanyOffersDetailsDialogComponent implements OnInit {\n  public offersDetailsDlgForm: FormGroup;\n  public titles: TitleStudy[];\n  public currentOffer: Offer;\n  public selectedProvince: string;\n  public provinceList: string[] = [];\n  public townList: string[] = [];\n  public candidates: User[] = [];\n\n  public candidatesDisplayedColumns: string[] = ['candidateName', 'candidateSurname', 'actions'];\n\n  constructor(private formBuilder: FormBuilder, private usersStoreFacade: UsersStoreFacade,\n    private dialogRef: MatDialogRef<CompanyOffersDetailsDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) data) {\n\n    this.currentOffer = data;\n\n    this.currentOffer.users.map(userid =>\n      this.usersStoreFacade.getUserById(userid).subscribe(\n        (user) => this.candidates.push(user)\n      ))\n\n    towndata['default'].forEach((value) => { this.provinceList.push(value.name) });\n    if (data.province.name != \"\") {\n      // no new dialog\n      this.updateTownList(data.province.name);\n      this.offersDetailsDlgForm = this.formBuilder.group({\n        company: [data.company.name, Validators.required],\n        position: [data.job.name, Validators.required],\n        jobDescription: [data.job.description, Validators.required],\n        province: [data.province.name, Validators.required],\n        town: [data.municipe.name, Validators.required],\n        jobCategory: [data.category.name, Validators.required],\n        title: [data.title[0].name, Validators.required]\n      });\n    } else {\n      this.offersDetailsDlgForm = this.formBuilder.group({\n        company: [data.company.name, Validators.required],\n        position: [data.job.name, Validators.required],\n        jobDescription: [data.job.description, Validators.required],\n        province: [data.province.name, Validators.required],\n        town: [data.municipe.name, Validators.required],\n        jobCategory: [data.category.name, Validators.required],\n        title: ['', Validators.required]\n      });\n    }\n\n\n\n    this.titles = data.title;\n  }\n\n  ngOnInit(): void {\n  }\n  close() {\n    this.dialogRef.close();\n  }\n  apply() {\n\n    let provObj = towndata['default'].find((cur) => cur.name === this.offersDetailsDlgForm.get('province').value);\n    let townObj = provObj['towns'].find((cur) => cur.name === this.offersDetailsDlgForm.get('town').value);\n\n    let newOffer = <Offer>{};\n\n    Object.assign(this.currentOffer);\n    newOffer.province = { uid: provObj.uid, name: provObj.name };\n    newOffer.municipe = townObj;\n    newOffer.job = {\n      uid: 0,\n      name: this.offersDetailsDlgForm.get('position').value,\n      description: this.offersDetailsDlgForm.get('jobDescription').value\n    };\n    newOffer.category = { uid: 0, name: this.offersDetailsDlgForm.get('jobCategory').value };\n    newOffer.title = [];\n    newOffer.title.push({ uid: 0, name: this.offersDetailsDlgForm.get('title').value });\n\n    this.dialogRef.close(newOffer);\n  }\n\n  updateTownList(provinceName) {\n    let provObj = towndata['default'].find((cur) => cur.name === provinceName);\n    this.townList = [];\n    provObj['towns'].forEach((value) => { this.townList.push(value.name) });\n  }\n\n  changeTown() {\n    let provinceName = this.offersDetailsDlgForm.get('province').value;\n    this.updateTownList(provinceName);\n  }\n  selectCandidate(element) {\n    console.log(\"candidate \" + element.candidateName + \" \" + element.candidateSurname + \" has been selected\");\n  }\n  discardCandidate(element) {\n    console.log(\"candidate \" + element.candidateName + \" \" + element.candidateSurname + \" has been discarded\");\n  }\n}\n","<link href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" rel=\"stylesheet\">\n<section class=\"mat-typography\">\n    <h3>Job offers</h3>\n</section>\n\n<table mat-table [dataSource]=\"jobOffers\" class=\"mat-elevation-z8 formal-theme\">\n\n    <!-- company name Column -->\n    <ng-container matColumnDef=\"companyName\">\n        <th mat-header-cell *matHeaderCellDef> Empresa </th>\n        <td mat-cell *matCellDef=\"let element\"> {{element.company.name}} </td>\n    </ng-container>\n\n    <!-- category column -->\n    <ng-container matColumnDef=\"category\">\n        <th mat-header-cell *matHeaderCellDef> Familia Profesional </th>\n        <td mat-cell *matCellDef=\"let element\"> {{element.category.name}} </td>\n    </ng-container>\n\n    <!-- Date Column -->\n    <ng-container matColumnDef=\"date\">\n        <th mat-header-cell *matHeaderCellDef> Fecha </th>\n        <td mat-cell *matCellDef=\"let element\"> {{element.date}} </td>\n    </ng-container>\n\n    <!-- province column -->\n    <ng-container matColumnDef=\"province\">\n        <th mat-header-cell *matHeaderCellDef> Prov√≠ncia </th>\n        <td mat-cell *matCellDef=\"let element\"> {{element.province.name}} </td>\n    </ng-container>\n\n    <!-- Actions Column -->\n    <ng-container matColumnDef=\"actions\">\n        <mat-header-cell *matHeaderCellDef>\n            <button class=\"mat-raised-button\" (click)=\"createNew()\">\n                <mat-icon color=\"primary\">add</mat-icon>\n            </button>\n        </mat-header-cell>\n        <mat-cell *matCellDef=\"let element;let i = index\">\n            <button class=\"mat-raised-button\" (click)=\"edit(element, i)\">\n                <mat-icon color=\"primary\">create</mat-icon>\n            </button>\n            <button class=\"mat-raised-button\" (click)=\"cancelOrDelete(i)\">\n                <mat-icon color=\"warn\">clear</mat-icon>\n            </button>\n        </mat-cell>\n    </ng-container>\n    <tr mat-header-row *matHeaderRowDef=\"offersDisplayedColumns\"></tr>\n    <tr mat-row *matRowDef=\"let row; columns: offersDisplayedColumns\"></tr>\n</table>","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Offer } from '@shared/models/offer.model';\nimport { Company } from '@shared/models/company.model';\nimport { Observable, combineLatest } from 'rxjs';\nimport { OffersStoreFacade } from '@shared/state/offers/offers.store-facade';\nimport { CompaniesStoreFacade } from '@shared/state/company/company.store-facade';\nimport { map, switchMap } from 'rxjs/operators';\nimport { MatDialog, MatDialogConfig } from '@angular/material/dialog';\nimport { CompanyOffersDetailsDialogComponent } from '@views/company-offers-details-dialog/company-offers-details-dialog.component';\nimport moment from 'moment';\n\n@Component({\n  selector: 'app-company-offers',\n  templateUrl: './company-offers.component.html',\n  styleUrls: ['./company-offers.component.scss'],\n\n})\nexport class CompanyOffersComponent implements OnInit {\n\n  offers$: Observable<Offer[]> = this.offersStoreFacade.offers$;\n\n  company$: Observable<Company> = this.route.params.pipe(\n    map(params => params.id),\n    switchMap(id => this.companiesStoreFacade.getCompanyById(id))\n  );\n\n  public company = <Company>{};\n  public jobOffers: Offer[];\n  public selectedOffer: Offer;\n  public offersDisplayedColumns: string[] = ['companyName', 'category', 'date', 'province', 'actions'];\n  public nextOfferId: number;\n  public theme = \"formal-theme\";\n\n  constructor(private offersStoreFacade: OffersStoreFacade, private companiesStoreFacade: CompaniesStoreFacade,\n    private route: ActivatedRoute, private dialog: MatDialog) {\n    combineLatest(this.company$, this.offers$).subscribe(\n\n      ([company, offers]) => {\n        if (company != undefined) {\n\n          this.company = company;\n\n          if (offers.length > 0 && this.company.offers != undefined) {\n\n            this.jobOffers = offers.filter(offer => this.company.offers.includes(offer.id));\n            // sets the id for an eventual new offer\n            this.nextOfferId = offers.map((value) => value.id).reduce((total, cur) => { return cur > total ? cur : total }) + 1;\n          }\n        }\n      }\n    );\n  }\n\n  ngOnInit(): void {\n\n  }\n  createNew() {\n    const dialogConfig = new MatDialogConfig();\n\n    dialogConfig.disableClose = true;\n    dialogConfig.autoFocus = true;\n    dialogConfig.panelClass = this.theme;\n\n    this.selectedOffer = {\n      id: this.nextOfferId,\n      company: { uid: this.company.id, name: this.company.company },\n      job: {\n        uid: 0, name: '',\n        description: ''\n      },\n      province: { uid: 0, name: '' },\n      municipe: { uid: 0, name: '' },\n      category: { uid: 0, name: '' },\n      date: moment().format('YYYY-MM-DD'),\n      title: [],\n      users: []\n    }\n    dialogConfig.data = this.selectedOffer;\n\n\n    const dialogRef = this.dialog.open(CompanyOffersDetailsDialogComponent, dialogConfig);\n\n    dialogRef.afterClosed().subscribe(\n      data => {\n        if (data) {\n          // first of all, we create new offer\n          let newOffer = <Offer>{};\n          Object.assign(newOffer, data);\n          this.offersStoreFacade.addOffer(newOffer);\n\n          // then we update the list of offers of the company \n          let newCompany: Partial<Company> = {};\n          newCompany.id = this.company.id;\n          newCompany.offers = [];\n          this.company.offers.map(of => newCompany.offers.push(of));\n          newCompany.offers.push(this.selectedOffer.id);\n          this.companiesStoreFacade.updateCompany(newCompany);\n\n          this.nextOfferId += 1;\n        }\n      });\n  }\n  edit(element, idx) {\n\n    const dialogConfig = new MatDialogConfig();\n\n    dialogConfig.disableClose = true;\n    dialogConfig.autoFocus = true;\n    dialogConfig.panelClass = this.theme;\n\n    this.selectedOffer = this.jobOffers[idx];\n\n    dialogConfig.data = element;\n\n    console.log(dialogConfig.data);\n    const dialogRef = this.dialog.open(CompanyOffersDetailsDialogComponent, dialogConfig);\n\n    dialogRef.afterClosed().subscribe(\n      data => {\n\n        if (data) {\n          // first of all, we update the offer\n          let newOffer: Partial<Offer> = {};\n          Object.assign(newOffer, data);\n          newOffer.id = this.selectedOffer.id;\n          this.offersStoreFacade.updateOffer(newOffer);\n        }\n      });\n  }\n\n\n  cancelOrDelete(idx) {\n\n    this.selectedOffer = this.jobOffers[idx];\n\n    let newCompany: Partial<Company> = {};\n    newCompany.id = this.company.id;\n    newCompany.offers = this.company.offers.filter(of => of != this.selectedOffer.id);\n    this.companiesStoreFacade.updateCompany(newCompany);\n\n  }\n}\n\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { CompanyOffersComponent } from '@views/company-offers/company-offers.component';\n\n\nconst routes: Routes = [\n  {\n    path: \"\", component: CompanyOffersComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class CompanyOffersRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SharedModule } from '@shared/shared.module';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CompanyOffersRoutingModule } from '@views/company-offers/company-offers-routing.module';\nimport { CompanyOffersComponent } from '@views/company-offers/company-offers.component';\nimport { CompanyOffersDetailsDialogComponent } from '@views/company-offers-details-dialog/company-offers-details-dialog.component';\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\nimport * as fromOffers from '@shared/state/offers';\nimport * as fromUsers from '@shared/state/user';\nimport * as fromCompanies from '@shared/state/company';\nimport { OffersEffects } from '@shared/state/offers/offers.effects';\nimport { UsersEffects } from '@shared/state/user/user.effects';\nimport { CompaniesEffects } from '@shared/state/company/company.effects';\nimport { environment } from '@environments/environment';\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools';\nimport { OffersStoreFacade } from '@shared/state/offers/offers.store-facade';\nimport { OffersService } from '@shared/services/offers.service';\nimport { UsersStoreFacade } from '@shared/state/user/user.store-facade';\nimport { StudentsService } from '@shared/services/students.service';\nimport { CompaniesStoreFacade } from '@shared/state/company/company.store-facade';\nimport { CompaniesService } from '@shared/services/companies.service';\n\n@NgModule({\n  declarations: [CompanyOffersComponent, CompanyOffersDetailsDialogComponent],\n  imports: [\n    CommonModule,\n    CompanyOffersRoutingModule,\n    ReactiveFormsModule,\n    FormsModule,\n    SharedModule,\n    StoreModule.forFeature('offers', fromOffers.reducers),\n    StoreModule.forFeature('users', fromUsers.reducers),\n    StoreModule.forFeature('companies', fromCompanies.reducers),\n    EffectsModule.forFeature([OffersEffects, UsersEffects, CompaniesEffects]),\n    !environment.production ? StoreDevtoolsModule.instrument() : []\n  ],\n  providers: [\n    OffersStoreFacade, OffersService,\n    UsersStoreFacade, StudentsService,\n    CompaniesStoreFacade, CompaniesService\n  ],\n  entryComponents: [\n    CompanyOffersDetailsDialogComponent\n  ]\n})\nexport class CompanyOffersModule { }\n"]}