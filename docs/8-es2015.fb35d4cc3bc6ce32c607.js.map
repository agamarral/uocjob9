{"version":3,"sources":["webpack:///src/app/views/validators/nif-validator.ts","webpack:///src/app/views/personal-details-dialog/personal-details-dialog.component.html","webpack:///src/app/views/personal-details-dialog/personal-details-dialog.component.ts","webpack:///src/app/views/personal-details/personal-details.component.ts","webpack:///src/app/views/personal-details/personal-details.component.html","webpack:///src/app/shared/services/upload.service.ts","webpack:///src/app/views/study-details-dialog/study-details-dialog.component.html","webpack:///src/app/views/study-details-dialog/study-details-dialog.component.ts","webpack:///src/app/views/study-details/study-details.component.html","webpack:///src/app/views/study-details/study-details.component.ts","webpack:///src/app/views/work-experience-details-dialog/work-experience-details-dialog.component.ts","webpack:///src/app/views/work-experiences/work-experiences.component.html","webpack:///src/app/views/work-experience-details-dialog/work-experience-details-dialog.component.html","webpack:///src/app/views/work-experiences/work-experiences.component.ts","webpack:///src/app/shared/models/language.model.ts","webpack:///src/app/views/language-details-dialog/language-details-dialog.component.html","webpack:///src/app/views/language-details-dialog/language-details-dialog.component.ts","webpack:///src/app/views/language-details/language-details.component.html","webpack:///src/app/views/language-details/language-details.component.ts","webpack:///src/app/views/profile/profile.component.ts","webpack:///src/app/views/profile/profile.component.html","webpack:///src/app/views/profile/profile-routing.module.ts","webpack:///src/app/views/profile/profile.module.ts"],"names":["idValidator","control","validRegex","valid","value","length","id","toUpperCase","replace","niePrefix","charAt","substr","test","parseInt","invalidNif","MyErrorStateMatcher","form","invalid","dirty","touched","formBuilder","usersStorefacade","dialogRef","data","provinceList","townList","matcher","errors","namelength","pattern","spaces","licenseList","this","user","forEach","push","name","updateTownList","address","province","startdate","Date","birthdate","format","personalDetailsDlgForm","group","minLength","maxLength","surname","phone","required","phone2","documentType","documentNumber","street","municipe","license","aboutMe","otherCompetences","get","setValue","split","event","setErrors","close","partial","Object","assign","uid","provObj","find","cur","townObj","updateUser","provinceName","hasError","changeTown","save","dialog","route","user$","params","pipe","map","switchMap","getUserById","isUsernameValid","isPasswordValid","isReadOnly","initialize_user","subscribe","dialogConfig","disableClose","autoFocus","panelClass","theme","open","afterClosed","console","log","password","psswrequest","username","avatar_hash","email","roles","studies","level","title","institution","date","certificate","bilingue","category","grade","dual","experiences","languages","offers","openDialog","UploadService","httpClient","SERVER_URL","formData","post","reportProgress","observe","uploadService","institutionList","CFGSTitleList","categoryList","institutionListNames","CFGSTitleListNames","categoryListNames","gradeList","file","selectedStudy","hasOwnProperty","initialize_college","initialize_cfgs","initialize_undefined","displayCFGS","displayCollege","initializeCfgsLists","updateTitleList","studyDetailsDlgForm","titleName","institution_cfgs","jobCategory","gradeLevel","titleName_cfgs","date_cfgs","bilingue_cfgs","FormData","append","inProgress","upload","type","UploadProgress","progress","Math","round","loaded","total","Response","catchError","error","of","body","file2upload","fileUpload_cfgs","nativeElement","fileUpload","onchange","files","uploadFile","click","collegeStudy","unix","toString","cfgsStudy","insti","cat","categoryName","categoryObj","filter","changeTitleType","studiesDisplayedColumns","newStudy","Number","newUser","element","idx","currentStudy","enddate","experienceDetailsDlgForm","company","position","tasks","currentExperience","dateAdapter","experiencesDisplayedColumns","currentExpId","reduce","newExp","languageCatalog","languageLevels","languageList","levelList","currentLanguage","languageDetailsDlgForm","languageName","other","languageLevel","lang","languagesDisplayedColumns","newLang","currentLangUid","routes","path","component","ProfileRoutingModule","forChild","ProfileModule","forFeature","environment","production","instrument"],"mappings":"0odAEO,SAASA,EAAYC,GAExB,MAAMC,EAAa,+BAEnB,IAAIC,GAAQ,EAGZ,GAAIF,EAAQG,OAAkC,IAAzBH,EAAQG,MAAMC,OAAc,CAC7C,IAAIC,EAAKL,EAAQG,MAAMG,cAAcC,QAAQ,KAAM,IAEnD,IAAIC,EAAYH,EAAGI,OAAO,GAC1B,OAAQD,GACJ,IAAK,IACDA,EAAY,EACZ,MACJ,IAAK,IACDA,EAAY,EACZ,MACJ,IAAK,IACDA,EAAY,EASpB,OANAH,EAAKG,EAAYH,EAAGK,OAAO,GAEvBT,EAAWU,KAAKN,KAChBH,EAASG,EAAGI,OAAO,KAtBR,0BAsB0BA,OAAOG,SAASP,EAAI,IAAM,KAG5DH,EAAQ,KAAO,CAAEW,WAAY,CAAEX,OAAO,EAAOC,MAAOH,EAAQG,QAEvE,MAAO,CAAEU,WAAY,CAAEX,OAAO,EAAOC,MAAOH,EAAQG,Q,kJCpBpC,oBACI,QACJ,Q,oBADI,wC,yBAEJ,oBAEI,QACJ,Q,oBADI,2C,yBAEJ,oBACI,QACJ,Q,oBADI,uC,yBAOJ,oBACI,QACJ,Q,oBADI,wC,yBAEJ,oBAEI,QACJ,Q,oBADI,2C,yBAEJ,oBACI,QACJ,Q,oBADI,uC,yBAeA,wBAA0D,QAC1D,Q,yBAD4C,gBAAc,wB,sBAW9D,oBAGM,sBAAW,iBAAQ,kBAAO,OAAU,0BAC1C,Q,yBAoBA,oBACI,QACJ,Q,oBADI,mC,yBAeA,wBAA6D,QAAQ,Q,yBAAvB,gBAAe,iB,yBAM7D,wBAAyD,QAAQ,Q,yBAAvB,gBAAe,iB,gDC5F1E,MAAMW,EACX,aAAad,EAA6Be,GAExC,SAAUf,IAAWA,EAAQgB,UAAYhB,EAAQiB,QAASjB,EAAQkB,UAwB/D,MAAM,EAmBX,YAAoBC,EAAkCC,EAC5CC,EACiBC,GAFP,KAAAH,cAAkC,KAAAC,mBAC5C,KAAAC,YAhBH,KAAAE,aAAyB,GACzB,KAAAC,SAAqB,GAC5B,KAAAC,QAAU,IAAIX,EAIP,KAAAY,OAAoC,CACzCrB,GAAI,4CACJsB,WAAY,6EACZC,QAAS,4DACTC,OAAQ,0EAEV,KAAAC,YAAwB,CAAC,UAAW,KAAM,KAAM,KAAM,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,MAAO,KAAM,MAAO,MAOpHC,KAAKC,KAAOV,EAEZ,EAAoBW,QAAS9B,IAAY4B,KAAKR,aAAaW,KAAK/B,EAAMgC,QACtEJ,KAAKK,eAAed,EAAKe,QAAQC,SAASH,MAE1C,MAAMI,EAAY,IAAIC,KAAK,IAAOlB,EAAKmB,UAAW,cAAcC,OAAO,eAEvEX,KAAKY,uBAAyBZ,KAAKZ,YAAYyB,MAAM,CACnDT,KAAM,CAACb,EAAKa,KAAM,CAAC,IAAWU,UAAU,GAAI,IAAWC,UAAU,IAAK,IAAmB,IAAWlB,QAAQ,sBAC5GmB,QAAS,CAACzB,EAAKyB,QAAS,CAAC,IAAWF,UAAU,GAAI,IAAWC,UAAU,IAAK,IAAmB,IAAWlB,QAAQ,sBAClHa,UAAW,IAAI,IAAYF,EAAW,IACtCS,MAAO,CAAC1B,EAAK0B,MAAO,IAAWC,UAC/BC,OAAQ,CAAC5B,EAAK4B,OAAQ,IAAWD,UACjCE,aAAc,CAAC7B,EAAK6B,aAAahB,KAAM,IAAWc,UAClDG,eAAgB,CAAC9B,EAAK8B,eAAgB,CAACrD,IACvCsC,QAAS,CAACf,EAAKe,QAAQgB,OAAQ,IAAWJ,UAC1CX,SAAU,CAAChB,EAAKe,QAAQC,SAASH,KAAM,IAAWc,UAClDK,SAAU,CAAChC,EAAKe,QAAQiB,SAASnB,KAAM,IAAWc,UAClDM,QAAS,CAACjC,EAAKiC,QAAS,IAAWN,UACnCO,QAASlC,EAAKkC,QACdC,iBAAkBnC,EAAKmC,mBAEzB1B,KAAKY,uBAAuBe,IAAI,YAAYC,SAASrC,EAAKe,QAAQC,SAASH,MAC3EJ,KAAKY,uBAAuBe,IAAI,YAAYC,SAASrC,EAAKe,QAAQiB,SAASnB,MAC3EJ,KAAKY,uBAAuBe,IAAI,WAAWC,SAASrC,EAAKiC,QAAQK,MAAM,MAIzE,SAASC,GAEFA,GAAqD,KAA5C9B,KAAKY,uBAAuBxC,MAAM6C,OAC9CjB,KAAKY,uBAAuBe,IAAI,SAASI,UAAU,CAAC,sBAAsB,IAG9E,YAEA,QACE/B,KAAKV,UAAU0C,QAEjB,OAEE,IAAIC,EAAyB,GAC7BC,OAAOC,OAAOF,EAASjC,KAAKC,MAE5BgC,EAAQ7B,KAAOJ,KAAKY,uBAAuBe,IAAI,QAAQvD,MACvD6D,EAAQjB,QAAUhB,KAAKY,uBAAuBe,IAAI,WAAWvD,MAE7D6D,EAAQhB,MAAQjB,KAAKY,uBAAuBe,IAAI,SAASvD,MACzD6D,EAAQd,OAASnB,KAAKY,uBAAuBe,IAAI,UAAUvD,MAEG,QAA1D4B,KAAKY,uBAAuBe,IAAI,gBAAgBvD,MAClD6D,EAAQb,aAAe,CAAEgB,IAAK,EAAGhC,KAAM,OAEvC6B,EAAQb,aAAe,CAAEgB,IAAK,EAAGhC,KAAM,OAGzC6B,EAAQZ,eAAiBrB,KAAKY,uBAAuBe,IAAI,kBAAkBvD,MAE3E,IAAIiE,EAAU,EAAoBC,KAAMC,GAAQA,EAAInC,OAASJ,KAAKY,uBAAuBe,IAAI,YAAYvD,OACrGoE,EAAUH,EAAe,MAAEC,KAAMC,GAAQA,EAAInC,OAASJ,KAAKY,uBAAuBe,IAAI,YAAYvD,OAGtG6D,EAAQ3B,QAAU,CAChBgB,OAAQtB,KAAKY,uBAAuBe,IAAI,WAAWvD,MACnDmD,SAAUiB,EACVjC,SAAU,CAAE6B,IAAKC,EAAQD,IAAKhC,KAAMiC,EAAQjC,OAG9C6B,EAAQvB,UAAY,IAAOV,KAAKY,uBAAuBe,IAAI,aAAavD,OAAOuC,OAAO,cAEtFX,KAAKX,iBAAiBoD,WAAWR,GACjCjC,KAAKV,UAAU0C,MAAMhC,KAAKY,uBAAuBxC,OAEnD,eAAesE,GACb,IAAIL,EAAU,EAAoBC,KAAMC,GAAQA,EAAInC,OAASsC,GAC7D1C,KAAKP,SAAW,GAChB4C,EAAe,MAAEnC,QAAS9B,IAAY4B,KAAKP,SAASU,KAAK/B,EAAMgC,QAGjE,aACE,IAAIsC,EAAe1C,KAAKY,uBAAuBe,IAAI,YAAYvD,MAC/D4B,KAAKK,eAAeqC,I,sCAxGX,GAA8B,mCAqB/B,O,uBArBC,EAA8B,8iD,GAAA,MD1C3C,+BAEI,mBAEI,0BACI,gBACJ,OACA,2BACI,cACI,2BACI,oBAAW,iBAAM,OACjB,kBACA,6BAGA,6BAIA,6BAGJ,OAEA,4BACI,qBAAW,qBAAS,OACpB,mBACA,6BAGA,6BAIA,6BAGJ,OACJ,OACA,eACI,4BACI,qBAAW,+BAAmB,OAC9B,mBACA,mCACA,8BACJ,OAEA,4BACI,qBAAW,+BAAmB,OAC9B,yBACI,+BAEJ,OACJ,OAEJ,OACA,eACI,4BACI,qBAAW,6CAA8B,OACzC,oBACI,oCAAY,EAAAC,SAAA,MADhB,OAEA,6BAKJ,OACA,4BACI,qBAAW,8CAA+B,OAC1C,oBAEJ,OACJ,OACA,eACI,4BACI,qBAAW,6BAAiB,OAC5B,yBACI,yBAAwB,eAAG,OAC3B,yBAAwB,eAAG,OAC/B,OACJ,OACA,4BACI,qBAAW,mBAAO,OAClB,oBAEA,6BAIJ,OACJ,OACA,eACI,6BACI,qBAAW,wBAAS,OACpB,oBACJ,OACJ,OACA,eACI,4BACI,qBAAW,qBAAS,OACpB,yBAAgE,2CAAmB,EAAAC,gBAC/E,+BACJ,OACJ,OACA,4BACI,qBAAW,qBAAS,OACpB,yBACI,+BACJ,OACJ,OACJ,OAEA,eACI,6BACI,qBAAW,2BAAY,OACvB,uBACJ,OACJ,OACA,eACI,6BACI,qBAAW,8BAAkB,OAC7B,uBAEJ,OACJ,OAEJ,OACJ,OACJ,OACA,8BACI,qBAAkC,iCAAS,EAAAZ,WAAS,kBAAM,OAC1D,qBAA8C,iCAAS,EAAAa,UAAQ,mBAAO,OAC1E,Q,sBApIoB,2CAYW,+EAIP,4IAGO,kFAQA,iFAIP,kJAGO,qFAQK,gCACiB,sBAOjB,sCASY,8CAA6C,+BAE9D,iHAQiB,8CAexB,6CACO,2FAgBK,wCAMA,qC,+YE1F7B,MAAM,EAaX,YAAoBC,EAA2BzD,EAA4C0D,GAAvE,KAAAD,SAA2B,KAAAzD,mBAA4C,KAAA0D,QAT3F,KAAAC,MAA0BhD,KAAK+C,MAAME,OAAOC,KAC1C,OAAAC,EAAA,GAAIF,GAAUA,EAAO3E,IACrB,OAAA8E,EAAA,GAAU9E,GAAM0B,KAAKX,iBAAiBgE,YAAY/E,KAG7C,KAAAgF,iBAA2B,EAC3B,KAAAC,iBAA2B,EAC3B,KAAAC,YAAa,EAIlBxD,KAAKyD,kBACLzD,KAAKgD,MAAMU,UACRtF,IAEC4B,KAAKwD,YAAa,EAClBxD,KAAKC,KAAO7B,EACZ4B,KAAKwD,YAAa,IAMxB,YAGA,aAEE,MAAMG,EAAe,IAAI,IAEzBA,EAAaC,cAAe,EAC5BD,EAAaE,WAAY,EAEzBF,EAAapE,KAAOS,KAAKC,KACzB0D,EAAaG,WAAa9D,KAAK+D,MAEb/D,KAAK8C,OAAOkB,KAAK,EAAgCL,GAEzDM,cAAcP,UACtBnE,IACE2E,QAAQC,IAAI,iBAAkB5E,KAIpC,kBACES,KAAKC,KAAO,CACVmE,SAAU,GACVC,aAAa,EACb/F,IAAK,EACLgG,SAAU,GACVC,YAAa,GACbnE,KAAM,GACNY,QAAS,GACTwD,MAAO,GACP9D,UAAW,GACXO,MAAO,GACPE,OAAQ,GACRC,aAAc,CAAEgB,IAAK,EAAGhC,KAAM,OAC9BiB,eAAgB,GAChBf,QAAS,CAAEgB,OAAQ,GAAIf,SAAU,CAAE6B,IAAK,EAAGhC,KAAM,IAAMmB,SAAU,CAAEa,IAAK,EAAGhC,KAAM,KACjFqE,MAAO,GACPC,QAAS,CAAC,CACRtC,IAAK,EACLuC,MAAO,CAAEvC,IAAK,EAAGhC,KAAM,IACvBwE,MAAO,CAAExC,IAAK,EAAGhC,KAAM,IACvByE,YAAa,CAAEzC,IAAK,EAAGhC,KAAM,IAC7B0E,KAAM,IACNC,aAAa,EACbC,UAAU,EACVC,SAAU,CAAE7C,IAAK,EAAGhC,KAAM,IAC1B8E,MAAO,CAAE9C,IAAK,EAAGhC,KAAM,IACvB+E,MAAM,IAERC,YAAa,GACbC,UAAW,GACXC,OAAQ,GACR9D,QAAS,GACTC,QAAS,GACTC,iBAAkB,K,sCAlFX,GAAwB,gC,uBAAxB,EAAwB,q3CCjBrC,oBACI,aAAI,wBAAa,OACrB,OACA,iBACI,mBACI,0BACI,gBACJ,OAEA,2BACI,cACI,2BACI,qBAAW,kBAAM,OACjB,mBAA8D,0DAA9D,OACJ,OAEA,4BACI,qBAAW,oBAAQ,OACnB,mBAAiE,6DAAjE,OACJ,OACJ,OAEA,eACI,4BACI,qBAAW,iCAAkB,OAC7B,mBAA+D,2DAA/D,OACJ,OACA,4BACI,qBAAW,+BAAmB,OAC9B,mBAAmE,+DAAnE,OACJ,OACJ,OAEA,eACI,4BACI,qBAAW,uBAAQ,OACnB,mBAA+D,2DAA/D,OACJ,OACA,4BACI,qBAAW,mBAAO,OAClB,oBACI,oEADJ,OAEJ,OACA,4BACI,qBAAW,gCAAoB,OAC/B,oBAAiE,6DAAjE,OACJ,OACJ,OAEA,eACI,6BACI,qBAAW,wBAAS,OACpB,oBAAiE,oEAAjE,OACJ,OACJ,OACA,eAGA,eACI,6BACI,qBAAW,uBAAQ,OACnB,uBACI,6DAA2B,OACnC,OACJ,OACA,eACI,6BACI,qBAAW,8BAAkB,OAC7B,uBACI,sEAAoC,OAC5C,OACJ,OAEJ,OAEJ,OAEA,qBACI,iCAAS,EAAA6D,gBAAc,kBAAM,OAErC,Q,MAnEkF,qCAKG,uCAOF,qCAII,yCAOJ,qCAK3D,8CAI6D,uCAOA,8CAU7D,uCAOA,gDAQD,kC,gWCtEhB,MAAMC,EAEX,YAAoBC,GAAA,KAAAA,aADpB,KAAAC,WAAqB,mBAGd,OAAOC,GAEZ,OAAO3F,KAAKyF,WAAWG,KAAU5F,KAAK0F,WAAYC,EAAU,CAC1DE,gBAAgB,EAChBC,QAAS,Y,sCARFN,GAAa,Y,yBAAbA,EAAa,QAAbA,EAAa,qBAFZ,S,gHCMN,mBAEI,0BACI,oBACI,eAAmB,2CAA6B,OACpD,OACJ,OACA,2BACI,cACI,4BACI,oBAAW,4BAAiB,OAC5B,oBAEJ,OACJ,OACA,eACI,6BACI,qBAAW,qBAAM,OACjB,oBACJ,OACJ,OACA,eACI,6BACI,qBAAW,+BAAgB,OAC3B,oBACA,oCAEA,gCACJ,OACJ,OACA,2BAAyD,oCAAkB,OAC3E,eAEI,qBAAmB,6DACf,uBAA0B,uBAAW,OACrC,2BACJ,OACJ,OAEA,uBAGJ,OACJ,O,yBAnBgC,iCACiB,uB,yBAgC7B,wBACI,QAAQ,Q,yBAD0C,gBAClD,wB,yBAQJ,wBAA0E,QAC1E,Q,yBADuD,gBAAmB,wB,yBA2B1E,wBAAqE,QAAS,Q,yBAAzB,gBAAgB,iB,uCAhDzF,mBAEI,0BACI,oBACI,eAAmB,uCAAyB,OAChD,OACJ,OACA,2BACI,cACI,4BACI,oBAAW,4BAAiB,OAC5B,yBACI,+BAEJ,OACJ,OACJ,OACA,eACI,6BACI,qBAAW,+BAAmB,OAC9B,yBACI,+BAEJ,OACJ,OACJ,OACA,eACI,6BACI,qBAAW,iBAAK,OAChB,yBAAqC,2EAEjC,yBAA6B,0BAAc,OAC3C,yBAA2B,uBAAW,OACtC,yBAA0B,2BAAY,OAC1C,OACJ,OACA,6BACI,qBAAW,+BAAgB,OAC3B,oBACA,oCACA,gCACJ,OACJ,OAEA,eACI,6BACI,qBAAW,qBAAM,OACjB,yBACI,+BACJ,OACJ,OACJ,OACA,eACI,2BAAqD,6BAAc,OACnE,2BAA8D,oCAAkB,OAGhF,qBAAmB,6DACf,uBAA0B,uBAAW,OACrC,+BACJ,OACJ,OAEA,uBAGJ,OACJ,O,kCAvDgC,gDASA,4CAiBA,iCACiB,sBASjB,8CCtFjC,MAAM,GAsBX,YAAoBpG,EAAkC2G,EAC5CzG,EAA+EC,GADrE,KAAAH,cAAkC,KAAA2G,gBAC5C,KAAAzG,YAZH,KAAA0G,gBAAiC,GACjC,KAAAC,cAA8B,GAC9B,KAAAC,aAA2B,GAC3B,KAAAC,qBAAiC,GACjC,KAAAC,mBAA+B,GAC/B,KAAAC,kBAA8B,GAC9B,KAAAC,UAAqB,CAAC,CAAElE,IAAK,EAAGhC,KAAM,SAAW,CAAEgC,IAAK,EAAGhC,KAAM,UAAY,CAAEgC,IAAK,EAAGhC,KAAM,aASlGJ,KAAKuG,KAAO,GACZvG,KAAKwG,cAAgBjH,EAGjBA,EAAKkH,eAAe,UAA8B,GAAlBlH,EAAKoF,MAAMvC,IAE7CpC,KAAK0G,mBAAmBnH,GAEfA,EAAKkH,eAAe,UAA8B,GAAlBlH,EAAKoF,MAAMvC,IAEpDpC,KAAK2G,gBAAgBpH,GAIrBS,KAAK4G,uBAKT,YAGA,gBAAgBrH,GAEdS,KAAK6G,aAAc,EACnB7G,KAAK8G,gBAAiB,EACtB,MAAMtG,EAAY,IAAIC,KAAK,IAAOlB,EAAKuF,KAAM,cAAcnE,OAAO,eAElEX,KAAK+G,sBAEL/G,KAAKgH,gBAAgBzH,EAAK0F,SAAS7E,KAAMb,EAAK2F,MAAM9E,MAEpDJ,KAAKiH,oBAAsBjH,KAAKZ,YAAYyB,MAAM,CAEhD8D,MAAO,CAACpF,EAAKoF,MAAMvE,KAAM,IAAWc,UACpC2D,YAAa,CAAC,GAAI,IAAW3D,UAC7BgG,UAAW,CAAC,GAAI,IAAWhG,UAC3B4D,KAAM,IAAI,IAAY,GAAI,IAC1BE,SAAU,EAAC,EAAO,IAAW9D,UAC7BiG,iBAAkB,CAAC5H,EAAKsF,YAAYzE,KAAM,IAAWc,UACrDkG,YAAa,CAAC7H,EAAK0F,SAAS7E,KAAM,IAAWc,UAC7CmG,WAAY,CAAC9H,EAAK2F,MAAM9E,KAAM,IAAWc,UACzCoG,eAAgB,CAAC/H,EAAKqF,MAAMxE,KAAM,IAAWc,UAC7CqG,UAAW,IAAI,IAAY/G,EAAW,IACtC2E,KAAM,CAAC5F,EAAK4F,KAAM,IAAWjE,UAC7BsG,cAAe,CAACjI,EAAKyF,SAAU,IAAW9D,YAE5ClB,KAAKiH,oBAAoBtF,IAAI,SAASC,SAAS,QAC/C5B,KAAKiH,oBAAoBtF,IAAI,oBAAoBC,SAASrC,EAAKsF,YAAYzE,MAC3EJ,KAAKiH,oBAAoBtF,IAAI,eAAeC,SAASrC,EAAK0F,SAAS7E,MACnEJ,KAAKiH,oBAAoBtF,IAAI,cAAcC,SAASrC,EAAK2F,MAAM9E,MAC/DJ,KAAKiH,oBAAoBtF,IAAI,kBAAkBC,SAASrC,EAAKqF,MAAMxE,MAErE,mBAAmBb,GAEjB,MAAMiB,EAAY,IAAIC,KAAK,IAAOlB,EAAKuF,KAAM,cAAcnE,OAAO,eAClEX,KAAK6G,aAAc,EACnB7G,KAAK8G,gBAAiB,EAEtB9G,KAAKiH,oBAAsBjH,KAAKZ,YAAYyB,MAAM,CAEhD8D,MAAO,CAACpF,EAAKoF,MAAMvE,KAAM,IAAWc,UACpC2D,YAAa,CAACtF,EAAKsF,YAAa,IAAW3D,UAC3CgG,UAAW,CAAC3H,EAAKqF,MAAMxE,KAAM,IAAWc,UACxC4D,KAAM,IAAI,IAAYtE,EAAW,IACjCwE,SAAU,CAACzF,EAAKyF,SAAU,IAAW9D,UACrCiG,iBAAkB,CAAC,GAAI,IAAWjG,UAClCkG,YAAa,CAAC,GAAI,IAAWlG,UAC7BmG,WAAY,CAAC,GAAI,IAAWnG,UAC5BoG,eAAgB,CAAC,GAAI,IAAWpG,UAChCqG,UAAW,IAAI,IAAY,GAAI,IAC/BpC,KAAM,EAAC,EAAO,IAAWjE,UACzBsG,cAAe,EAAC,EAAO,IAAWtG,YAEpClB,KAAKiH,oBAAoBtF,IAAI,SAASC,SAAS,WAC/C5B,KAAKiH,oBAAoBtF,IAAI,oBAAoBC,SAASrC,EAAKsF,YAAYzE,MAC3EJ,KAAKiH,oBAAoBtF,IAAI,eAAeC,SAASrC,EAAK0F,SAAS7E,MACnEJ,KAAKiH,oBAAoBtF,IAAI,cAAcC,SAASrC,EAAK2F,MAAM9E,MAC/DJ,KAAKiH,oBAAoBtF,IAAI,kBAAkBC,SAASrC,EAAKqF,MAAMxE,MAErE,uBAEEJ,KAAKwG,cAAcpE,KAAO,EAE1BpC,KAAKiH,oBAAsBjH,KAAKZ,YAAYyB,MAAM,CAEhD8D,MAAO,CAAC,GAAI,IAAWzD,UACvB2D,YAAa,CAAC,GAAI,IAAW3D,UAC7BgG,UAAW,CAAC,GAAI,IAAWhG,UAC3B4D,KAAM,IAAI,IAAY,GAAI,IAC1BE,SAAU,EAAC,EAAO,IAAW9D,UAC7BiG,iBAAkB,CAAC,GAAI,IAAWjG,UAClCkG,YAAa,CAAC,GAAI,IAAWlG,UAC7BmG,WAAY,CAAC,GAAI,IAAWnG,UAC5BoG,eAAgB,CAAC,GAAI,IAAWpG,UAChCqG,UAAW,IAAI,IAAY,GAAI,IAC/BpC,KAAM,CAAC,GAAI,IAAWjE,UACtBsG,cAAe,CAAC,GAAI,IAAWtG,YAGnC,aAEE,MAAMyE,EAAW,IAAI8B,SACrBvD,QAAQC,IAAI,aAAenE,KAAKuG,MAChCZ,EAAS+B,OAAO,OAAQ1H,KAAKuG,KAAKhH,MAClCS,KAAKuG,KAAKoB,YAAa,EACvB3H,KAAK+F,cAAc6B,OAAOjC,GAAUzC,KAClC,OAAAC,EAAA,GAAIrB,IACF,OAAQA,EAAM+F,MACZ,KAAK,IAAcC,eACjB9H,KAAKuG,KAAKwB,SAAWC,KAAKC,MAAqB,IAAfnG,EAAMoG,OAAepG,EAAMqG,OAC3D,MACF,KAAK,IAAcC,SACjB,OAAOtG,KAGb,OAAAuG,EAAA,GAAYC,IACVtI,KAAKuG,KAAKoB,YAAa,EAChB,OAAAY,EAAA,GAAG,GAAGvI,KAAKuG,KAAKhH,KAAKa,0BAC1BsD,UAAW5B,IACU,iBAAZ,GACToC,QAAQC,IAAIrC,EAAM0G,QAI1B,UACE,IAAIC,EAEFA,EADEzI,KAAK6G,YACO7G,KAAK0I,gBAAgBC,cAErB3I,KAAK4I,WAAWD,cAGhCF,EAAYI,SAAW,KACrB7I,KAAKuG,KAAO,CAAEhH,KAAMkJ,EAAYK,MAAM,GAAInB,YAAY,EAAOI,SAAU,GACvE7D,QAAQC,IAAInE,KAAKuG,MACjBvG,KAAK+I,cAEPN,EAAYO,QAEd,QACEhJ,KAAKV,UAAU0C,QAEjB,OAEE,GAAoD,YAAhDhC,KAAKiH,oBAAoBtF,IAAI,SAASvD,MAAqB,CAE7D,IAAI6K,EAA6B,GAEjCA,EAAa7G,IAAMpC,KAAKwG,cAAcpE,IACtC6G,EAAatE,MAAQ,CAAEvC,IAAK,EAAGhC,KAAM,uBACrC6I,EAAarE,MAAQ,CAAExC,IAAK,EAAGhC,KAAMJ,KAAKiH,oBAAoBtF,IAAI,aAAavD,OAC/E6K,EAAapE,YAAc7E,KAAKiH,oBAAoBtF,IAAI,eAAevD,MACvE6K,EAAajE,SAAWhF,KAAKiH,oBAAoBtF,IAAI,YAAYvD,MACjE6K,EAAanE,KAAO,IAAO9E,KAAKiH,oBAAoBtF,IAAI,QAAQvD,OAAO8K,OAAOC,WAC9EnJ,KAAKwG,cAAgByC,MAEhB,CAEL,IAAIG,EAA6B,GACjCA,EAAUhH,IAAMpC,KAAKwG,cAAcpE,IACnCgH,EAAUzE,MAAQ,CAAEvC,IAAK,EAAGhC,KAAM,mBAClC,IAAIwE,EAAQ5E,KAAKiG,cAAc3D,KAAMlE,GAAUA,EAAMgC,OAASJ,KAAKiH,oBAAoBtF,IAAI,kBAAkBvD,OAC7GgL,EAAUxE,MAAQ,CAAExE,KAAMwE,EAAMxE,KAAMgC,IAAKwC,EAAMxC,KACjDgH,EAAUlE,MAAQlF,KAAKsG,UAAUhE,KAAMlE,GAAUA,EAAMgC,OAASwE,EAAMyC,YAEtE+B,EAAUvE,YAAc7E,KAAKgG,gBAAgB1D,KAAM+G,GAAUA,EAAMjJ,OAASJ,KAAKiH,oBAAoBtF,IAAI,oBAAoBvD,OAC7HgL,EAAUpE,SAAWhF,KAAKiH,oBAAoBtF,IAAI,iBAAiBvD,MACnEgL,EAAUtE,KAAO,IAAO9E,KAAKiH,oBAAoBtF,IAAI,aAAavD,OAAO8K,OAAOC,WAChFC,EAAUnE,SAAWjF,KAAKkG,aAAa5D,KAAMgH,GAAQA,EAAIlJ,OAASJ,KAAKiH,oBAAoBtF,IAAI,eAAevD,OAC9GgL,EAAUjE,KAAOnF,KAAKiH,oBAAoBtF,IAAI,QAAQvD,MACtD4B,KAAKwG,cAAgB4C,EAEvBpJ,KAAKV,UAAU0C,MAAMhC,KAAKwG,eAE5B,sBAEE,EAAoBtG,QAAS9B,IAC3B4B,KAAKkG,aAAa/F,KAAK/B,EAAM6G,UAC7BjF,KAAKqG,kBAAkBlG,KAAK/B,EAAM6G,SAAS7E,QAE7C,EAAmBF,QAAS9B,IAC1B4B,KAAKgG,gBAAgB7F,KAAK/B,GAC1B4B,KAAKmG,qBAAqBhG,KAAK/B,EAAMgC,QAGzC,gBAAgBmJ,EAAclC,GAE5B,IAAImC,EAAc,EAAoBlH,KAAMC,GAAQA,EAAI0C,SAAS7E,OAASmJ,GAC1EvJ,KAAKiG,cAAgBuD,EAAoB,OAAEC,OAAQlH,GAAQA,EAAI8E,aAAeA,GAC9ErH,KAAKoG,mBAAqBpG,KAAKiG,cAAc9C,IAAKZ,GAAQA,EAAInC,MAEhE,cACE,IAAImJ,EAAevJ,KAAKiH,oBAAoBtF,IAAI,eAAevD,MAC3DiJ,EAAarH,KAAKiH,oBAAoBtF,IAAI,cAAcvD,MAC5D4B,KAAKgH,gBAAgBuC,EAAclC,GAErC,kBACsD,SAAhDrH,KAAKiH,oBAAoBtF,IAAI,SAASvD,OAExC4B,KAAK6G,aAAc,EACnB7G,KAAK8G,gBAAiB,EACtB9G,KAAK+G,wBAIL/G,KAAK6G,aAAc,EACnB7G,KAAK8G,gBAAiB,I,uCAzOf,IAA2B,iCAuBkC,O,wBAvB7D,GAA2B,iE,OAAA,M,u0DDlBxC,iBACA,+BACI,cACI,yBACI,oBAAW,4BAAc,OACzB,uBAAY,2CAAmB,EAAA4C,qBAC3B,uBAAyB,8BAAgB,OACzC,uBAA4B,mCAAoB,OACpD,OACJ,OAEA,6BA6CA,6BAoEA,8BACI,oBAAkC,iCAAS,EAAA1H,WAAS,iBAAK,OACzD,oBAA8C,iCAAS,EAAAa,UAAQ,gBAAI,OACvE,OACJ,OA/HJ,Q,MAAoB,gDAUF,uCA6CA,qC,+UEhDd,gBAAuC,kBAAM,Q,0BAC7C,gBAAwC,QAAuB,Q,yBAAvB,oC,uBAKxC,gBAAuC,sBAAO,Q,0BAC9C,gBAAwC,QAAuB,Q,yBAAvB,oC,uBAKxC,gBAAuC,mBAAO,Q,0BAC9C,gBAAwC,QAA6B,Q,yBAA7B,0C,uBAKxC,gBAAuC,kBAAM,Q,0BAC7C,gBAAwC,QAAiB,Q,yBAAjB,8B,uBAKxC,gBAAuC,wBAAY,Q,0BACnD,gBACE,0BACF,Q,yBADgB,uC,wCAMhB,0BACE,oBAAkC,+DAChC,sBAA0B,cAAG,OAC/B,OACF,Q,wCACA,mBACE,oBAAkC,2FAChC,sBAA0B,iBAAM,OAClC,OACA,oBAAkC,qFAChC,sBAAuB,gBAAK,OAC9B,OACF,Q,sBAEF,gB,sBACA,gBCrCK,MAAM,GAeX,YAAoBC,EAA2BzD,EACrC0D,GADU,KAAAD,SAA2B,KAAAzD,mBACrC,KAAA0D,QAdH,KAAA2B,QAA8C,GAKrD,KAAAiF,wBAAoC,CAAC,QAAS,QAAS,cAAe,OAAQ,cAAe,WAG7F,KAAA3G,MAA0BhD,KAAK+C,MAAME,OAAOC,KAC1C,OAAAC,EAAA,GAAIF,GAAUA,EAAO3E,IACrB,OAAA8E,EAAA,GAAU9E,GAAM0B,KAAKX,iBAAiBgE,YAAY/E,KAKlD0B,KAAKgD,MAAMU,UAAWzD,IACpBD,KAAKC,KAAOA,EAERA,EAAKyE,UACP1E,KAAK0E,QAAU,GAEfzE,EAAKyE,QAAQvB,IAAKZ,IAChB,IAAIqH,EAA6C,GACjD1H,OAAOC,OAAOyH,EAAUrH,GACpBA,EAAIuC,OACN8E,EAAS9E,KAAO,IAAOoE,KAAKW,OAAOtH,EAAIuC,OAAOnE,OAAO,cACrDX,KAAK0E,QAAQvE,KAAKyJ,SAO5B,YAKA,YAEE,MAAMjG,EAAe,IAAI,IAEzBA,EAAaC,cAAe,EAC5BD,EAAaE,WAAY,EAEzBF,EAAapE,KAAO,GACpBoE,EAAaG,WAAa,cAER9D,KAAK8C,OAAOkB,KAAK,GAA6BL,GACtDM,cAAcP,UAEtBnE,IAEE,IAAIuK,EAAyB,GAC7BA,EAAQxL,GAAK0B,KAAKC,KAAK3B,GACvBwL,EAAQpF,QAAU,GAElB,IAAIkF,EAA2C,GAC/C1H,OAAOC,OAAOyH,EAAUrK,GAExBqK,EAASxH,IAAMpC,KAAKC,KAAKyE,QAAQrG,OAAS,EAE1CyL,EAAQpF,QAAQvE,KAAKyJ,GACrB5J,KAAKC,KAAKyE,QAAQvB,IAAI/E,GAAS0L,EAAQpF,QAAQvE,KAAK/B,IAEpD8F,QAAQC,IAAI,wBACZnE,KAAKX,iBAAiBoD,WAAWqH,KAKvC,KAAKC,EAASC,GAEZ,MAAMrG,EAAe,IAAI,IAEzBA,EAAaC,cAAe,EAC5BD,EAAaE,WAAY,EAEzBF,EAAapE,KAAOwK,EACpBpG,EAAaG,WAAa,cAE1B9D,KAAKiK,aAAejK,KAAKC,KAAKyE,QAAQsF,GAEpBhK,KAAK8C,OAAOkB,KAAK,GAA6BL,GAEtDM,cAAcP,UACtBnE,IACE,GAAIA,EAAM,CACR,IAAIuK,EAAyB,GAC7BA,EAAQxL,GAAK0B,KAAKC,KAAK3B,GACvBwL,EAAQpF,QAAU1E,KAAKC,KAAKyE,QAAQ+E,OAAQlH,GAAQA,EAAIH,MAAQpC,KAAKiK,aAAa7H,KAElF,IAAIwH,EAA2C,GAC/CA,EAASxH,IAAMpC,KAAKiK,aAAa7H,IACjCF,OAAOC,OAAOyH,EAAUrK,GAExBuK,EAAQpF,QAAQvE,KAAKyJ,GAErB5J,KAAKX,iBAAiBoD,WAAWqH,MAIzC,eAAeE,GAEbhK,KAAKiK,aAAejK,KAAKC,KAAKyE,QAAQsF,GAEtC,IAAIF,EAAyB,GAC7BA,EAAQxL,GAAK0B,KAAKC,KAAK3B,GACvBwL,EAAQpF,QAAU1E,KAAKC,KAAKyE,QAAQ+E,OAAQlH,GAAQA,EAAIH,MAAQpC,KAAKiK,aAAa7H,KAClFpC,KAAKX,iBAAiBoD,WAAWqH,I,uCA/GxB,IAAqB,gC,wBAArB,GAAqB,yvBDlBlC,wBACA,oBACE,aAAI,oCAAmB,OACzB,OACA,kBAGE,UACE,sBACA,sBACF,OAGA,UACE,sBACA,uBACF,OAGA,WACE,uBACA,uBACF,OAGA,WACE,uBACA,uBACF,OAGA,WACE,uBACA,uBAGF,OAGA,YACE,qCAKA,8BAQF,OACA,wBACA,wBACF,Q,MApDiB,qCAkDI,2DACP,6D,ynBE3CP,MAAM,GAIX,YAAoB1K,EAAkCE,EAC3BC,GADP,KAAAH,cAAkC,KAAAE,YAGpD,MAAMkB,EAAY,IAAIC,KAAK,IAAOlB,EAAKiB,UAAW,cAAcG,OAAO,eACjEuJ,EAAU,IAAIzJ,KAAK,IAAOlB,EAAK2K,QAAS,cAAcvJ,OAAO,eAEnEX,KAAKmK,yBAA2BnK,KAAKZ,YAAYyB,MAAM,CACrDuJ,QAAS,CAAC7K,EAAK6K,QAAS,CAAC,IAAWtJ,UAAU,GAAI,IAAWC,UAAU,KAAM,MAC7EsJ,SAAU,CAAC9K,EAAK8K,SAAU,CAAC,IAAWvJ,UAAU,GAAI,IAAWC,UAAU,KAAM,MAC/EP,UAAW,IAAI,IAAYA,EAAW,IACtC0J,QAAS,IAAI,IAAYA,EAAS,IAClCI,MAAO,CAAC/K,EAAK+K,MAAO,IAAWpJ,YAEjClB,KAAKuK,kBAAoBhL,EAG3B,YAGA,QACES,KAAKV,UAAU0C,QAEjB,OACEhC,KAAKV,UAAU0C,MAAMhC,KAAKmK,yBAAyB/L,Q,uBC9B/C,gBAAuC,oBAAQ,Q,0BAC/C,gBAAwC,QAAoB,Q,yBAApB,iC,uBAKxC,gBAAuC,mBAAO,Q,0BAC9C,gBAAwC,QAAqB,Q,yBAArB,kC,uBAMxC,gBAAuC,kBAAM,Q,0BAC7C,gBAAwC,QAAsB,Q,yBAAtB,mC,uBAKxC,gBAAuC,kBAAM,Q,0BAC7C,gBAAwC,QAAoB,Q,yBAApB,iC,wCAKxC,0BACI,oBAAkC,+DAC9B,sBAA0B,cAAG,OACjC,OACJ,Q,wCACA,mBACI,oBAAkC,2FAC9B,sBAA0B,iBAAM,OACpC,OACA,oBAAkC,qFAC9B,sBAAuB,gBAAK,OAChC,OACJ,Q,sBAEJ,gB,sBACA,gB,uCDrCS,IAAoC,yBAKrC,O,wBALC,GAAoC,utB,GAAA,MEZjD,+BAEI,mBACI,0BACI,eAAmB,kCAAuB,OAC9C,OACA,2BACI,cACI,2BACI,oBAAW,kBAAO,OAClB,mBACJ,OACJ,OACA,eACI,4BACI,qBAAW,kBAAM,OACjB,mBACJ,OACJ,OACA,eACI,4BACI,qBAAW,iBAAK,OAChB,mBACA,mCACA,8BACJ,OACA,4BACI,qBAAW,iBAAK,OAChB,oBACA,mCACA,+BACJ,OACJ,OACA,eACI,4BACI,qBAAW,4CAAgC,OAC3C,uBACJ,OACJ,OACJ,OACJ,OAGA,8BACI,qBAAkC,iCAAS,EAAA4D,WAAS,iBAAK,OACzD,qBAA8C,iCAAS,EAAAa,UAAQ,gBAAI,OACvE,OA9CJ,Q,iCAAoB,6CAsBgB,iCACiB,sBAKjB,gCACiB,wB,2SCZ9C,MAAM,GAcX,YAAoBC,EAA2BzD,EACrC0D,EAA+ByH,GADrB,KAAA1H,SAA2B,KAAAzD,mBACrC,KAAA0D,QAA+B,KAAAyH,cARzC,KAAAxH,MAA0BhD,KAAK+C,MAAME,OAAOC,KAC1C,OAAAC,EAAA,GAAIF,GAAUA,EAAO3E,IACrB,OAAA8E,EAAA,GAAU9E,GAAM0B,KAAKX,iBAAiBgE,YAAY/E,KAGpD,KAAAmM,4BAAwC,CAAC,UAAW,WAAY,YAAa,UAAW,WAItFzK,KAAKgD,MAAMU,UAAWzD,IACpBD,KAAKoF,YAAcnF,EAAKmF,YACxBpF,KAAKC,KAAOA,IAIhB,YAEA,YACE,MAAM0D,EAAe,IAAI,IAEzBA,EAAaC,cAAe,EAC5BD,EAAaE,WAAY,EACzBF,EAAaG,WAAa9D,KAAK+D,MAC/BJ,EAAapE,KAAO,CAClB6K,QAAS,GACTC,SAAU,GACV7J,UAAW,aACX0J,QAAS,aACTI,MAAO,IAETtK,KAAK0K,aAAe1K,KAAKC,KAAKyE,QAAQvB,IAAK/E,GAAUA,EAAMgE,KAAKuI,OAAO,CAACxC,EAAO5F,IAAiBA,EAAM4F,EAAQ5F,EAAM4F,GAAW,EAE7GnI,KAAK8C,OAAOkB,KAAK,GAAsCL,GAE/DM,cAAcP,UACtBnE,IACE,GAAIA,EAAM,CACRA,EAAK6C,IAAMpC,KAAKC,KAAKoF,UAAUlC,IAAK/E,GAAUA,EAAMgE,KAAKuI,OAAO,CAACxC,EAAO5F,IAAiBA,EAAM4F,EAAQ5F,EAAM4F,GAAW,EACxH5I,EAAKiB,UAAY,IAAOjB,EAAKiB,WAAWG,OAAO,cAC/CpB,EAAK2K,QAAU,IAAO3K,EAAK2K,SAASvJ,OAAO,cAE3C,IAAImJ,EAAyB,GAC7BA,EAAQxL,GAAK0B,KAAKC,KAAK3B,GACvBwL,EAAQ1E,YAAc,GAEtBpF,KAAKC,KAAKmF,YAAYjC,IAAI/E,GAAS0L,EAAQ1E,YAAYjF,KAAK/B,IAC5D0L,EAAQ1E,YAAYjF,KAAKZ,GACzBS,KAAKX,iBAAiBoD,WAAWqH,MAMzC,KAAKC,EAASC,GAEZ,MAAMrG,EAAe,IAAI,IAEzBA,EAAaC,cAAe,EAC5BD,EAAaE,WAAY,EACzBF,EAAaG,WAAa9D,KAAK+D,MAC/BG,QAAQC,IAAI4F,GACZ/J,KAAK0K,aAAe1K,KAAKoF,YAAY4E,GAAK5H,IAC1CuB,EAAapE,KAAOwK,EAEF/J,KAAK8C,OAAOkB,KAAK,GAAsCL,GAE/DM,cAAcP,UACtBnE,IACE,GAAIA,EAAM,CAERA,EAAKiB,UAAY,IAAOjB,EAAKiB,WAAWG,OAAO,cAC/CpB,EAAK2K,QAAU,IAAO3K,EAAK2K,SAASvJ,OAAO,cAE3C,IAAImJ,EAAyB,GAC7BA,EAAQxL,GAAK0B,KAAKC,KAAK3B,GAEvB,IAAIsM,EAAqB,GACzB1I,OAAOC,OAAOyI,EAAQrL,GACtBqL,EAAOxI,IAAMpC,KAAK0K,aAElBZ,EAAQ1E,YAAcpF,KAAKC,KAAKmF,YAAYqE,OAAOrL,GAASA,EAAMgE,KAAOpC,KAAK0K,cAC9EZ,EAAQ1E,YAAYjF,KAAKyK,GACzB1G,QAAQC,IAAI,wBACZnE,KAAKX,iBAAiBoD,WAAWqH,MAMzC,eAAeE,GAEbhK,KAAK0K,aAAe1K,KAAKoF,YAAY4E,GAAK5H,IAE1C,IAAI0H,EAAyB,GAC7BA,EAAQxL,GAAK0B,KAAKC,KAAK3B,GAEvBwL,EAAQ1E,YAAcpF,KAAKC,KAAKmF,YAAYqE,OAAQlH,GAAQA,EAAIH,MAAQpC,KAAK0K,cAC7E1K,KAAKX,iBAAiBoD,WAAWqH,I,uCAxGxB,IAAwB,0C,wBAAxB,GAAwB,msBFjBrC,wBACA,oBACI,aAAI,8BAAmB,OAC3B,OACA,kBAII,UACI,sBACA,sBACJ,OAGA,UACI,sBACA,uBACJ,OAIA,WACI,uBACA,uBACJ,OAGA,WACI,uBACA,uBACJ,OAGA,WACI,qCAKA,8BAQJ,OACA,wBACA,wBACJ,Q,MA9CiB,yCA4CM,+DACP,iE,y3BGlCT,MAAMe,GAAkC,CAAC,CAAEzI,IAAK,EAAGhC,KAAM,aAAY,CAAEgC,IAAK,EAAGhC,KAAM,cAC5F,CAAEgC,IAAK,EAAGhC,KAAM,YAAc,CAAEgC,IAAK,EAAGhC,KAAM,cAC9C,CAAEgC,IAAK,EAAGhC,KAAM,aAAY,CAAEgC,IAAK,EAAGhC,KAAM,QAC5C,CAAEgC,IAAK,EAAGhC,KAAM,UAEH0K,GAAkC,CAAC,CAAE1I,IAAK,EAAGhC,KAAM,MAAQ,CAAEgC,IAAK,EAAGhC,KAAM,MAAQ,CAAEgC,IAAK,EAAGhC,KAAM,MAChH,CAAEgC,IAAK,EAAGhC,KAAM,MAAQ,CAAEgC,IAAK,EAAGhC,KAAM,MAAQ,CAAEgC,IAAK,EAAGhC,KAAM,O,0BCPxC,wBAA6D,QAAQ,Q,yBAAvB,gBAAe,iB,uBAIrE,QACI,yBACI,oBAAW,6BAAkB,OAC7B,mBACJ,OACJ,Q,0BAKQ,wBAA4D,QAAS,Q,yBAAzB,gBAAgB,iBCd7E,MAAM,GAOX,YAAoBhB,EAAkCE,EAAkFC,GAApH,KAAAH,cAAkC,KAAAE,YAJtD,KAAAyL,aAAyB,GACzB,KAAAC,UAAsB,GAKpBhL,KAAK+K,aAAeF,GAAgB1H,IAAKZ,GAAiBA,EAAInC,MAC9DJ,KAAK+K,aAAa5K,KAAK,QACvBH,KAAKgL,UAAYF,GAAe3H,IAAKZ,GAAiBA,EAAInC,MAE1D,MAAMI,EAAY,IAAIC,KAAK,IAAOlB,EAAKuF,KAAM,cAAcnE,OAAO,eAElEX,KAAKiL,gBAAkB1L,EAEvBS,KAAKkL,uBAAyBlL,KAAKZ,YAAYyB,MAAM,CACnDsK,aAAc,CAAC5L,EAAKa,KAAKA,KAAM,IAAWc,UAC1CkK,MAAO,CAAC,IACRC,cAAe,CAAC9L,EAAKoF,MAAMvE,KAAM,IAAWc,UAC5C4D,KAAM,IAAI,IAAYtE,EAAW,MAEnCR,KAAKkL,uBAAuBvJ,IAAI,gBAAgBC,SAASrC,EAAKa,KAAKA,MACnEJ,KAAKkL,uBAAuBvJ,IAAI,iBAAiBC,SAASrC,EAAKoF,MAAMvE,MAIvE,YAIA,QACEJ,KAAKV,UAAU0C,QAEjB,OACE,IAAIsJ,EAAiB,CACrB,KAAY,GAEZA,EAAK3G,MAAQmG,GAAexI,KAAMqC,GAAUA,EAAMvE,OAASJ,KAAKkL,uBAAuBvJ,IAAI,iBAAiBvD,OAC5GkN,EAAKlL,KAAOyK,GAAgBvI,KAAMgJ,GAASA,EAAKlL,OAASJ,KAAKkL,uBAAuBvJ,IAAI,gBAAgBvD,OACzGkN,EAAKxG,KAAO9E,KAAKkL,uBAAuBvJ,IAAI,QAAQvD,MAEpD4B,KAAKV,UAAU0C,MAAMsJ,I,uBChDjB,gBAAuC,mBAAO,Q,0BAC9C,gBAAwC,QAAsB,Q,yBAAtB,mC,uBAKxC,gBAAuC,kBAAM,Q,0BAC7C,gBAAwC,QAAuB,Q,yBAAvB,oC,uBAMxC,gBAAuC,kBAAM,Q,0BAC7C,gBAAwC,QAAkB,Q,yBAAlB,8B,wCAKxC,0BACI,oBAAkC,+DAC9B,sBAA0B,cAAG,OACjC,OACJ,Q,wCACA,mBACI,oBAAkC,2FAC9B,sBAA0B,iBAAM,OACpC,OACA,oBAAkC,qFAC9B,sBAAuB,gBAAK,OAChC,OACJ,Q,sBAEJ,gB,sBACA,gB,uCD7BS,IAA8B,yBAO8E,O,wBAP5G,GAA8B,soB,GAAA,MDd3C,+BAEI,mBACI,0BACI,oBACI,eAAmB,kBAAO,OAC9B,OAEJ,OACA,2BACI,cACI,yBACI,oBAAW,kBAAM,OACjB,0BACI,+BACJ,OACJ,OAEA,iCAOA,0BACI,qBAAW,iBAAK,OAChB,wBACI,+BACJ,OACJ,OACJ,OACA,eACI,0BACI,qBAAW,+BAAgB,OAC3B,mBACA,mCACA,gCACJ,OACJ,OACJ,OACJ,OAGA,8BACI,qBAAkC,iCAAS,EAAAtJ,WAAS,iBAAK,OACzD,qBAA8C,iCAAS,EAAAa,UAAQ,gBAAI,OACvE,OA/CJ,Q,iCAAoB,2CAcgB,wCAIN,qCAUM,oCAOA,gCACiB,wB,mIGlB9C,MAAM,GAaX,YAAoBC,EAA2BzD,EACrC0D,EAA+ByH,GADrB,KAAA1H,SAA2B,KAAAzD,mBACrC,KAAA0D,QAA+B,KAAAyH,cARzC,KAAAxH,MAA0BhD,KAAK+C,MAAME,OAAOC,KAC1C,OAAAC,EAAA,GAAIF,GAAUA,EAAO3E,IACrB,OAAA8E,EAAA,GAAU9E,GAAM0B,KAAKX,iBAAiBgE,YAAY/E,KAGpD,KAAAiN,0BAAsC,CAAC,eAAgB,gBAAiB,OAAQ,WAK9EvL,KAAKgD,MAAMU,UAAWzD,IACpBD,KAAKqF,UAAYpF,EAAKoF,UACtBrF,KAAKC,KAAOA,EAERA,EAAKoF,YACPrF,KAAKqF,UAAY,GAEjBpF,EAAKoF,UAAUlC,IAAKZ,IAClB,IAAIiJ,EAAoB,GACxBtJ,OAAOC,OAAOqJ,EAASjJ,GACnBA,EAAIuC,OACN0G,EAAQ1G,KAAO,IAAOoE,KAAKW,OAAOtH,EAAIuC,OAAOnE,OAAO,cACpDX,KAAKqF,UAAUlF,KAAKqL,SAS9B,YAGA,YACE,MAAM7H,EAAe,IAAI,IAEzBA,EAAaC,cAAe,EAC5BD,EAAaE,WAAY,EAEzBF,EAAapE,KAAO,CAClBoF,MAAO,CAAEvC,IAAK,EAAGhC,KAAM,IACvBA,KAAM,CAAEgC,IAAK,EAAGhC,KAAM,IACtB0E,KAAM,cAERnB,EAAaG,WAAa,cAC1B9D,KAAKyL,eAAiBzL,KAAKC,KAAKoF,UAAUlC,IAAK/E,GAAUA,EAAMgE,KAAKuI,OAAO,CAACxC,EAAO5F,IAAiBA,EAAM4F,EAAQ5F,EAAM4F,GAAW,EAEjHnI,KAAK8C,OAAOkB,KAAK,GAAgCL,GAEzDM,cAAcP,UACtBnE,IACE,GAAIA,EAAM,CAER,IAAIuK,EAAyB,GAC7BA,EAAQxL,GAAK0B,KAAKC,KAAK3B,GACvBwL,EAAQzE,UAAY,GAEpB,IAAImG,EAAoB,GACxBtJ,OAAOC,OAAOqJ,EAASjM,GACvBiM,EAAQpJ,IAAMpC,KAAKyL,eACnBD,EAAQ1G,KAAOvF,EAAKuF,KAAKoE,OAAOC,WAEhCW,EAAQzE,UAAUlF,KAAKqL,GACvBxL,KAAKC,KAAKoF,UAAUlC,IAAI/E,GAAS0L,EAAQzE,UAAUlF,KAAK/B,IACxD8F,QAAQC,IAAI,wBACZnE,KAAKX,iBAAiBoD,WAAWqH,MAKzC,KAAKC,EAASC,GAEZ,MAAMrG,EAAe,IAAI,IAEzBA,EAAaC,cAAe,EAC5BD,EAAaE,WAAY,EACzBK,QAAQC,IAAI4F,GACZ/J,KAAKyL,eAAiBzL,KAAKC,KAAKoF,UAAU2E,GAAK5H,IAC/CuB,EAAapE,KAAOwK,EACpBpG,EAAaG,WAAa,cACR9D,KAAK8C,OAAOkB,KAAK,GAAgCL,GAEzDM,cAAcP,UACtBnE,IACE,GAAIA,EAAM,CAER,IAAIuK,EAAyB,GAC7BA,EAAQxL,GAAK0B,KAAKC,KAAK3B,GACvBwL,EAAQzE,UAAY,GAEpByE,EAAQzE,UAAYrF,KAAKC,KAAKoF,UAAUoE,OAAOrL,GAASA,EAAMgE,KAAOpC,KAAKyL,gBAE1E,IAAID,EAAoB,GACxBtJ,OAAOC,OAAOqJ,EAASjM,GACvBiM,EAAQpJ,IAAMpC,KAAKyL,eACnBD,EAAQ1G,KAAOvF,EAAKuF,KAAKoE,OAAOC,WAEhCW,EAAQzE,UAAUlF,KAAKqL,GACvBtH,QAAQC,IAAI,wBACZnE,KAAKX,iBAAiBoD,WAAWqH,MAMzC,eAAeE,GAEbhK,KAAKyL,eAAiBzL,KAAKC,KAAKoF,UAAU2E,GAAK5H,IAE/C,IAAI0H,EAAyB,GAC7BA,EAAQxL,GAAK0B,KAAKC,KAAK3B,GACvBwL,EAAQzE,UAAYrF,KAAKC,KAAKoF,UAAUoE,OAAQlH,GAAQA,EAAIH,MAAQpC,KAAKyL,gBACzEzL,KAAKX,iBAAiBoD,WAAWqH,I,uCAvHxB,IAAwB,0C,wBAAxB,GAAwB,mwBDlBrC,iBACA,wBACA,oBACI,aAAI,kBAAO,OACf,OACA,kBAGI,UACI,sBACA,sBACJ,OAGA,UACI,uBACA,uBACJ,OAIA,WACI,uBACA,uBACJ,OAGA,WACI,qCAKA,8BAQJ,OACA,wBACA,wBACJ,Q,MAvCiB,uCAqCM,6DACP,+D,8hBE7BT,MAAM,GAOX,YAAoBzK,EAA4C0D,GAA5C,KAAA1D,mBAA4C,KAAA0D,QALhE,KAAAC,MAA0BhD,KAAK+C,MAAME,OAAOC,KAC1C,OAAAC,EAAA,GAAIF,GAAUA,EAAO3E,IACrB,OAAA8E,EAAA,GAAU9E,GAAM0B,KAAKX,iBAAiBgE,YAAY/E,KAOpD,a,uCAXW,IAAgB,sB,wBAAhB,GAAgB,0KCd7B,iC,gBACA,8BACA,iCACA,kC,KAHsB,gC,oFCItB,MAAMoN,GAAiB,CACrB,CACEC,KAAM,GAAIC,UAAW,KAQlB,MAAMC,I,wBAAAA,K,qDAAAA,KAAoB,SAHtB,CAAC,IAAaC,SAASJ,KACtB,O,4GCiDL,MAAMK,I,wBAAAA,K,qDAAAA,KAAa,UAbb,CACT,IAAkB,MAEnB,SAhBQ,CACP,IACAF,GACA,IACA,IACA,KACA,KAAYG,WAAW,QAAS,MAChC,KAAcA,WAAW,CAAC,OACzBC,GAAA,EAAYC,WAAgD,GAAnC,KAAoBC,kB","file":"x","sourcesContent":["import { AbstractControl } from '@angular/forms';\r\n\r\nexport function idValidator(control: AbstractControl): { [key: string]: any } | null {\r\n\r\n    const validRegex = /^[XYZ]?([0-9]{7,8})([A-Z])$/i;\r\n    const dniLetters = 'TRWAGMYFPDXBNJZSQVHLCKE';\r\n    let valid = false;\r\n\r\n\r\n    if (control.value && control.value.length === 9) {\r\n        let id = control.value.toUpperCase().replace(/\\s/, '');\r\n\r\n        var niePrefix = id.charAt(0);\r\n        switch (niePrefix) {\r\n            case 'X':\r\n                niePrefix = 0;\r\n                break;\r\n            case 'Y':\r\n                niePrefix = 1;\r\n                break;\r\n            case 'Z':\r\n                niePrefix = 2;\r\n                break;\r\n        }\r\n        id = niePrefix + id.substr(1);\r\n\r\n        if (validRegex.test(id)) {\r\n            valid = (id.charAt(8) === dniLetters.charAt(parseInt(id, 10) % 23));\r\n        }\r\n\r\n        return valid ? null : { invalidNif: { valid: false, value: control.value } };\r\n    }\r\n    return { invalidNif: { valid: false, value: control.value } };\r\n};","<mat-dialog-content [formGroup]=\"personalDetailsDlgForm\">\n\n    <mat-card>\n\n        <mat-card-header>\n            <div mat-card-avatar class=\"personal-picture\"></div>\n        </mat-card-header>\n        <mat-card-content>\n            <div>\n                <mat-form-field class=\"half-width-field\">\n                    <mat-label>Nombre</mat-label>\n                    <input matInput type=\"text\" placeholder=\"Nombre\" name=\"name\" formControlName=\"name\">\n                    <mat-error *ngIf=\"personalDetailsDlgForm.get('name').hasError('pattern')\">\n                        {{errors.pattern}}\n                    </mat-error>\n                    <mat-error\n                        *ngIf=\"personalDetailsDlgForm.get('name').hasError('minlength') || personalDetailsDlgForm.get('name').hasError('maxlength') \">\n                        {{errors.namelength}}\n                    </mat-error>\n                    <mat-error *ngIf=\"personalDetailsDlgForm.get('name').hasError('invalidName')\">\n                        {{errors.spaces}}\n                    </mat-error>\n                </mat-form-field>\n\n                <mat-form-field class=\"half-width-field\">\n                    <mat-label>Apellidos</mat-label>\n                    <input matInput type=\"text\" placeholder=\"Apellidos\" name=\"surname\" formControlName=\"surname\">\n                    <mat-error *ngIf=\"personalDetailsDlgForm.get('surname').hasError('pattern')\">\n                        {{errors.pattern}}\n                    </mat-error>\n                    <mat-error\n                        *ngIf=\"personalDetailsDlgForm.get('surname').hasError('minlength') || personalDetailsDlgForm.get('surname').hasError('maxlength') \">\n                        {{errors.namelength}}\n                    </mat-error>\n                    <mat-error *ngIf=\"personalDetailsDlgForm.get('surname').hasError('invalidName')\">\n                        {{errors.spaces}}\n                    </mat-error>\n                </mat-form-field>\n            </div>\n            <div>\n                <mat-form-field class=\"half-width-field\">\n                    <mat-label>Fecha de nacimiento</mat-label>\n                    <input matInput [matDatepicker]=\"picker\" formControlName=\"birthdate\">\n                    <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n                    <mat-datepicker panelClass=\"light-theme\" touchUi #picker></mat-datepicker>\n                </mat-form-field>\n\n                <mat-form-field class=\"half-width-field\">\n                    <mat-label>Permiso de conducir</mat-label>\n                    <mat-select panelClass=\"light-theme\" formControlName=\"license\" multiple>\n                        <mat-option *ngFor=\"let lic of licenseList\" [value]=\"lic\">{{lic}}\n                        </mat-option>\n                    </mat-select>\n                </mat-form-field>\n\n            </div>\n            <div>\n                <mat-form-field class=\"half-width-field\">\n                    <mat-label>Teléfono de contacto principal</mat-label>\n                    <input matInput ng2TelInput [ng2TelInputOptions]=\"{initialCountry: 'es'}\" formControlName=\"phone\"\n                        (hasError)=\"hasError($event)\" [errorStateMatcher]=\"matcher\" />\n                    <mat-error *ngIf=\"\n                        !personalDetailsDlgForm.get('phone').valid &&\n                        personalDetailsDlgForm.get('phone').touched\n                        \">This is an <strong>invalid</strong> phone number.\n                    </mat-error>\n                </mat-form-field>\n                <mat-form-field class=\"half-width-field\">\n                    <mat-label>Teléfono de contacto secundario</mat-label>\n                    <input matInput ng2TelInput [ng2TelInputOptions]=\"{initialCountry: 'es'}\"\n                        formControlName=\"phone2\" />\n                </mat-form-field>\n            </div>\n            <div>\n                <mat-form-field class=\"half-width-field\">\n                    <mat-label>Tipo de documento</mat-label>\n                    <mat-select panelClass=\"light-theme\" formControlName=\"documentType\">\n                        <mat-option value=\"NIF\">NIF</mat-option>\n                        <mat-option value=\"NIF\">NIE</mat-option>\n                    </mat-select>\n                </mat-form-field>\n                <mat-form-field class=\"half-width-field\">\n                    <mat-label>NIF/NIE</mat-label>\n                    <input matInput type=\"text\" placeholder=\"NIF/NIE\" name=\"documentNumber\"\n                        [errorStateMatcher]=\"matcher\" formControlName=\"documentNumber\">\n                    <mat-error *ngIf=\"personalDetailsDlgForm.get('documentNumber').hasError('invalidNif')\">\n                        {{errors.id}}\n                    </mat-error>\n\n                </mat-form-field>\n            </div>\n            <div>\n                <mat-form-field class=\"full-width-field\">\n                    <mat-label>Dirección</mat-label>\n                    <input matInput type=\"text\" placeholder=\"Dirección\" name=\"address\" formControlName=\"address\">\n                </mat-form-field>\n            </div>\n            <div>\n                <mat-form-field class=\"half-width-field\">\n                    <mat-label>Provincia</mat-label>\n                    <mat-select panelClass=\"light-theme\" formControlName=\"province\" (selectionChange)=\"changeTown()\">\n                        <mat-option *ngFor=\"let prov of provinceList\" [value]=\"prov\">{{prov}}</mat-option>\n                    </mat-select>\n                </mat-form-field>\n                <mat-form-field class=\"half-width-field\">\n                    <mat-label>Municipio</mat-label>\n                    <mat-select panelClass=\"light-theme\" formControlName=\"municipe\">\n                        <mat-option *ngFor=\"let town of townList\" [value]=\"town\">{{town}}</mat-option>\n                    </mat-select>\n                </mat-form-field>\n            </div>\n\n            <div>\n                <mat-form-field class=\"full-width-field\">\n                    <mat-label>Acerca de mí</mat-label>\n                    <textarea matInput [matTextareaAutosize] name=\"aboutMe\" formControlName=\"aboutMe\"></textarea>\n                </mat-form-field>\n            </div>\n            <div>\n                <mat-form-field class=\"full-width-field\">\n                    <mat-label>Otras competencias</mat-label>\n                    <textarea matInput [matTextareaAutosize] name=\"otherCompetences\"\n                        formControlName=\"otherCompetences\"></textarea>\n                </mat-form-field>\n            </div>\n\n        </mat-card-content>\n    </mat-card>\n</mat-dialog-content>\n<mat-dialog-actions>\n    <button class=\"mat-raised-button\" (click)=\"close()\">Cerrar</button>\n    <button class=\"mat-raised-button mat-primary\" (click)=\"save()\">Guardar</button>\n</mat-dialog-actions>","import { Component, OnInit, Inject, ViewEncapsulation } from '@angular/core';\nimport { FormBuilder, FormGroup, FormControl, FormGroupDirective, NgForm, Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { ErrorStateMatcher } from '@angular/material/core';\nimport * as towndata from '@assets/jsondata/munic.json';\nimport { idValidator } from '../validators/nif-validator';\nimport { usernameValidator } from '../validators/username-validator';\nimport { UsersStoreFacade } from '@shared/state/user/user.store-facade';\nimport { User } from '@shared/models/user.model';\nimport moment from 'moment';\n/* import { MAT_DATE_LOCALE, MAT_DATE_FORMATS, DateAdapter } from '@angular/material/core';\nimport {\n  MomentDateAdapter\n} from '@angular/material-moment-adapter'; */\n\nexport class MyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    //const isSubmitted = form && form.submitted;\n    return !!(control && control.invalid && (control.dirty || control.touched));\n  }\n}\n/* export const MY_FORMATS = {\n  parse: {\n    dateInput: 'DD/MM/YYYY'\n  },\n  display: {\n    dateInput: 'DD/MM/YYYY',\n    monthYearLabel: 'MM YYYY',\n    dateA11yLabel: 'LL',\n    monthYearA11yLabel: 'MM YYYY'\n  }\n}; */\n\n@Component({\n  selector: 'app-personal-details-dialog',\n  templateUrl: './personal-details-dialog.component.html',\n  styleUrls: ['./personal-details-dialog.component.scss'],\n  encapsulation: ViewEncapsulation.None\n  /*   providers: [\n      { provide: DateAdapter, useClass: MomentDateAdapter, deps: [MAT_DATE_LOCALE] },\n      { provide: MAT_DATE_FORMATS, useValue: MY_FORMATS }] */\n})\nexport class PersonalDetailsDialogComponent implements OnInit {\n\n  public personalDetailsDlgForm: FormGroup;\n  public selectedProvince: string;\n  public provinceList: string[] = [];\n  public townList: string[] = [];\n  matcher = new MyErrorStateMatcher();\n  private user: User;\n  public theme: string;\n\n  public errors: { [key: string]: string } = {\n    id: 'El formato de identificador es incorrecto',\n    namelength: 'El contenido de este campo debe tener una longitud entre 3 y 55 caracteres',\n    pattern: 'Este campo solo debe contener caracteres alfanuméricos',\n    spaces: 'Este campo no debe contener espacios al principio o al final del texto'\n  };\n  licenseList: string[] = ['Ninguno', 'AM', 'A1', 'A2', 'A', 'B1', 'B', 'C1', 'C', 'D1', 'D', 'BE', 'C1E', 'CE', 'D1E', 'DE'];\n\n\n  constructor(private formBuilder: FormBuilder, private usersStorefacade: UsersStoreFacade,\n    private dialogRef: MatDialogRef<PersonalDetailsDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) data) {\n\n    this.user = data;\n\n    towndata['default'].forEach((value) => { this.provinceList.push(value.name) });\n    this.updateTownList(data.address.province.name);\n\n    const startdate = new Date(moment(data.birthdate, 'DD/MM/YYYY').format('YYYY-MM-DD'));\n\n    this.personalDetailsDlgForm = this.formBuilder.group({\n      name: [data.name, [Validators.minLength(3), Validators.maxLength(55), usernameValidator, Validators.pattern(/[a-zA-Z0-9&_\\.-]/)]],\n      surname: [data.surname, [Validators.minLength(3), Validators.maxLength(55), usernameValidator, Validators.pattern(/[a-zA-Z0-9&_\\.-]/)]],\n      birthdate: new FormControl(startdate, []),\n      phone: [data.phone, Validators.required],\n      phone2: [data.phone2, Validators.required],\n      documentType: [data.documentType.name, Validators.required],\n      documentNumber: [data.documentNumber, [idValidator]],\n      address: [data.address.street, Validators.required],\n      province: [data.address.province.name, Validators.required],\n      municipe: [data.address.municipe.name, Validators.required],\n      license: [data.license, Validators.required],\n      aboutMe: data.aboutMe,\n      otherCompetences: data.otherCompetences\n    });\n    this.personalDetailsDlgForm.get('province').setValue(data.address.province.name);\n    this.personalDetailsDlgForm.get('municipe').setValue(data.address.municipe.name);\n    this.personalDetailsDlgForm.get('license').setValue(data.license.split(','));\n\n\n  }\n  hasError(event: any): void {\n\n    if (!event && this.personalDetailsDlgForm.value.phone !== '') {\n      this.personalDetailsDlgForm.get('phone').setErrors(['invalid_cell_phone', true]);\n    }\n  }\n  ngOnInit(): void {\n  }\n  close() {\n    this.dialogRef.close();\n  }\n  save() {\n\n    let partial: Partial<User> = {};\n    Object.assign(partial, this.user);\n\n    partial.name = this.personalDetailsDlgForm.get('name').value;\n    partial.surname = this.personalDetailsDlgForm.get('surname').value;\n\n    partial.phone = this.personalDetailsDlgForm.get('phone').value;\n    partial.phone2 = this.personalDetailsDlgForm.get('phone2').value;\n\n    if (this.personalDetailsDlgForm.get('documentType').value === 'NIF') {\n      partial.documentType = { uid: 1, name: 'NIF' };\n    } else {\n      partial.documentType = { uid: 2, name: 'NIE' };\n    }\n\n    partial.documentNumber = this.personalDetailsDlgForm.get('documentNumber').value;\n\n    let provObj = towndata['default'].find((cur) => cur.name === this.personalDetailsDlgForm.get('province').value);\n    let townObj = provObj['towns'].find((cur) => cur.name === this.personalDetailsDlgForm.get('municipe').value);\n\n\n    partial.address = {\n      street: this.personalDetailsDlgForm.get('address').value,\n      municipe: townObj,\n      province: { uid: provObj.uid, name: provObj.name }\n    };\n\n    partial.birthdate = moment(this.personalDetailsDlgForm.get('birthdate').value).format('DD/MM/YYYY');\n\n    this.usersStorefacade.updateUser(partial);\n    this.dialogRef.close(this.personalDetailsDlgForm.value);\n  }\n  updateTownList(provinceName) {\n    let provObj = towndata['default'].find((cur) => cur.name === provinceName);\n    this.townList = [];\n    provObj['towns'].forEach((value) => { this.townList.push(value.name) });\n  }\n\n  changeTown() {\n    let provinceName = this.personalDetailsDlgForm.get('province').value;\n    this.updateTownList(provinceName);\n  }\n\n}\n","import { Component, OnInit, Input, ChangeDetectionStrategy, ViewEncapsulation } from '@angular/core';\nimport { MatDialog, MatDialogConfig } from '@angular/material/dialog';\nimport { PersonalDetailsDialogComponent } from '../personal-details-dialog/personal-details-dialog.component';\nimport { User } from '../../shared/models/user.model';\nimport { ActivatedRoute } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { UsersStoreFacade } from '@shared/state/user/user.store-facade';\nimport { map, switchMap } from 'rxjs/operators';\n\n\n@Component({\n  selector: 'app-personal-details',\n  templateUrl: './personal-details.component.html',\n  styleUrls: ['./personal-details.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None\n})\nexport class PersonalDetailsComponent implements OnInit {\n  @Input() public user: User;\n  @Input() theme: string;\n\n  user$: Observable<User> = this.route.params.pipe(\n    map(params => params.id),\n    switchMap(id => this.usersStorefacade.getUserById(id))\n  );\n\n  public isUsernameValid: boolean = true;\n  public isPasswordValid: boolean = true;\n  public isReadOnly = false;\n\n  constructor(private dialog: MatDialog, private usersStorefacade: UsersStoreFacade, private route: ActivatedRoute) {\n\n    this.initialize_user();\n    this.user$.subscribe(\n      (value) => {\n\n        this.isReadOnly = false;\n        this.user = value;\n        this.isReadOnly = true;\n\n      }\n    );\n  }\n\n  ngOnInit() {\n  }\n\n  openDialog() {\n\n    const dialogConfig = new MatDialogConfig();\n\n    dialogConfig.disableClose = true;\n    dialogConfig.autoFocus = true;\n\n    dialogConfig.data = this.user;\n    dialogConfig.panelClass = this.theme;\n\n    const dialogRef = this.dialog.open(PersonalDetailsDialogComponent, dialogConfig);\n\n    dialogRef.afterClosed().subscribe(\n      data => {\n        console.log(\"Dialog output:\", data);\n      }\n    );\n  }\n  initialize_user() {\n    this.user = {\n      password: '',\n      psswrequest: false,\n      id: -1,\n      username: '',\n      avatar_hash: '',\n      name: '',\n      surname: '',\n      email: '',\n      birthdate: '',\n      phone: '',\n      phone2: '',\n      documentType: { uid: 2, name: 'NIF' },\n      documentNumber: '',\n      address: { street: '', province: { uid: 0, name: '' }, municipe: { uid: 0, name: '' } },\n      roles: [],\n      studies: [{\n        uid: 1,\n        level: { uid: 0, name: '' },\n        title: { uid: 0, name: '' },\n        institution: { uid: 0, name: '' },\n        date: '0',\n        certificate: false,\n        bilingue: false,\n        category: { uid: 0, name: '' },\n        grade: { uid: 1, name: '' },\n        dual: false\n      }],\n      experiences: [],\n      languages: [],\n      offers: [],\n      license: '',\n      aboutMe: '',\n      otherCompetences: ''\n    }\n  }\n\n}","<section class=\"mat-typography\">\n    <h3>Personal Data</h3>\n</section>\n<form class=\"personalDataForm\" class=\"default-theme\">\n    <mat-card>\n        <mat-card-header>\n            <img mat-card-image src=\"../../../assets/img/mike_wazowski.jpg\">\n        </mat-card-header>\n\n        <mat-card-content>\n            <div>\n                <mat-form-field class=\"half-width-field\">\n                    <mat-label>Nombre</mat-label>\n                    <input matInput type=\"text\" readonly=\"isReadOnly\" name=\"name\" [(ngModel)]=\"user.name\">\n                </mat-form-field>\n\n                <mat-form-field class=\"half-width-field\">\n                    <mat-label>Apellido</mat-label>\n                    <input matInput type=\"text\" readonly=\"isReadOnly\" name=\"surname\" [(ngModel)]=\"user.surname\">\n                </mat-form-field>\n            </div>\n\n            <div>\n                <mat-form-field class=\"half-width-field\">\n                    <mat-label>Correo electrónico</mat-label>\n                    <input matInput type=\"text\" readonly=\"isReadOnly\" name=\"email\" [(ngModel)]=\"user.email\">\n                </mat-form-field>\n                <mat-form-field class=\"half-width-field\">\n                    <mat-label>Fecha de Nacimiento</mat-label>\n                    <input matInput type=\"text\" readonly=\"isReadOnly\" name=\"birthdate\" [(ngModel)]=\"user.birthdate\">\n                </mat-form-field>\n            </div>\n\n            <div>\n                <mat-form-field class=\"third-width-field\">\n                    <mat-label>Teléfono</mat-label>\n                    <input matInput type=\"text\" readonly=\"isReadOnly\" name=\"phone\" [(ngModel)]=\"user.phone\">\n                </mat-form-field>\n                <mat-form-field class=\"third-width-field\">\n                    <mat-label>NIF/NIE</mat-label>\n                    <input matInput type=\"text\" readonly=\"isReadOnly\" name=\"documentNumber\"\n                        [(ngModel)]=\"user.documentNumber\">\n                </mat-form-field>\n                <mat-form-field class=\"third-width-field\">\n                    <mat-label>Licencia de conducir</mat-label>\n                    <input matInput type=\"text\" readonly=\"isReadOnly\" name=\"license\" [(ngModel)]=\"user.license\">\n                </mat-form-field>\n            </div>\n\n            <div>\n                <mat-form-field class=\"full-width-field\">\n                    <mat-label>Dirección</mat-label>\n                    <input matInput type=\"text\" readonly=\"isReadOnly\" name=\"address\" [(ngModel)]=\"user.address.street\">\n                </mat-form-field>\n            </div>\n            <div>\n\n            </div>\n            <div>\n                <mat-form-field class=\"full-width-field\">\n                    <mat-label>Sobre mí</mat-label>\n                    <textarea matInput [matTextareaAutosize] readonly=\"isReadOnly\" name=\"aboutMe\"\n                        [(ngModel)]=\"user.aboutMe\"></textarea>\n                </mat-form-field>\n            </div>\n            <div>\n                <mat-form-field class=\"full-width-field\">\n                    <mat-label>Otras competencias</mat-label>\n                    <textarea matInput [matTextareaAutosize] readonly=\"isReadOnly\" name=\"otherCompetences\"\n                        [(ngModel)]=\"user.otherCompetences\"></textarea>\n                </mat-form-field>\n            </div>\n\n        </mat-card-content>\n\n    </mat-card>\n\n    <button mat-button [color]=\"'primary'\" type=\"button\" class=\"mat-raised-button\"\n        (click)=\"openDialog()\">Editar</button>\n\n</form>","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpEvent, HttpErrorResponse, HttpEventType } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UploadService {\n  SERVER_URL: string = \"https://file.io/\";\n  constructor(private httpClient: HttpClient) { }\n\n  public upload(formData) {\n\n    return this.httpClient.post<any>(this.SERVER_URL, formData, {\n      reportProgress: true,\n      observe: 'events'\n    });\n  }\n\n}\n","<link href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" rel=\"stylesheet\">\n<mat-dialog-content [formGroup]=\"studyDetailsDlgForm\">\n    <div>\n        <mat-form-field>\n            <mat-label>Tipo de título</mat-label>\n            <mat-select (selectionChange)=\"changeTitleType()\" panelClass=\"light-theme\" formControlName=\"level\">\n                <mat-option value=\"CFGS\">Título formativo</mat-option>\n                <mat-option value=\"college\">Título universitario</mat-option>\n            </mat-select>\n        </mat-form-field>\n\n        <mat-card *ngIf=\"displayCollege\">\n\n            <mat-card-header>\n                <section class=\"mat-typography\">\n                    <h3 mat-card-title>Título de ciclo universitario</h3>\n                </section>\n            </mat-card-header>\n            <mat-card-content>\n                <div>\n                    <mat-form-field class=\"full-width-field\">\n                        <mat-label>Nombre del centro</mat-label>\n                        <input matInput type=\"text\" placeholder=\"Nombre del centro\" name=\"institution\"\n                            formControlName=\"institution\">\n                    </mat-form-field>\n                </div>\n                <div>\n                    <mat-form-field class=\"full-width-field\">\n                        <mat-label>Título</mat-label>\n                        <input matInput type=\"text\" placeholder=\"Título\" name=\"titleName\" formControlName=\"titleName\">\n                    </mat-form-field>\n                </div>\n                <div>\n                    <mat-form-field class=\"half-width-field\">\n                        <mat-label>Fecha del título</mat-label>\n                        <input matInput [matDatepicker]=\"picker\" formControlName=\"date\">\n                        <mat-datepicker-toggle matSuffix [for]=\"picker\">\n                        </mat-datepicker-toggle>\n                        <mat-datepicker panelClass=\"light-theme\" touchUi #picker></mat-datepicker>\n                    </mat-form-field>\n                </div>\n                <mat-checkbox color=\"primary\" formControlName=\"bilingue\">Formación bilingüe</mat-checkbox>\n                <div>\n                    <!--mat-progress-bar [value]=\"file.progress\"></mat-progress-bar-->\n                    <button mat-button (click)=\"onClick()\">\n                        <mat-icon color=\"primary\">file_upload</mat-icon>\n                        Carga fichero\n                    </button>\n                </div>\n\n                <input type=\"file\" #fileUpload id=\"fileUpload\" name=\"fileUpload\" accept=\"image/*\"\n                    style=\"display:none;\" />\n\n            </mat-card-content>\n        </mat-card>\n\n        <mat-card *ngIf=\"displayCFGS\">\n\n            <mat-card-header>\n                <section class=\"mat-typography\">\n                    <h3 mat-card-title>Título de ciclo formativo</h3>\n                </section>\n            </mat-card-header>\n            <mat-card-content>\n                <div>\n                    <mat-form-field class=\"full-width-field\">\n                        <mat-label>Nombre del centro</mat-label>\n                        <mat-select panelClass=\"light-theme\" formControlName=\"institution_cfgs\">\n                            <mat-option *ngFor=\"let inst of institutionListNames\" [value]=\"inst\">\n                                {{inst}}</mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                </div>\n                <div>\n                    <mat-form-field class=\"full-width-field\">\n                        <mat-label>Familia profesional</mat-label>\n                        <mat-select panelClass=\"light-theme\" formControlName=\"jobCategory\">\n                            <mat-option *ngFor=\"let category of categoryListNames\" [value]=\"category\">{{category}}\n                            </mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                </div>\n                <div>\n                    <mat-form-field class=\"half-width-field\">\n                        <mat-label>Grado</mat-label>\n                        <mat-select panelClass=\"light-theme\" (selectionChange)=\"changeTitle()\"\n                            formControlName=\"gradeLevel\">\n                            <mat-option value=\"superior\">Grado Superior</mat-option>\n                            <mat-option value=\"middle\">Grado medio</mat-option>\n                            <mat-option value=\"basic\">Grado básico</mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                    <mat-form-field color=\"primary\" panelClass=\"light-theme\" class=\"half-width-field\">\n                        <mat-label>Fecha del título</mat-label>\n                        <input matInput [matDatepicker]=\"picker\" formControlName=\"date_cfgs\">\n                        <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n                        <mat-datepicker panelClass=\"light-theme\" touchUi #picker></mat-datepicker>\n                    </mat-form-field>\n                </div>\n\n                <div>\n                    <mat-form-field class=\"full-width-field\">\n                        <mat-label>Título</mat-label>\n                        <mat-select panelClass=\"light-theme\" formControlName=\"titleName_cfgs\">\n                            <mat-option *ngFor=\"let title of CFGSTitleListNames\" [value]=\"title\">{{title}}</mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                </div>\n                <div>\n                    <mat-checkbox color=\"primary\" formControlName=\"dual\">Formación dual</mat-checkbox>\n                    <mat-checkbox color=\"primary\" formControlName=\"bilingue_cfgs\">Formación bilingüe</mat-checkbox>\n\n                    <!--mat-progress-bar [value]=\"file.progress\"></mat-progress-bar-->\n                    <button mat-button (click)=\"onClick()\">\n                        <mat-icon color=\"primary\">file_upload</mat-icon>\n                        Carga certificado\n                    </button>\n                </div>\n\n                <input type=\"file\" #fileUpload_cfgs id=\"fileUpload_cfgs\" name=\"fileUpload_cfgs\" accept=\"image/*\"\n                    style=\"display:none;\" />\n\n            </mat-card-content>\n        </mat-card>\n        <mat-dialog-actions>\n            <button class=\"mat-raised-button\" (click)=\"close()\">Close</button>\n            <button class=\"mat-raised-button mat-primary\" (click)=\"save()\">Save</button>\n        </mat-dialog-actions>\n    </div>","import { Component, OnInit, ElementRef, ViewChild, Inject, ViewEncapsulation } from '@angular/core';\nimport { HttpEventType, HttpErrorResponse } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport * as cfgsdata from '@assets/jsondata/CFGStitles.json';\nimport * as cfgsies from '@assets/jsondata/CFGSinstitutions.json';\nimport { UploadService } from '@shared/services/upload.service';\nimport { FormBuilder, FormGroup, FormControl, Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA, MatDialogRef } from \"@angular/material/dialog\";\nimport { CollegeStudy, VocationalStudy, TitleGrade, Institution, Category, Grade } from '@shared/models/study.model';\nimport moment from 'moment';\n\n@Component({\n  selector: 'app-study-details-dialog',\n  templateUrl: './study-details-dialog.component.html',\n  styleUrls: ['./study-details-dialog.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class StudyDetailsDialogComponent implements OnInit {\n\n  public studyDetailsDlgForm: FormGroup;\n  public selectedStudy: CollegeStudy | VocationalStudy;\n\n  public displayCFGS: boolean;\n  public displayCollege: boolean;\n\n  public file: any;\n\n\n  public institutionList: Institution[] = [];\n  public CFGSTitleList: TitleGrade[] = [];\n  public categoryList: Category[] = [];\n  public institutionListNames: string[] = [];\n  public CFGSTitleListNames: string[] = [];\n  public categoryListNames: string[] = [];\n  public gradeList: Grade[] = [{ uid: 1, name: 'basic' }, { uid: 2, name: 'middle' }, { uid: 3, name: 'superior' }];\n\n  @ViewChild('fileUpload', { static: false }) fileUpload: ElementRef;\n  @ViewChild('fileUpload_cfgs', { static: false }) fileUpload_cfgs: ElementRef;\n\n  constructor(private formBuilder: FormBuilder, private uploadService: UploadService,\n    private dialogRef: MatDialogRef<StudyDetailsDialogComponent>, @Inject(MAT_DIALOG_DATA) data) {\n\n\n    this.file = [];\n    this.selectedStudy = data;\n\n\n    if (data.hasOwnProperty('level') && data.level.uid == 2) {\n      // college studies\n      this.initialize_college(data);\n\n    } else if (data.hasOwnProperty('level') && data.level.uid == 1) {\n      // Vocational studies\n      this.initialize_cfgs(data);\n\n    } else {\n      // new & undefined study\n      this.initialize_undefined();\n\n    }\n  }\n\n  ngOnInit(): void {\n\n  }\n  initialize_cfgs(data: any) {\n\n    this.displayCFGS = true;\n    this.displayCollege = false;\n    const startdate = new Date(moment(data.date, 'DD/MM/YYYY').format('YYYY-MM-DD'));\n\n    this.initializeCfgsLists();\n\n    this.updateTitleList(data.category.name, data.grade.name);\n\n    this.studyDetailsDlgForm = this.formBuilder.group({\n\n      level: [data.level.name, Validators.required],\n      institution: ['', Validators.required],\n      titleName: ['', Validators.required],\n      date: new FormControl('', []),\n      bilingue: [false, Validators.required],\n      institution_cfgs: [data.institution.name, Validators.required],\n      jobCategory: [data.category.name, Validators.required],\n      gradeLevel: [data.grade.name, Validators.required],\n      titleName_cfgs: [data.title.name, Validators.required],\n      date_cfgs: new FormControl(startdate, []),\n      dual: [data.dual, Validators.required],\n      bilingue_cfgs: [data.bilingue, Validators.required]\n    });\n    this.studyDetailsDlgForm.get('level').setValue('CFGS');\n    this.studyDetailsDlgForm.get('institution_cfgs').setValue(data.institution.name);\n    this.studyDetailsDlgForm.get('jobCategory').setValue(data.category.name);\n    this.studyDetailsDlgForm.get('gradeLevel').setValue(data.grade.name);\n    this.studyDetailsDlgForm.get('titleName_cfgs').setValue(data.title.name);\n  }\n  initialize_college(data: any) {\n\n    const startdate = new Date(moment(data.date, 'DD/MM/YYYY').format('YYYY-MM-DD'));\n    this.displayCFGS = false;\n    this.displayCollege = true;\n\n    this.studyDetailsDlgForm = this.formBuilder.group({\n\n      level: [data.level.name, Validators.required],\n      institution: [data.institution, Validators.required],\n      titleName: [data.title.name, Validators.required],\n      date: new FormControl(startdate, []),\n      bilingue: [data.bilingue, Validators.required],\n      institution_cfgs: ['', Validators.required],\n      jobCategory: ['', Validators.required],\n      gradeLevel: ['', Validators.required],\n      titleName_cfgs: ['', Validators.required],\n      date_cfgs: new FormControl('', []),\n      dual: [false, Validators.required],\n      bilingue_cfgs: [false, Validators.required]\n    });\n    this.studyDetailsDlgForm.get('level').setValue('college');\n    this.studyDetailsDlgForm.get('institution_cfgs').setValue(data.institution.name);\n    this.studyDetailsDlgForm.get('jobCategory').setValue(data.category.name);\n    this.studyDetailsDlgForm.get('gradeLevel').setValue(data.grade.name);\n    this.studyDetailsDlgForm.get('titleName_cfgs').setValue(data.title.name);\n  }\n  initialize_undefined() {\n\n    this.selectedStudy.uid = -1;\n    // study to be defined from scratch\n    this.studyDetailsDlgForm = this.formBuilder.group({\n\n      level: ['', Validators.required],\n      institution: ['', Validators.required],\n      titleName: ['', Validators.required],\n      date: new FormControl('', []),\n      bilingue: [false, Validators.required],\n      institution_cfgs: ['', Validators.required],\n      jobCategory: ['', Validators.required],\n      gradeLevel: ['', Validators.required],\n      titleName_cfgs: ['', Validators.required],\n      date_cfgs: new FormControl('', []),\n      dual: ['', Validators.required],\n      bilingue_cfgs: ['', Validators.required]\n    });\n  }\n  uploadFile() {\n\n    const formData = new FormData();\n    console.log(\"uploadFile\" + this.file);\n    formData.append('file', this.file.data);\n    this.file.inProgress = true;\n    this.uploadService.upload(formData).pipe(\n      map(event => {\n        switch (event.type) {\n          case HttpEventType.UploadProgress:\n            this.file.progress = Math.round(event.loaded * 100 / event.total);\n            break;\n          case HttpEventType.Response:\n            return event;\n        }\n      }),\n      catchError((error: HttpErrorResponse) => {\n        this.file.inProgress = false;\n        return of(`${this.file.data.name} upload failed.`);\n      })).subscribe((event: any) => {\n        if (typeof (event) === 'object') {\n          console.log(event.body);\n        }\n      });\n  }\n  onClick() {\n    let file2upload;\n    if (this.displayCFGS) {\n      file2upload = this.fileUpload_cfgs.nativeElement;\n    } else {\n      file2upload = this.fileUpload.nativeElement;\n    }\n\n    file2upload.onchange = () => {\n      this.file = { data: file2upload.files[0], inProgress: false, progress: 0 };\n      console.log(this.file);\n      this.uploadFile();\n    }\n    file2upload.click();\n  }\n  close() {\n    this.dialogRef.close();\n  }\n  save() {\n\n    if (this.studyDetailsDlgForm.get('level').value === 'college') {\n\n      let collegeStudy = <CollegeStudy>{};\n      //college\n      collegeStudy.uid = this.selectedStudy.uid;\n      collegeStudy.level = { uid: 2, name: 'Ciclo universitario' };\n      collegeStudy.title = { uid: 1, name: this.studyDetailsDlgForm.get('titleName').value };\n      collegeStudy.institution = this.studyDetailsDlgForm.get('institution').value;\n      collegeStudy.bilingue = this.studyDetailsDlgForm.get('bilingue').value;\n      collegeStudy.date = moment(this.studyDetailsDlgForm.get('date').value).unix().toString();\n      this.selectedStudy = collegeStudy;\n\n    } else {\n\n      let cfgsStudy = <VocationalStudy>{};\n      cfgsStudy.uid = this.selectedStudy.uid;\n      cfgsStudy.level = { uid: 1, name: 'Ciclo formativo' };\n      let title = this.CFGSTitleList.find((value) => value.name === this.studyDetailsDlgForm.get('titleName_cfgs').value);\n      cfgsStudy.title = { name: title.name, uid: title.uid };\n      cfgsStudy.grade = this.gradeList.find((value) => value.name === title.gradeLevel);\n\n      cfgsStudy.institution = this.institutionList.find((insti) => insti.name === this.studyDetailsDlgForm.get('institution_cfgs').value);\n      cfgsStudy.bilingue = this.studyDetailsDlgForm.get('bilingue_cfgs').value;\n      cfgsStudy.date = moment(this.studyDetailsDlgForm.get('date_cfgs').value).unix().toString();\n      cfgsStudy.category = this.categoryList.find((cat) => cat.name === this.studyDetailsDlgForm.get('jobCategory').value);\n      cfgsStudy.dual = this.studyDetailsDlgForm.get('dual').value;\n      this.selectedStudy = cfgsStudy;\n    }\n    this.dialogRef.close(this.selectedStudy);\n  }\n  initializeCfgsLists() {\n\n    cfgsdata['default'].forEach((value) => {\n      this.categoryList.push(value.category);\n      this.categoryListNames.push(value.category.name);\n    });\n    cfgsies['default'].forEach((value) => {\n      this.institutionList.push(value);\n      this.institutionListNames.push(value.name)\n    });\n  }\n  updateTitleList(categoryName, gradeLevel) {\n\n    let categoryObj = cfgsdata['default'].find((cur) => cur.category.name === categoryName);\n    this.CFGSTitleList = categoryObj['titles'].filter((cur) => cur.gradeLevel === gradeLevel);\n    this.CFGSTitleListNames = this.CFGSTitleList.map((cur) => cur.name);\n  }\n  changeTitle() {\n    let categoryName = this.studyDetailsDlgForm.get('jobCategory').value;\n    let gradeLevel = this.studyDetailsDlgForm.get('gradeLevel').value;\n    this.updateTitleList(categoryName, gradeLevel);\n  }\n  changeTitleType() {\n    if (this.studyDetailsDlgForm.get('level').value === 'CFGS') {\n      // Vocational studies\n      this.displayCFGS = true;\n      this.displayCollege = false;\n      this.initializeCfgsLists();\n\n    } else {\n      // College studies\n      this.displayCFGS = false;\n      this.displayCollege = true;\n    }\n\n  }\n\n}\n","<mat-divider inset=“true”></mat-divider>\n<section class=\"mat-typography\">\n  <h3>Formación académica</h3>\n</section>\n<table mat-table [dataSource]=\"studies\" class=\"mat-elevation-z8\">\n\n  <!-- level Column -->\n  <ng-container matColumnDef=\"level\">\n    <th mat-header-cell *matHeaderCellDef> Nivel </th>\n    <td mat-cell *matCellDef=\"let element\"> {{element.level.name}} </td>\n  </ng-container>\n\n  <!-- Title Column -->\n  <ng-container matColumnDef=\"title\">\n    <th mat-header-cell *matHeaderCellDef> Título </th>\n    <td mat-cell *matCellDef=\"let element\"> {{element.title.name}} </td>\n  </ng-container>\n\n  <!-- Institution Column -->\n  <ng-container matColumnDef=\"institution\">\n    <th mat-header-cell *matHeaderCellDef> Centro </th>\n    <td mat-cell *matCellDef=\"let element\"> {{element.institution.name}} </td>\n  </ng-container>\n\n  <!-- Date Column -->\n  <ng-container matColumnDef=\"date\">\n    <th mat-header-cell *matHeaderCellDef> Fecha </th>\n    <td mat-cell *matCellDef=\"let element\"> {{element.date}} </td>\n  </ng-container>\n\n  <!-- Certificado Column -->\n  <ng-container matColumnDef=\"certificate\">\n    <th mat-header-cell *matHeaderCellDef> Certificado </th>\n    <td mat-cell *matCellDef=\"let element\">\n      <mat-checkbox [checked]='element.certificate' color=\"primary\"></mat-checkbox>\n    </td>\n  </ng-container>\n\n  <!-- Actions Column -->\n  <ng-container matColumnDef=\"actions\">\n    <mat-header-cell *matHeaderCellDef>\n      <button class=\"mat-raised-button\" (click)=\"createNew()\">\n        <mat-icon color=\"primary\">add</mat-icon>\n      </button>\n    </mat-header-cell>\n    <mat-cell *matCellDef=\"let element;let i = index\">\n      <button class=\"mat-raised-button\" (click)=\"edit(element, i)\">\n        <mat-icon color=\"primary\">create</mat-icon>\n      </button>\n      <button class=\"mat-raised-button\" (click)=\"cancelOrDelete(i)\">\n        <mat-icon color=\"warn\">clear</mat-icon>\n      </button>\n    </mat-cell>\n  </ng-container>\n  <tr mat-header-row *matHeaderRowDef=\"studiesDisplayedColumns\"></tr>\n  <tr mat-row *matRowDef=\"let row; columns: studiesDisplayedColumns;let i = index\"></tr>\n</table>","import { Component, OnInit, Input, ViewEncapsulation } from '@angular/core';\nimport { CollegeStudy, VocationalStudy } from '@shared/models/study.model';\nimport { MatDialog, MatDialogConfig } from '@angular/material/dialog';\nimport { StudyDetailsDialogComponent } from '../study-details-dialog/study-details-dialog.component';\nimport { UsersStoreFacade } from '@shared/state/user/user.store-facade';\nimport { ActivatedRoute } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { User } from '@shared/models/user.model';\nimport moment from 'moment';\n\n\n@Component({\n  selector: 'app-study-details',\n  templateUrl: './study-details.component.html',\n  styleUrls: ['./study-details.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class StudyDetailsComponent implements OnInit {\n  @Input() theme: string;\n  public studies: (CollegeStudy | VocationalStudy)[] = [];\n  public currentStudy: (CollegeStudy | VocationalStudy);\n  public dataSource: string[];\n  public user: User;\n\n  studiesDisplayedColumns: string[] = ['level', 'title', 'institution', 'date', 'certificate', 'actions'];\n\n\n  user$: Observable<User> = this.route.params.pipe(\n    map(params => params.id),\n    switchMap(id => this.usersStorefacade.getUserById(id))\n  );\n\n  constructor(private dialog: MatDialog, private usersStorefacade: UsersStoreFacade,\n    private route: ActivatedRoute) {\n    this.user$.subscribe((user) => {\n      this.user = user;\n      // convertDates \n      if (user.studies) {\n        this.studies = [];\n\n        user.studies.map((cur) => {\n          let newStudy = <(CollegeStudy | VocationalStudy)>{};\n          Object.assign(newStudy, cur)\n          if (cur.date) {\n            newStudy.date = moment.unix(Number(cur.date)).format(\"DD/MM/YYYY\");\n            this.studies.push(newStudy);\n          }\n        });\n      }\n    });\n  }\n\n  ngOnInit(): void {\n\n  }\n\n\n  createNew() {\n\n    const dialogConfig = new MatDialogConfig();\n\n    dialogConfig.disableClose = true;\n    dialogConfig.autoFocus = true;\n\n    dialogConfig.data = {};\n    dialogConfig.panelClass = \"light-theme\";\n\n    const dialogRef = this.dialog.open(StudyDetailsDialogComponent, dialogConfig);\n    dialogRef.afterClosed().subscribe(\n\n      data => {\n\n        let newUser: Partial<User> = {};\n        newUser.id = this.user.id;\n        newUser.studies = [];\n\n        let newStudy = <CollegeStudy | VocationalStudy>{};\n        Object.assign(newStudy, data);\n\n        newStudy.uid = this.user.studies.length + 1;\n\n        newUser.studies.push(newStudy);\n        this.user.studies.map(value => newUser.studies.push(value));\n\n        console.log('data has been pushed');\n        this.usersStorefacade.updateUser(newUser);\n\n      });\n\n  }\n  edit(element, idx) {\n\n    const dialogConfig = new MatDialogConfig();\n\n    dialogConfig.disableClose = true;\n    dialogConfig.autoFocus = true;\n\n    dialogConfig.data = element;\n    dialogConfig.panelClass = \"light-theme\";\n\n    this.currentStudy = this.user.studies[idx];\n\n    const dialogRef = this.dialog.open(StudyDetailsDialogComponent, dialogConfig);\n\n    dialogRef.afterClosed().subscribe(\n      data => {\n        if (data) {\n          let newUser: Partial<User> = {};\n          newUser.id = this.user.id;\n          newUser.studies = this.user.studies.filter((cur) => cur.uid !== this.currentStudy.uid);\n\n          let newStudy = <CollegeStudy | VocationalStudy>{};\n          newStudy.uid = this.currentStudy.uid;\n          Object.assign(newStudy, data);\n\n          newUser.studies.push(newStudy);\n\n          this.usersStorefacade.updateUser(newUser);\n        }\n      });\n  }\n  cancelOrDelete(idx) {\n\n    this.currentStudy = this.user.studies[idx];\n\n    let newUser: Partial<User> = {};\n    newUser.id = this.user.id;\n    newUser.studies = this.user.studies.filter((cur) => cur.uid !== this.currentStudy.uid);\n    this.usersStorefacade.updateUser(newUser);\n  }\n}\n","import { Component, OnInit, Inject } from '@angular/core';\nimport { FormBuilder, FormGroup, FormControl, Validators } from '@angular/forms';\nimport { Experience } from '@shared/models/experience.model';\nimport { usernameValidator } from '../validators/username-validator';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport moment from 'moment';\n\n@Component({\n  selector: 'app-work-experience-details-dialog',\n  templateUrl: './work-experience-details-dialog.component.html',\n  styleUrls: ['./work-experience-details-dialog.component.scss']\n})\nexport class WorkExperienceDetailsDialogComponent implements OnInit {\n  public experienceDetailsDlgForm: FormGroup;\n  public currentExperience: Experience;\n\n  constructor(private formBuilder: FormBuilder, private dialogRef: MatDialogRef<WorkExperienceDetailsDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) data) {\n\n    const startdate = new Date(moment(data.startdate, 'DD/MM/YYYY').format('YYYY-MM-DD'));\n    const enddate = new Date(moment(data.enddate, 'DD/MM/YYYY').format('YYYY-MM-DD'));\n\n    this.experienceDetailsDlgForm = this.formBuilder.group({\n      company: [data.company, [Validators.minLength(3), Validators.maxLength(255), usernameValidator]],\n      position: [data.position, [Validators.minLength(3), Validators.maxLength(255), usernameValidator]],\n      startdate: new FormControl(startdate, []),\n      enddate: new FormControl(enddate, []),\n      tasks: [data.tasks, Validators.required],\n    });\n    this.currentExperience = data;\n  }\n\n  ngOnInit(): void {\n  }\n\n  close() {\n    this.dialogRef.close();\n  }\n  save() {\n    this.dialogRef.close(this.experienceDetailsDlgForm.value);\n  }\n}\n","<mat-divider inset=“true”></mat-divider>\n<section class=\"mat-typography\">\n    <h3>Experiencia laboral</h3>\n</section>\n<table mat-table [dataSource]=\"experiences\" class=\"mat-elevation-z8\">\n\n\n    <!-- company name Column -->\n    <ng-container matColumnDef=\"company\">\n        <th mat-header-cell *matHeaderCellDef> Empresa </th>\n        <td mat-cell *matCellDef=\"let element\"> {{element.company}} </td>\n    </ng-container>\n\n    <!-- position column -->\n    <ng-container matColumnDef=\"position\">\n        <th mat-header-cell *matHeaderCellDef> Puesto </th>\n        <td mat-cell *matCellDef=\"let element\"> {{element.position}} </td>\n    </ng-container>\n\n\n    <!-- start Date Column -->\n    <ng-container matColumnDef=\"startdate\">\n        <th mat-header-cell *matHeaderCellDef> Desde </th>\n        <td mat-cell *matCellDef=\"let element\"> {{element.startdate}} </td>\n    </ng-container>\n\n    <!-- end Date Column -->\n    <ng-container matColumnDef=\"enddate\">\n        <th mat-header-cell *matHeaderCellDef> Hasta </th>\n        <td mat-cell *matCellDef=\"let element\"> {{element.enddate}} </td>\n    </ng-container>\n\n    <!-- Actions Column -->\n    <ng-container matColumnDef=\"actions\">\n        <mat-header-cell *matHeaderCellDef>\n            <button class=\"mat-raised-button\" (click)=\"createNew()\">\n                <mat-icon color=\"primary\">add</mat-icon>\n            </button>\n        </mat-header-cell>\n        <mat-cell *matCellDef=\"let element;let i = index\">\n            <button class=\"mat-raised-button\" (click)=\"edit(element, i)\">\n                <mat-icon color=\"primary\">create</mat-icon>\n            </button>\n            <button class=\"mat-raised-button\" (click)=\"cancelOrDelete(i)\">\n                <mat-icon color=\"warn\">clear</mat-icon>\n            </button>\n        </mat-cell>\n    </ng-container>\n    <tr mat-header-row *matHeaderRowDef=\"experiencesDisplayedColumns\"></tr>\n    <tr mat-row *matRowDef=\"let row; columns: experiencesDisplayedColumns;let i = index\"></tr>\n</table>","<mat-dialog-content [formGroup]=\"experienceDetailsDlgForm\">\n\n    <mat-card>\n        <mat-card-header>\n            <h3 mat-card-title>Experiencia profesional</h3>\n        </mat-card-header>\n        <mat-card-content>\n            <div>\n                <mat-form-field class=\"full-width-field\">\n                    <mat-label>Empresa</mat-label>\n                    <input matInput type=\"text\" name=\"company\" formControlName=\"company\">\n                </mat-form-field>\n            </div>\n            <div>\n                <mat-form-field class=\"full-width-field\">\n                    <mat-label>Puesto</mat-label>\n                    <input matInput type=\"text\" name=\"position\" formControlName=\"position\">\n                </mat-form-field>\n            </div>\n            <div>\n                <mat-form-field class=\"half-width-field\">\n                    <mat-label>Desde</mat-label>\n                    <input matInput [matDatepicker]=\"startpicker\" formControlName=\"startdate\">\n                    <mat-datepicker-toggle matSuffix [for]=\"startpicker\"></mat-datepicker-toggle>\n                    <mat-datepicker panelClass=\"light-theme\" touchUi #startpicker></mat-datepicker>\n                </mat-form-field>\n                <mat-form-field class=\"half-width-field\">\n                    <mat-label>Hasta</mat-label>\n                    <input matInput [matDatepicker]=\"endpicker\" formControlName=\"enddate\">\n                    <mat-datepicker-toggle matSuffix [for]=\"endpicker\"></mat-datepicker-toggle>\n                    <mat-datepicker panelClass=\"light-theme\" touchUi #endpicker></mat-datepicker>\n                </mat-form-field>\n            </div>\n            <div>\n                <mat-form-field class=\"full-width-field\">\n                    <mat-label>Tareas realizadas en este puesto</mat-label>\n                    <textarea matInput name=\"tasks\" [matTextareaAutosize] formControlName=\"tasks\"></textarea>\n                </mat-form-field>\n            </div>\n        </mat-card-content>\n    </mat-card>\n\n\n    <mat-dialog-actions>\n        <button class=\"mat-raised-button\" (click)=\"close()\">Close</button>\n        <button class=\"mat-raised-button mat-primary\" (click)=\"save()\">Save</button>\n    </mat-dialog-actions>","import { Component, OnInit, Input } from '@angular/core';\nimport { Experience } from '@shared/models/experience.model';\nimport { User } from '@shared/models/user.model';\nimport { MatDialog, MatDialogConfig } from '@angular/material/dialog';\nimport { DateAdapter } from '@angular/material/core';\nimport { UsersStoreFacade } from '@shared/state/user/user.store-facade';\nimport { WorkExperienceDetailsDialogComponent } from '@views/work-experience-details-dialog/work-experience-details-dialog.component';\nimport { ActivatedRoute } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport moment from 'moment';\n\n@Component({\n  selector: 'app-work-experiences',\n  templateUrl: './work-experiences.component.html',\n  styleUrls: ['./work-experiences.component.scss']\n})\nexport class WorkExperiencesComponent implements OnInit {\n  @Input() theme: string;\n  public experiences: Experience[];\n  public currentExpId: number;\n  public user: User;\n\n\n  user$: Observable<User> = this.route.params.pipe(\n    map(params => params.id),\n    switchMap(id => this.usersStorefacade.getUserById(id))\n  );\n\n  experiencesDisplayedColumns: string[] = ['company', 'position', 'startdate', 'enddate', 'actions'];\n\n  constructor(private dialog: MatDialog, private usersStorefacade: UsersStoreFacade,\n    private route: ActivatedRoute, private dateAdapter: DateAdapter<Date>) {\n    this.user$.subscribe((user) => {\n      this.experiences = user.experiences;\n      this.user = user;\n    });\n  }\n\n  ngOnInit(): void {\n  }\n  createNew() {\n    const dialogConfig = new MatDialogConfig();\n\n    dialogConfig.disableClose = true;\n    dialogConfig.autoFocus = true;\n    dialogConfig.panelClass = this.theme;\n    dialogConfig.data = {\n      company: '',\n      position: '',\n      startdate: '01/01/1970',\n      enddate: '01/01/1970',\n      tasks: ''\n    };\n    this.currentExpId = this.user.studies.map((value) => value.uid).reduce((total, cur) => { return cur > total ? cur : total }) + 1;\n\n    const dialogRef = this.dialog.open(WorkExperienceDetailsDialogComponent, dialogConfig);\n\n    dialogRef.afterClosed().subscribe(\n      data => {\n        if (data) {\n          data.uid = this.user.languages.map((value) => value.uid).reduce((total, cur) => { return cur > total ? cur : total }) + 1;\n          data.startdate = moment(data.startdate).format('DD/MM/YYYY');\n          data.enddate = moment(data.enddate).format('DD/MM/YYYY');\n\n          let newUser: Partial<User> = {};\n          newUser.id = this.user.id;\n          newUser.experiences = [];\n\n          this.user.experiences.map(value => newUser.experiences.push(value));\n          newUser.experiences.push(data);\n          this.usersStorefacade.updateUser(newUser);\n        }\n      }\n    );\n  }\n\n  edit(element, idx) {\n\n    const dialogConfig = new MatDialogConfig();\n\n    dialogConfig.disableClose = true;\n    dialogConfig.autoFocus = true;\n    dialogConfig.panelClass = this.theme;\n    console.log(element);\n    this.currentExpId = this.experiences[idx].uid;\n    dialogConfig.data = element;\n\n    const dialogRef = this.dialog.open(WorkExperienceDetailsDialogComponent, dialogConfig);\n\n    dialogRef.afterClosed().subscribe(\n      data => {\n        if (data) {\n\n          data.startdate = moment(data.startdate).format('DD/MM/YYYY');\n          data.enddate = moment(data.enddate).format('DD/MM/YYYY');\n\n          let newUser: Partial<User> = {};\n          newUser.id = this.user.id;\n\n          let newExp = <Experience>{};\n          Object.assign(newExp, data);\n          newExp.uid = this.currentExpId;\n\n          newUser.experiences = this.user.experiences.filter(value => value.uid != this.currentExpId);\n          newUser.experiences.push(newExp);\n          console.log('data has been pushed');\n          this.usersStorefacade.updateUser(newUser);\n        }\n      }\n    );\n\n  }\n  cancelOrDelete(idx) {\n\n    this.currentExpId = this.experiences[idx].uid;\n\n    let newUser: Partial<User> = {};\n    newUser.id = this.user.id;\n\n    newUser.experiences = this.user.experiences.filter((cur) => cur.uid !== this.currentExpId);\n    this.usersStorefacade.updateUser(newUser);\n\n  }\n}\n\n\n\n\n\n\n\n\n\n\n","export interface Language {\n  uid: number;\n  level: LanguageLevel;\n  name: LanguageName;\n  date: string;\n}\nexport interface LanguageName {\n  uid: number;\n  name: string;\n}\nexport interface LanguageLevel {\n  uid: number;\n  name: string;\n}\n\nexport const languageCatalog: LanguageName[] = [{ uid: 1, name: 'Inglés' }, { uid: 2, name: 'Francés' },\n{ uid: 3, name: 'Italiano' }, { uid: 4, name: 'Catalán' },\n{ uid: 5, name: 'Alemán' }, { uid: 6, name: 'Ruso' },\n{ uid: 6, name: 'Chino' }];\n\nexport const languageLevels: LanguageLevel[] = [{ uid: 1, name: 'A1' }, { uid: 2, name: 'A2' }, { uid: 3, name: 'B1' },\n{ uid: 2, name: 'B2' }, { uid: 5, name: 'C1' }, { uid: 6, name: 'C2' }]\n","<mat-dialog-content [formGroup]=\"languageDetailsDlgForm\">\n\n    <mat-card>\n        <mat-card-header>\n            <section class=\"mat-typography\">\n                <h3 mat-card-title>Idiomas</h3>\n            </section>\n\n        </mat-card-header>\n        <mat-card-content>\n            <div>\n                <mat-form-field>\n                    <mat-label>Idioma</mat-label>\n                    <mat-select panelClass=\"light-theme\" formControlName=\"languageName\" #languageSelect>\n                        <mat-option *ngFor=\"let lang of languageList\" [value]=\"lang\">{{lang}}</mat-option>\n                    </mat-select>\n                </mat-form-field>\n\n                <ng-container *ngIf=\"languageSelect.value=='Otro'\">\n                    <mat-form-field>\n                        <mat-label>Idioma alternativo</mat-label>\n                        <input matInput type=\"text\" name=\"other\" formControlName=\"other\">\n                    </mat-form-field>\n                </ng-container>\n\n                <mat-form-field>\n                    <mat-label>Nivel</mat-label>\n                    <mat-select panelClass=\"light-theme\" formControlName=\"languageLevel\">\n                        <mat-option *ngFor=\"let level of levelList\" [value]=\"level\">{{level}}</mat-option>\n                    </mat-select>\n                </mat-form-field>\n            </div>\n            <div>\n                <mat-form-field>\n                    <mat-label>Fecha del título</mat-label>\n                    <input matInput [matDatepicker]=\"picker\" formControlName=\"date\">\n                    <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n                    <mat-datepicker panelClass=\"light-theme\" touchUi #picker></mat-datepicker>\n                </mat-form-field>\n            </div>\n        </mat-card-content>\n    </mat-card>\n\n\n    <mat-dialog-actions>\n        <button class=\"mat-raised-button\" (click)=\"close()\">Close</button>\n        <button class=\"mat-raised-button mat-primary\" (click)=\"save()\">Save</button>\n    </mat-dialog-actions>","import { Component, OnInit, Inject, ViewEncapsulation } from '@angular/core';\nimport { FormBuilder, FormGroup, FormControl, Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { languageCatalog, languageLevels, Language } from '@shared/models/language.model';\nimport moment from 'moment';\n\n@Component({\n  selector: 'app-language-details-dialog',\n  templateUrl: './language-details-dialog.component.html',\n  styleUrls: ['./language-details-dialog.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\n\n\nexport class LanguageDetailsDialogComponent implements OnInit {\n\n  public languageDetailsDlgForm: FormGroup;\n  languageList: string[] = [];\n  levelList: string[] = [];\n  currentLanguage: Language;\n\n  constructor(private formBuilder: FormBuilder, private dialogRef: MatDialogRef<LanguageDetailsDialogComponent>, @Inject(MAT_DIALOG_DATA) data) {\n\n    this.languageList = languageCatalog.map((cur) => { return cur.name });\n    this.languageList.push('Otro');\n    this.levelList = languageLevels.map((cur) => { return cur.name });\n\n    const startdate = new Date(moment(data.date, 'DD/MM/YYYY').format('YYYY-MM-DD'));\n\n    this.currentLanguage = data;\n\n    this.languageDetailsDlgForm = this.formBuilder.group({\n      languageName: [data.name.name, Validators.required],\n      other: ['',],\n      languageLevel: [data.level.name, Validators.required],\n      date: new FormControl(startdate, [])\n    });\n    this.languageDetailsDlgForm.get('languageName').setValue(data.name.name);\n    this.languageDetailsDlgForm.get('languageLevel').setValue(data.level.name);\n\n  }\n\n  ngOnInit(): void {\n\n  }\n\n  close() {\n    this.dialogRef.close();\n  }\n  save() {\n    let lang = <Language>{};\n    lang.uid = -1;\n\n    lang.level = languageLevels.find((level) => level.name === this.languageDetailsDlgForm.get('languageLevel').value);\n    lang.name = languageCatalog.find((lang) => lang.name === this.languageDetailsDlgForm.get('languageName').value);\n    lang.date = this.languageDetailsDlgForm.get('date').value;\n\n    this.dialogRef.close(lang);\n  }\n}\n","<link href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" rel=\"stylesheet\">\n<mat-divider inset=“true”></mat-divider>\n<section class=\"mat-typography\">\n    <h3>Idiomas</h3>\n</section>\n<table mat-table [dataSource]=\"languages\" class=\"mat-elevation-z8\">\n\n    <!-- language name Column -->\n    <ng-container matColumnDef=\"languageName\">\n        <th mat-header-cell *matHeaderCellDef> Idioma </th>\n        <td mat-cell *matCellDef=\"let element\"> {{element.name.name}} </td>\n    </ng-container>\n\n    <!-- language level column -->\n    <ng-container matColumnDef=\"languageLevel\">\n        <th mat-header-cell *matHeaderCellDef> Nivel </th>\n        <td mat-cell *matCellDef=\"let element\"> {{element.level.name}} </td>\n    </ng-container>\n\n\n    <!-- Date Column -->\n    <ng-container matColumnDef=\"date\">\n        <th mat-header-cell *matHeaderCellDef> Fecha </th>\n        <td mat-cell *matCellDef=\"let element\"> {{element.date }} </td>\n    </ng-container>\n\n    <!-- Actions Column -->\n    <ng-container matColumnDef=\"actions\">\n        <mat-header-cell *matHeaderCellDef>\n            <button class=\"mat-raised-button\" (click)=\"createNew()\">\n                <mat-icon color=\"primary\">add</mat-icon>\n            </button>\n        </mat-header-cell>\n        <mat-cell *matCellDef=\"let element;let i = index\">\n            <button class=\"mat-raised-button\" (click)=\"edit(element, i)\">\n                <mat-icon color=\"primary\">create</mat-icon>\n            </button>\n            <button class=\"mat-raised-button\" (click)=\"cancelOrDelete(i)\">\n                <mat-icon color=\"warn\">clear</mat-icon>\n            </button>\n        </mat-cell>\n    </ng-container>\n    <tr mat-header-row *matHeaderRowDef=\"languagesDisplayedColumns\"></tr>\n    <tr mat-row *matRowDef=\"let row; columns: languagesDisplayedColumns;let i = index\"></tr>\n</table>","import { Component, OnInit, Input, ViewEncapsulation } from '@angular/core';\nimport { DateAdapter } from '@angular/material/core';\nimport { Language } from '@shared/models/language.model';\nimport { MatDialog, MatDialogConfig } from '@angular/material/dialog';\nimport { LanguageDetailsDialogComponent } from '../language-details-dialog/language-details-dialog.component';\nimport { UsersStoreFacade } from '@shared/state/user/user.store-facade';\nimport { ActivatedRoute } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { User } from '@shared/models/user.model';\nimport moment from 'moment';\n\n@Component({\n  selector: 'app-language-details',\n  templateUrl: './language-details.component.html',\n  styleUrls: ['./language-details.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class LanguageDetailsComponent implements OnInit {\n  @Input() theme: string;\n  public languages: Language[];\n  public currentLangUid: number;\n  public user: User;\n\n  user$: Observable<User> = this.route.params.pipe(\n    map(params => params.id),\n    switchMap(id => this.usersStorefacade.getUserById(id))\n  );\n\n  languagesDisplayedColumns: string[] = ['languageName', 'languageLevel', 'date', 'actions'];\n\n  constructor(private dialog: MatDialog, private usersStorefacade: UsersStoreFacade,\n    private route: ActivatedRoute, private dateAdapter: DateAdapter<Date>) {\n\n    this.user$.subscribe((user) => {\n      this.languages = user.languages;\n      this.user = user;\n\n      if (user.languages) {\n        this.languages = [];\n\n        user.languages.map((cur) => {\n          let newLang = <Language>{};\n          Object.assign(newLang, cur)\n          if (cur.date) {\n            newLang.date = moment.unix(Number(cur.date)).format(\"DD/MM/YYYY\");\n            this.languages.push(newLang);\n          }\n        });\n      }\n\n    });\n\n  }\n\n  ngOnInit(): void {\n\n  }\n  createNew() {\n    const dialogConfig = new MatDialogConfig();\n\n    dialogConfig.disableClose = true;\n    dialogConfig.autoFocus = true;\n\n    dialogConfig.data = {\n      level: { uid: 0, name: '' },\n      name: { uid: 0, name: '' },\n      date: '01/01/1970'\n    };\n    dialogConfig.panelClass = \"light-theme\";\n    this.currentLangUid = this.user.languages.map((value) => value.uid).reduce((total, cur) => { return cur > total ? cur : total }) + 1;\n\n    const dialogRef = this.dialog.open(LanguageDetailsDialogComponent, dialogConfig);\n\n    dialogRef.afterClosed().subscribe(\n      data => {\n        if (data) {\n\n          let newUser: Partial<User> = {};\n          newUser.id = this.user.id;\n          newUser.languages = [];\n\n          let newLang = <Language>{};\n          Object.assign(newLang, data);\n          newLang.uid = this.currentLangUid;\n          newLang.date = data.date.unix().toString();\n\n          newUser.languages.push(newLang);\n          this.user.languages.map(value => newUser.languages.push(value));\n          console.log('data has been pushed');\n          this.usersStorefacade.updateUser(newUser);\n        }\n      }\n    );\n  }\n  edit(element, idx) {\n\n    const dialogConfig = new MatDialogConfig();\n\n    dialogConfig.disableClose = true;\n    dialogConfig.autoFocus = true;\n    console.log(element);\n    this.currentLangUid = this.user.languages[idx].uid;\n    dialogConfig.data = element;\n    dialogConfig.panelClass = \"light-theme\";\n    const dialogRef = this.dialog.open(LanguageDetailsDialogComponent, dialogConfig);\n\n    dialogRef.afterClosed().subscribe(\n      data => {\n        if (data) {\n\n          let newUser: Partial<User> = {};\n          newUser.id = this.user.id;\n          newUser.languages = [];\n\n          newUser.languages = this.user.languages.filter(value => value.uid != this.currentLangUid);\n\n          let newLang = <Language>{};\n          Object.assign(newLang, data);\n          newLang.uid = this.currentLangUid;\n          newLang.date = data.date.unix().toString();\n\n          newUser.languages.push(newLang);\n          console.log('data has been pushed');\n          this.usersStorefacade.updateUser(newUser);\n        }\n      }\n    );\n\n  }\n  cancelOrDelete(idx) {\n\n    this.currentLangUid = this.user.languages[idx].uid;\n\n    let newUser: Partial<User> = {};\n    newUser.id = this.user.id;\n    newUser.languages = this.user.languages.filter((cur) => cur.uid !== this.currentLangUid);\n    this.usersStorefacade.updateUser(newUser);\n\n  }\n\n}\n","import { Component, OnInit, ChangeDetectionStrategy, ViewEncapsulation } from '@angular/core';\nimport { User } from '@shared/models/user.model';\nimport { UsersStoreFacade } from '@shared/state/user/user.store-facade';\nimport { ActivatedRoute } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-profile',\n  templateUrl: './profile.component.html',\n  styleUrls: ['./profile.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None\n})\nexport class ProfileComponent implements OnInit {\n\n  user$: Observable<User> = this.route.params.pipe(\n    map(params => params.id),\n    switchMap(id => this.usersStorefacade.getUserById(id))\n  );\n\n  constructor(private usersStorefacade: UsersStoreFacade, private route: ActivatedRoute) {\n\n  }\n\n  ngOnInit() {\n  }\n}","<app-personal-details [user]=\"user$ | async\" class=\"light-theme\" theme=\"light-theme\"></app-personal-details>\n<app-study-details class=\"light-theme\" theme=\"light-theme\"></app-study-details>\n<app-work-experiences class=\"light-theme\" theme=\"light-theme\"></app-work-experiences>\n<app-language-details class=\"light-theme\" theme=\"light-theme\"></app-language-details>","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { ProfileComponent } from '../profile/profile.component';\n\nconst routes: Routes = [\n  {\n    path: \"\", component: ProfileComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class ProfileRoutingModule { }\n","import { NgModule } from \"@angular/core\";\nimport { CommonModule } from '@angular/common';\nimport { ProfileRoutingModule } from './profile-routing.module';\nimport { ProfileComponent } from './profile.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { PersonalDetailsComponent } from '../personal-details/personal-details.component';\nimport { PersonalDetailsDialogComponent } from '../personal-details-dialog/personal-details-dialog.component';\nimport { StudyDetailsComponent } from '../study-details/study-details.component';\nimport { StudyDetailsDialogComponent } from '../study-details-dialog/study-details-dialog.component';\nimport { LanguageDetailsDialogComponent } from '../language-details-dialog/language-details-dialog.component';\nimport { LanguageDetailsComponent } from '../language-details/language-details.component';\nimport { SharedModule } from '@shared/shared.module';\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\nimport { UsersEffects } from '@shared/state/user/user.effects';\nimport { environment } from '@environments/environment';\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools';\nimport { UsersStoreFacade } from '@shared/state/user/user.store-facade';\nimport { StudentsService } from '@shared/services/students.service';\nimport { WorkExperiencesComponent } from '@views/work-experiences/work-experiences.component';\nimport { WorkExperienceDetailsDialogComponent } from '@views/work-experience-details-dialog/work-experience-details-dialog.component';\nimport * as fromUsers from '@shared/state/user';\n\n@NgModule({\n  declarations: [\n    ProfileComponent,\n    PersonalDetailsComponent,\n    PersonalDetailsDialogComponent,\n    StudyDetailsComponent,\n    StudyDetailsDialogComponent,\n    WorkExperiencesComponent,\n    WorkExperienceDetailsDialogComponent,\n    LanguageDetailsComponent,\n    LanguageDetailsDialogComponent,\n  ],\n  imports: [\n    CommonModule,\n    ProfileRoutingModule,\n    ReactiveFormsModule,\n    FormsModule,\n    SharedModule,\n    StoreModule.forFeature('users', fromUsers.reducers),\n    EffectsModule.forFeature([UsersEffects]),\n    !environment.production ? StoreDevtoolsModule.instrument() : []\n  ],\n  exports: [\n    ProfileComponent\n  ],\n  providers: [\n    UsersStoreFacade, StudentsService\n\n  ],\n  entryComponents: [\n    PersonalDetailsDialogComponent,\n    StudyDetailsDialogComponent,\n    WorkExperienceDetailsDialogComponent,\n    LanguageDetailsDialogComponent\n  ]\n})\n\n\nexport class ProfileModule { }\n"]}